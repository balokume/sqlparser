#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[942] =
    {   0,
        0,    0,    2,    2,    0,    0,  140,  138,    8,    8,
      138,  131,  138,  131,  131,  131,  134,  131,  131,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,    2,    2,    3,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    7,
        6,    7,    8,    0,    0,  137,    1,  133,    4,  132,
      134,  129,  128,  130,  136,  136,  136,  136,  136,  117,

      136,  118,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  119,  136,  120,  121,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  122,
      123,  124,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      125,  136,  136,  136,  136,  136,  136,  136,  136,    2,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    5,  135,  132,
      103,  136,  104,  136,  136,  105,  106,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  107,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  108,  136,  136,
      136,  136,  136,  136,  109,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  110,  136,  136,
      111,  136,  136,  136,  136,  136,  136,  136,  136,  112,
      136,  136,  113,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  114,  136,  136,  136,  127,
      136,  115,  136,  136,  136,  136,  116,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  136,  136,  136,  136,
      136,   76,  136,   77,   97,  136,  136,  136,  136,   78,
      136,  136,  136,  136,   79,  136,  136,  136,   80,   81,
      136,  136,  136,  136,  136,   82,   83,   84,  136,  136,
       85,  136,   86,  136,  136,  136,  136,  136,  136,   87,

      136,   88,   89,   90,  136,   91,  136,  136,  136,  136,
       92,  136,  136,  136,  136,  136,   93,   94,  136,  136,
      126,  136,  136,  136,  136,  136,   95,  136,  136,  136,
      136,   96,   98,   99,  136,  136,  136,  136,  136,  136,
      136,  100,  136,  101,  136,  102,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   58,   59,  136,  136,
      136,  136,  136,  136,  136,   60,  136,  136,  136,   61,
      136,  136,  136,  136,  136,  136,  136,  136,  136,   62,
      136,  136,  136,   63,   64,  136,  136,  136,  136,   65,
       66,   67,   68,  136,  136,  136,   69,   70,  136,  136,
      136,  136,  136,   71,  136,  136,  136,  136,   72,  136,
      136,  136,   73,  136,  136,  136,   74,  136,  136,   75,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  136,   34,  136,  136,   35,  136,
       36,  136,  136,   37,   38,  136,   39,   40,   41,  136,
       42,  136,   43,   44,  136,   45,   46,  136,  136,   47,
      136,  136,   48,  136,  136,  136,   49,  136,   50,   51,

       52,  136,   53,  136,  136,  136,   54,   55,   56,   57,
      136,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   18,   19,
       20,   21,   22,  136,   23,  136,   24,   25,   26,   27,
      136,   28,  136,  136,   29,   30,  136,   31,   32,  136,
      136,  136,   33,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,  136,   14,
      136,   15,  136,   16,  136,  136,   17,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  136,   11,  136,   12,
       13,    2,    2,    2,    2,    2,    9,   10,    2,    2,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    7,    5,    5,    8,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    5,    5,   12,
       13,   14,    5,    1,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    1,    1,    5,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        4,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[950] =
    {   0,
        0,    0,   67,    0,  132,  133,  375, 3754,  135,  139,
        0, 3754,  364,  358,  352,  355,  134,  133,  348,  130,
      125,  137,  169,  134,  177,  123,  180,  190,  122,  134,
      185,  197,  217,  228,  223,  119,  235,  274,  322,  256,
      219,  245,    0,    0,  171,  268,  356,    0,  353,  350,
      339,  339,  196,  264,  304,  381,  441,  493,  545,  593,
      641,  273,  283,  689,  373,  269,  433,  334,  741,  789,
      452,  378,  447,  839,  891,  491,  481,  539,  282, 3754,
     3754,  304,  340,  306,  268, 3754, 3754,  261, 3754,  255,
      215, 3754, 3754, 3754,    0,  184,  179,  343,  282,  290,

      441,    0,  314,  337,  377,  379,  370,  376,  550,  484,
      376,  402,  430,  447,  451,  550,  448,  444,  453,  480,
      485,  499,  530,  553,    0,  499,  596,  517,  548,  536,
      559,  590,  601,  550,  592,  588,  589,  599,  612,  608,
        0,  616,  601,  604,  623,  648,  643,  641,  647,  650,
      649,  648,  646,  664,  657,  669,  660,  687,  669,  665,
      688,  685,  698,  705,  703,  701,  727,  711,  697,    0,
      353,  253,  245,    0,    0,  210,    0,  157,  253,    0,
        0,    0,  723,  745,  759,  776,  831,  799,  793,  753,
      865,  893,  910,  833,  907,  932,  984,  929,  945,  963,

      948,  967,  999, 1017,  996, 1009, 1040, 1027, 1052, 1053,
     1051, 1082,  787, 1083, 1132, 1088, 1107,  986, 1116, 1142,
     1180, 1093, 1161, 1145, 1171, 1194, 1199, 1182, 1039, 1212,
     1215, 1204, 1220, 1233, 1245, 1254, 1137, 1255, 1271, 1269,
     1284, 1287, 1300, 1312, 1321, 1325, 1299, 1322, 1343, 1358,
     1373, 1362, 1375, 1376, 1398, 1367, 1397, 3754, 3754,  154,
        0,  715,    0,  719,  713,    0,    0,  711,  737,  770,
      873,  782,  795,  826,  851,  834,    0,  856,  856,  885,
     1323,  898,  909,  911,  936,  939,  955,    0,  982,  981,
     1059, 1044, 1094, 1122,    0, 1118, 1189, 1228, 1218, 1247,

     1262, 1273, 1314, 1327, 1386, 1392, 1399, 1421, 1392, 1406,
        0, 1401, 1427, 1424, 1430, 1434, 1430, 1417, 1418,    0,
     1429, 1424, 1426, 1441, 1446, 1451, 1440, 1439, 1443, 1437,
     1457, 1447, 1462, 1469, 1470,    0, 1453, 1457, 1460,    0,
     1474,    0, 1471, 1468, 1475, 1485,    0, 1477, 1478, 1477,
     1495, 1485, 1479, 1482, 1486, 1494, 1501,    0,  150, 1505,
     1506, 1516, 1519, 1535, 1520, 1524, 1538, 1541, 1550, 1556,
     1560, 1574, 1578, 1595, 1592, 1589, 1604, 1623, 1614, 1629,
     1628, 1627, 1645, 1662, 1658, 1646, 1663, 1668, 1677, 1681,
     1680, 1711, 1699, 1702, 1712, 1716, 1717, 1735, 1753, 1748,

     1754, 1757, 1766, 1713, 1765, 1767, 1788, 1789, 1797, 1791,
     1807, 1810, 1819, 1821, 1855, 1840, 1843, 1845, 1853, 1864,
     1876, 1879, 1874, 1877, 1912, 1909, 1914, 1922, 1913, 1947,
     1931, 1962, 1917, 1948, 1963, 1966, 1976, 1985, 1977, 1981,
     1979, 1987, 2002, 2021, 2016, 2019, 2031, 2035, 2050, 2056,
     2064, 2065, 2075, 2086, 2096, 2104, 1524, 1532, 1588, 1598,
     1613,    0, 1702,    0,    0, 1695, 1721, 1787, 1817,    0,
     1849, 1937, 2027, 2057,    0, 2063, 2067, 2083,    0,    0,
     2083, 2088, 2094, 2099, 2119,    0,    0,    0, 2122, 2108,
        0, 2116,    0, 2117, 2116, 2111, 2122, 2125, 2137,    0,

     2133,    0,    0,    0, 2129,    0, 2140, 2148, 2135, 2140,
        0, 2157, 2158, 2146, 2147, 2153,    0,    0, 2167, 2168,
        0, 2160, 2156, 2155, 2164, 2175,    0, 2178, 2175, 2181,
     2173,    0,    0, 2170, 2191, 2183, 2177, 2198, 2183, 2199,
     2202,    0, 2187,    0, 2204,    0, 2213, 2214, 2212, 2222,
     2217, 2218, 2247, 2236, 2246, 2268, 2258, 2257, 2282, 2280,
     2290, 2292, 2286, 2291, 2316, 2322, 2321, 2344, 2326, 2330,
     2334, 2355, 2340, 2359, 2380, 2365, 2370, 2384, 2398, 2388,
     2389, 2410, 2413, 2414, 2429, 2428, 2439, 2450, 2465, 2444,
     2473, 2462, 2468, 2481, 2483, 2484, 2499, 2496, 2518, 2514,

     2502, 2537, 2524, 2540, 2550, 2548, 2552, 2558, 2573, 2586,
     2574, 2602, 2591, 2588, 2616, 2614, 2625, 2626, 2628, 2627,
     2640, 2642, 2644, 2656, 2668, 2681, 2678, 2684, 2699, 2700,
     2665, 2686, 2716, 2710, 2718, 2722,    0,    0, 2202, 2224,
     2248, 2253, 2322, 2385, 2396,    0, 2395, 2532, 2592,    0,
     2667, 2687, 2724, 2734, 2720, 2724, 2726, 2740, 2741,    0,
     2748, 2739, 2738,    0,    0, 2739, 2755, 2742, 2751,    0,
        0,    0,    0, 2764, 2761, 2753,    0,    0, 2770, 2759,
     2760, 2774, 2772,    0, 2782, 2769, 2787, 2792, 2775, 2777,
     2777, 2797,    0, 2794, 2797, 2798,    0, 2788, 2808,    0,

     2806, 2807, 2818, 2808, 2810, 2841, 2842, 2836, 2832, 2844,
     2850, 2874, 2872, 2875, 2885, 2884, 2876, 2886, 2909, 2910,
     2914, 2938, 2939, 2940, 2943, 2962, 2964, 2954, 2968, 2977,
     2976, 2980, 2998, 2993, 3008, 3010, 3014, 3016, 3026, 3044,
     3022, 3031, 3047, 3052, 3062, 3050, 3076, 3068, 3085, 3098,
     3084, 3121, 3106, 3116, 3119, 3142, 3130, 3151, 3155, 3152,
     3160, 3170, 3192, 3173, 2822,    0, 2871, 2890, 2912, 2937,
        0, 3035, 3051,    0,    0, 3089,    0,    0,    0, 3100,
        0, 3092,    0,    0, 3102,    0,    0, 3124, 3158,    0,
     3152, 3171,    0, 3159, 3176, 3163,    0, 3193, 3181,    0,

        0, 3189,    0, 3208, 3209, 3191,    0,    0,    0,    0,
     3201, 3209, 3214, 3228, 3224, 3226, 3238, 3227, 3259, 3262,
     3243, 3249, 3268, 3260, 3278, 3281, 3283, 3291, 3312, 3297,
     3299, 3300, 3302, 3313, 3323, 3314, 3331, 3335, 3356, 3337,
     3353, 3345, 3354, 3366, 3377, 3371, 3367, 3388, 3389, 3390,
     3411, 3425, 3426, 3420, 3422, 3430, 3439, 3444,    0,    0,
        0,    0,    0, 3229,    0, 3390,    0,    0,    0,    0,
     3408,    0, 3414, 3428,    0,    0, 3414,    0,    0, 3430,
     3452, 3461,    0, 3462, 3463, 3465, 3474, 3475, 3480, 3479,
     3493, 3484, 3496, 3497, 3498, 3530, 3514, 3519, 3529, 3533,

     3538, 3547, 3548, 3551, 3570, 3564, 3573, 3581, 3500,    0,
     3521,    0, 3539,    0, 3549, 3571,    0, 3587, 3586, 3603,
     3592, 3622, 3604, 3605, 3616, 3621, 3588,    0, 3612,    0,
        0, 3637, 3638, 3646, 3647, 3655,    0,    0, 3656, 3659,
     3754, 3725, 3729, 3733,  153, 3737, 3741, 3745, 3749
    } ;

static yyconst flex_int16_t yy_def[950] =
    {   0,
      941,    1,  941,    3,  942,  942,  941,  941,  941,  941,
      943,  941,  944,  941,  941,  941,  941,  941,  941,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  946,  946,  941,  947,  946,  948,  946,
      946,  946,  946,  946,  946,  949,  949,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,  941,
      941,  941,  941,  943,  944,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  946,
      946,  947,  948,  946,  946,  946,  946,  946,  946,  946,
      946,  946,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,  941,  941,  941,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  946,  946,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,  945,  945,
      945,  945,  945,  945,  945,  945,  945,   57,   57,   57,
       57,   57,   57,   57,   57,   57,  945,  945,  945,  945,
      945,   57,   57,   57,   57,   57,  945,  945,   57,   57,
        0,  941,  941,  941,  941,  941,  941,  941,  941
    } ;

static yyconst flex_int16_t yy_nxt[3822] =
    {   0,
        8,    9,   10,   11,   12,   13,   12,   14,   15,   16,
       17,   18,   12,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   43,   43,
        8,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   43,   43,   44,   45,   46,
       47,   48,   49,   48,   50,   51,   52,   53,   54,   48,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   76,   77,   78,   79,   79,   79,   44,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   79,   79,   81,   81,   83,   83,   82,   82,
       83,   83,   90,  101,   91,   92,   93,   96,  121,   97,
      129,  103,  130,  147,  122,   98,   95,   99,  104,  113,
      359,  114,  100,  102,  260,  105,  115,  359,  106,  107,
      101,  116,  171,   83,   96,  121,   97,  129,  103,  130,
      147,  122,   98,  108,   99,  104,  113,  109,  114,  100,
      102,  110,  105,  115,  123,  106,  107,  111,  116,  117,

      112,  261,  124,  131,  178,  118,  179,  132,  119,  125,
      108,  120,  262,  133,  109,  134,  126,  127,  110,  135,
      176,  123,  128,   90,  111,   91,  117,  112,  261,  124,
      131,  136,  118,  166,  132,  119,  125,  144,  120,  262,
      133,  167,  134,  126,  127,  137,  135,  140,  145,  128,
      174,  138,  139,  148,  146,  141,  358,  149,  136,  142,
      166,  178,  143,  179,  144,  260,  168,  169,  167,   83,
       83,   88,  137,   86,  140,  145,  180,  181,  138,  139,
      148,  146,  141,  163,  149,  164,  142,  218,  165,  143,
      150,  183,  151,  168,  169,  152,  265,  211,  209,  266,

      183,  183,  153,  154,  210,  212,  267,  183,  155,  259,
      163,  183,  164,  258,  218,  165,  182,  150,  183,  151,
      183,  183,  152,  265,  211,  209,  266,  183,  183,  153,
      154,  210,  212,  267,  183,  155,  156,  157,  183,  270,
      158,   83,   83,  159,  160,  177,  271,  183,  183,  176,
      161,  272,  222,  162,  171,   83,  223,  175,  174,  170,
       94,   89,   88,  156,  157,   87,  270,  158,  263,   86,
      159,  160,  183,  271,  941,  941,  264,  161,  272,  222,
      162,  170,  170,  223,  170,  170,  170,  170,  170,  170,
      170,  183,  170,  170,  170,  263,  183,  275,  184,  183,

      185,  217,  273,  264,  274,  277,  186,  276,  187,  278,
      285,  183,  235,  188,  941,  941,  183,  941,  183,  941,
      941,  941,  941,  183,  275,  184,  941,  185,  217,  273,
      286,  274,  277,  186,  276,  187,  278,  285,  183,  235,
      188,  170,  170,  183,  170,  170,  170,  170,  170,  170,
      170,  219,  170,  170,  170,  220,  941,  286,  941,  189,
      268,  221,  287,  941,  288,  236,  232,  289,  941,  237,
      183,  183,  941,  294,  269,  295,  941,  233,  219,  190,
      941,  296,  220,  234,  941,  183,  189,  268,  221,  287,
      183,  288,  236,  232,  289,  254,  237,  183,  183,  183,

      294,  269,  295,  255,  233,  297,  190,  191,  296,  183,
      234,  183,  183,  298,  192,  283,  284,  183,  251,  183,
      252,  193,  254,  253,  194,  195,  183,  299,  304,  183,
      255,  183,  297,  941,  191,  941,  183,  941,  183,  941,
      298,  192,  283,  284,  309,  251,  183,  252,  193,  941,
      253,  194,  195,  941,  299,  304,  183,  183,  183,  196,
      256,  257,  300,  197,  279,  301,  290,  198,  291,  280,
      310,  309,  292,  199,  311,  281,  200,  183,  312,  293,
      302,  317,  282,  183,  183,  303,  196,  256,  257,  300,
      197,  279,  301,  290,  198,  291,  280,  310,  941,  292,

      199,  311,  281,  200,  183,  312,  293,  302,  317,  282,
      183,  183,  303,  305,  313,  315,  314,  316,  201,  318,
      202,  319,  320,  306,  321,  203,  322,  323,  307,  308,
      204,  183,  941,  324,  325,  326,  941,  327,  183,  941,
      305,  313,  315,  314,  316,  201,  318,  202,  319,  320,
      306,  321,  203,  322,  323,  307,  308,  204,  183,  183,
      324,  325,  326,  205,  327,  330,  328,  333,  331,  206,
      329,  334,  207,  332,  335,  208,  337,  338,  339,  183,
      941,  941,  336,  340,  341,  342,  183,  345,  941,  941,
      205,  346,  330,  328,  333,  331,  206,  329,  334,  207,

      332,  335,  208,  337,  338,  339,  183,  183,  213,  336,
      340,  341,  342,  343,  345,  214,  215,  347,  346,  348,
      349,  216,  351,  350,  344,  352,  353,  183,  941,  356,
      357,  941,  941,  457,  183,  213,  941,  458,  459,  460,
      343,  183,  214,  215,  347,  354,  348,  349,  216,  351,
      350,  344,  352,  353,  183,  224,  356,  357,  355,  183,
      457,  183,  360,  183,  458,  459,  460,  941,  183,  225,
      941,  183,  354,  461,  941,  226,  227,  183,  941,  183,
      941,  941,  224,  183,  941,  355,  183,  941,  183,  360,
      183,  183,  361,  941,  183,  462,  225,  183,  183,  941,

      461,  362,  226,  227,  183,  183,  183,  183,  228,  363,
      183,  183,  367,  465,  183,  366,  229,  183,  183,  361,
      230,  183,  462,  231,  183,  183,  368,  183,  362,  466,
      941,  183,  183,  941,  183,  228,  363,  183,  183,  367,
      465,  183,  366,  229,  183,  364,  941,  230,  365,  183,
      231,  374,  183,  368,  183,  238,  466,  239,  183,  467,
      240,  375,  941,  941,  183,  468,  469,  241,  242,  183,
      941,  183,  364,  243,  470,  365,  183,  183,  374,  941,
      941,  471,  238,  183,  239,  941,  467,  240,  375,  463,
      369,  464,  468,  469,  241,  242,  183,  370,  183,  472,

      243,  470,  941,  183,  183,  244,  245,  371,  471,  246,
      183,  183,  247,  248,  475,  941,  463,  369,  464,  249,
      941,  941,  250,  941,  370,  183,  472,  476,  183,  183,
      183,  183,  244,  245,  371,  372,  246,  373,  183,  247,
      248,  475,  376,  941,  477,  183,  249,  183,  183,  250,
      183,  478,  183,  941,  476,  183,  183,  941,  183,  941,
      382,  383,  372,  183,  373,  377,  183,  183,  479,  376,
      183,  477,  183,  480,  183,  183,  941,  183,  478,  384,
      386,  183,  941,  183,  387,  183,  183,  382,  383,  941,
      183,  385,  377,  183,  183,  479,  481,  183,  378,  482,

      480,  183,  183,  379,  183,  183,  384,  386,  183,  380,
      183,  387,  183,  183,  183,  388,  381,  183,  385,  941,
      941,  393,  183,  481,  410,  378,  482,  183,  183,  183,
      379,  183,  183,  389,  183,  390,  380,  183,  941,  391,
      394,  183,  388,  381,  183,  183,  392,  183,  393,  183,
      941,  410,  396,  941,  183,  183,  941,  183,  183,  941,
      389,  183,  390,  941,  183,  183,  391,  394,  395,  183,
      183,  183,  183,  392,  183,  483,  484,  183,  183,  396,
      397,  398,  183,  399,  183,  183,  400,  941,  941,  183,
      183,  183,  183,  941,  941,  395,  183,  183,  183,  941,

      183,  183,  483,  484,  183,  183,  183,  397,  398,  401,
      399,  183,  403,  400,  402,  408,  183,  183,  183,  485,
      183,  183,  941,  941,  416,  183,  183,  183,  183,  409,
      941,  183,  941,  183,  183,  411,  401,  941,  183,  403,
      486,  402,  408,  941,  487,  183,  485,  183,  183,  404,
      183,  416,  183,  183,  183,  183,  409,  432,  183,  405,
      183,  183,  411,  183,  406,  407,  412,  486,  413,  941,
      183,  487,  183,  941,  941,  183,  404,  183,  418,  183,
      183,  183,  183,  183,  432,  941,  405,  183,  417,  183,
      183,  406,  407,  412,  414,  413,  415,  183,  183,  183,

      183,  422,  183,  941,  419,  418,  183,  183,  941,  183,
      183,  941,  183,  421,  488,  417,  183,  183,  183,  420,
      183,  414,  183,  415,  941,  183,  183,  183,  422,  423,
      183,  419,  183,  183,  426,  425,  183,  183,  183,  183,
      421,  488,  183,  489,  183,  183,  420,  183,  424,  183,
      183,  427,  490,  183,  941,  428,  423,  183,  183,  183,
      183,  426,  425,  183,  183,  183,  941,  429,  491,  183,
      489,  183,  183,  183,  941,  424,  433,  183,  427,  490,
      183,  430,  428,  183,  492,  183,  431,  183,  941,  183,
      183,  941,  183,  183,  429,  491,  434,  436,  183,  183,

      183,  438,  183,  433,  435,  183,  493,  183,  430,  183,
      183,  492,  941,  431,  183,  437,  183,  444,  183,  183,
      183,  941,  183,  434,  436,  183,  439,  440,  438,  183,
      183,  435,  183,  493,  183,  941,  183,  183,  183,  183,
      183,  473,  437,  183,  444,  183,  441,  494,  445,  183,
      183,  442,  183,  439,  440,  495,  474,  183,  941,  183,
      183,  183,  443,  183,  183,  183,  183,  183,  473,  941,
      183,  941,  446,  441,  494,  445,  183,  183,  442,  450,
      183,  183,  495,  474,  941,  455,  183,  183,  183,  443,
      183,  183,  447,  183,  183,  448,  183,  451,  449,  446,

      183,  452,  941,  183,  496,  183,  450,  183,  183,  941,
      497,  183,  455,  183,  183,  183,  453,  498,  183,  447,
      183,  183,  448,  183,  451,  449,  501,  183,  452,  454,
      456,  496,  183,  502,  503,  183,  183,  497,  183,  499,
      183,  183,  183,  453,  498,  504,  505,  506,  507,  500,
      508,  509,  510,  501,  511,  512,  454,  456,  513,  514,
      502,  503,  183,  183,  515,  516,  499,  518,  519,  520,
      521,  522,  504,  505,  506,  507,  500,  508,  509,  510,
      523,  511,  512,  524,  517,  513,  514,  525,  526,  527,
      528,  515,  516,  529,  518,  519,  520,  521,  522,  530,

      531,  532,  533,  534,  535,  538,  536,  523,  537,  539,
      524,  517,  540,  541,  525,  526,  527,  528,  542,  543,
      529,  544,  546,  183,  547,  545,  530,  531,  532,  533,
      534,  535,  538,  536,  183,  537,  539,  548,  183,  540,
      541,  941,  183,  183,  183,  542,  543,  941,  544,  546,
      183,  547,  545,  183,  183,  637,  183,  183,  183,  183,
      549,  183,  183,  638,  548,  183,  550,  941,  183,  183,
      183,  183,  553,  183,  554,  552,  183,  551,  183,  183,
      183,  183,  637,  183,  183,  183,  183,  549,  183,  183,
      638,  555,  183,  550,  183,  183,  183,  941,  183,  553,

      183,  554,  552,  183,  551,  183,  183,  183,  556,  558,
      183,  557,  183,  183,  941,  183,  183,  941,  555,  183,
      941,  183,  560,  183,  559,  183,  639,  183,  562,  640,
      183,  641,  183,  183,  183,  556,  558,  183,  557,  183,
      183,  183,  183,  183,  565,  566,  183,  563,  561,  560,
      941,  559,  183,  639,  183,  562,  640,  183,  641,  183,
      183,  183,  564,  183,  570,  183,  183,  183,  183,  183,
      941,  565,  566,  183,  563,  561,  183,  568,  567,  183,
      183,  183,  571,  183,  183,  941,  183,  569,  183,  564,
      183,  570,  183,  183,  183,  572,  183,  573,  183,  183,

      183,  183,  941,  183,  568,  567,  183,  183,  183,  571,
      183,  183,  574,  183,  569,  183,  642,  576,  183,  183,
      183,  643,  572,  183,  573,  183,  183,  183,  183,  183,
      183,  586,  579,  183,  183,  183,  575,  183,  577,  574,
      183,  578,  183,  642,  576,  183,  183,  183,  643,  183,
      183,  183,  644,  183,  183,  183,  183,  183,  586,  579,
      941,  183,  183,  575,  183,  577,  183,  183,  578,  580,
      582,  183,  183,  183,  581,  183,  183,  183,  183,  644,
      183,  183,  183,  587,  183,  588,  183,  583,  941,  941,
      584,  183,  183,  183,  585,  183,  580,  582,  183,  183,

      183,  581,  183,  183,  183,  183,  589,  183,  941,  183,
      587,  183,  588,  183,  583,  183,  590,  584,  183,  183,
      645,  585,  183,  591,  592,  183,  183,  183,  594,  183,
      183,  183,  183,  589,  183,  183,  183,  183,  596,  183,
      593,  595,  183,  590,  941,  183,  941,  645,  183,  646,
      591,  592,  183,  183,  183,  594,  183,  183,  183,  183,
      598,  183,  183,  183,  183,  596,  183,  593,  595,  597,
      941,  183,  183,  183,  647,  183,  646,  599,  183,  600,
      941,  183,  183,  183,  183,  183,  183,  598,  183,  601,
      183,  183,  604,  183,  183,  605,  597,  183,  183,  941,

      183,  647,  183,  941,  599,  183,  600,  602,  183,  183,
      183,  603,  183,  941,  183,  183,  601,  183,  183,  604,
      183,  183,  605,  941,  183,  941,  606,  183,  941,  183,
      183,  183,  183,  941,  602,  615,  608,  941,  603,  183,
      183,  183,  183,  609,  183,  607,  611,  183,  610,  183,
      183,  183,  183,  606,  183,  183,  941,  183,  183,  183,
      183,  612,  615,  608,  613,  183,  616,  183,  941,  183,
      609,  648,  607,  611,  183,  610,  183,  183,  183,  183,
      183,  183,  183,  614,  183,  183,  183,  183,  612,  941,
      941,  613,  183,  616,  183,  183,  183,  183,  648,  183,

      183,  183,  617,  183,  183,  183,  620,  183,  183,  618,
      614,  183,  183,  183,  183,  183,  621,  183,  619,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  617,
      183,  183,  183,  620,  624,  622,  618,  183,  941,  183,
      183,  183,  183,  621,  183,  619,  183,  183,  623,  183,
      183,  941,  183,  183,  183,  941,  941,  183,  625,  183,
      649,  624,  622,  626,  183,  627,  183,  183,  183,  183,
      629,  650,  941,  183,  183,  623,  183,  941,  628,  651,
      183,  183,  183,  183,  183,  625,  183,  649,  183,  652,
      626,  630,  627,  183,  183,  183,  183,  629,  650,  631,

      183,  183,  183,  183,  183,  628,  651,  941,  653,  183,
      183,  632,  654,  183,  183,  183,  652,  655,  630,  633,
      183,  183,  183,  634,  183,  636,  631,  635,  656,  183,
      183,  183,  657,  658,  183,  653,  659,  660,  632,  654,
      183,  183,  183,  661,  655,  662,  633,  663,  664,  183,
      634,  183,  636,  665,  635,  656,  666,  667,  669,  657,
      658,  183,  670,  659,  660,  671,  672,  673,  668,  183,
      661,  674,  662,  675,  663,  664,  676,  677,  678,  679,
      665,  680,  681,  666,  667,  669,  682,  683,  684,  670,
      685,  686,  671,  672,  673,  668,  687,  688,  674,  689,

      675,  690,  691,  676,  677,  678,  679,  692,  680,  681,
      693,  694,  695,  682,  683,  684,  696,  685,  686,  697,
      698,  699,  700,  687,  688,  941,  689,  941,  690,  691,
      183,  183,  183,  941,  692,  705,  183,  693,  694,  695,
      183,  765,  766,  696,  701,  702,  697,  698,  699,  700,
      703,  183,  183,  704,  183,  183,  183,  183,  183,  183,
      183,  706,  705,  183,  183,  183,  767,  183,  765,  766,
      768,  701,  702,  941,  183,  183,  183,  703,  183,  183,
      704,  183,  183,  183,  183,  183,  183,  183,  706,  708,
      709,  183,  183,  767,  707,  183,  183,  768,  183,  941,

      183,  183,  183,  183,  183,  714,  183,  941,  183,  183,
      183,  183,  183,  183,  710,  711,  708,  709,  183,  713,
      183,  707,  183,  183,  183,  183,  712,  183,  183,  183,
      183,  183,  714,  183,  183,  183,  183,  183,  715,  183,
      183,  710,  711,  716,  183,  183,  713,  183,  183,  769,
      941,  183,  183,  712,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  718,  183,  715,  183,  183,  183,  717,
      716,  183,  183,  183,  720,  183,  769,  183,  183,  183,
      941,  183,  183,  183,  719,  183,  183,  183,  183,  183,
      718,  183,  721,  183,  722,  183,  717,  183,  183,  183,

      183,  720,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  719,  723,  770,  771,  183,  183,  724,  183,  721,
      183,  722,  183,  772,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  725,  941,  723,
      770,  771,  726,  183,  724,  183,  183,  183,  183,  183,
      772,  183,  183,  183,  183,  183,  941,  183,  183,  183,
      727,  941,  183,  183,  725,  728,  183,  183,  183,  726,
      729,  941,  941,  183,  183,  183,  941,  183,  183,  183,
      183,  730,  183,  183,  183,  731,  183,  727,  183,  183,
      941,  183,  728,  183,  183,  183,  732,  729,  733,  183,

      183,  183,  183,  183,  183,  941,  183,  183,  730,  183,
      183,  183,  731,  183,  736,  183,  734,  183,  183,  183,
      183,  183,  183,  732,  735,  733,  183,  183,  183,  183,
      183,  941,  183,  183,  183,  941,  183,  183,  183,  941,
      183,  736,  740,  734,  183,  738,  183,  183,  183,  183,
      737,  735,  183,  739,  941,  183,  183,  773,  183,  183,
      941,  183,  183,  183,  183,  941,  183,  183,  183,  740,
      183,  741,  738,  941,  743,  183,  183,  737,  183,  183,
      739,  742,  183,  183,  773,  183,  183,  744,  183,  183,
      183,  183,  183,  183,  941,  183,  183,  183,  741,  941,

      745,  743,  183,  183,  183,  183,  183,  941,  742,  183,
      774,  183,  183,  183,  744,  183,  941,  183,  183,  183,
      183,  748,  747,  183,  183,  941,  183,  745,  746,  183,
      750,  183,  183,  183,  183,  941,  183,  774,  183,  183,
      183,  941,  749,  183,  751,  753,  183,  183,  748,  747,
      752,  183,  183,  183,  183,  746,  183,  750,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  754,  749,
      183,  751,  753,  183,  183,  941,  941,  752,  183,  183,
      183,  183,  183,  762,  756,  183,  183,  183,  755,  183,
      183,  183,  183,  183,  183,  754,  183,  941,  759,  183,

      775,  183,  183,  183,  183,  183,  183,  183,  757,  183,
      762,  756,  758,  183,  776,  755,  183,  183,  183,  183,
      761,  183,  183,  183,  183,  759,  183,  775,  183,  183,
      183,  183,  760,  183,  183,  757,  764,  183,  183,  758,
      183,  776,  777,  183,  183,  183,  183,  761,  183,  183,
      763,  183,  778,  779,  183,  183,  183,  780,  781,  760,
      183,  183,  782,  764,  183,  183,  783,  183,  784,  777,
      785,  786,  787,  788,  789,  183,  790,  763,  791,  778,
      779,  183,  792,  183,  780,  781,  793,  183,  794,  782,
      795,  796,  797,  783,  798,  784,  799,  785,  786,  787,

      788,  789,  800,  790,  801,  791,  802,  803,  804,  792,
      805,  806,  807,  793,  808,  794,  809,  795,  796,  797,
      810,  798,  811,  799,  183,  183,  813,  941,  814,  800,
      941,  801,  941,  802,  803,  804,  183,  805,  806,  807,
      859,  808,  941,  809,  183,  183,  183,  810,  183,  811,
      818,  183,  183,  813,  183,  814,  183,  812,  815,  183,
      183,  941,  183,  183,  817,  941,  941,  859,  183,  816,
      183,  183,  183,  183,  183,  183,  941,  818,  819,  183,
      183,  183,  183,  183,  812,  815,  183,  183,  183,  183,
      821,  817,  183,  183,  824,  183,  816,  183,  860,  820,

      941,  183,  183,  183,  825,  819,  183,  183,  861,  183,
      183,  823,  183,  183,  183,  183,  941,  821,  822,  183,
      183,  824,  183,  183,  183,  860,  820,  183,  183,  183,
      183,  825,  183,  941,  941,  861,  941,  183,  823,  183,
      183,  183,  826,  827,  862,  822,  828,  183,  183,  183,
      183,  183,  183,  941,  183,  183,  183,  183,  183,  183,
      829,  183,  863,  831,  830,  941,  941,  941,  941,  826,
      827,  862,  183,  828,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  829,  183,  863,
      831,  830,  183,  832,  835,  183,  941,  833,  183,  183,

      183,  941,  183,  183,  183,  183,  183,  183,  183,  183,
      834,  183,  836,  183,  183,  183,  183,  941,  183,  183,
      832,  835,  183,  837,  833,  183,  183,  183,  183,  183,
      838,  183,  183,  183,  183,  941,  183,  834,  183,  836,
      183,  183,  183,  183,  183,  183,  183,  839,  183,  183,
      837,  864,  183,  183,  183,  183,  941,  838,  183,  183,
      183,  183,  183,  183,  183,  841,  941,  183,  844,  183,
      183,  183,  941,  183,  839,  183,  183,  840,  864,  183,
      183,  183,  183,  842,  865,  183,  183,  183,  183,  183,
      183,  183,  841,  843,  183,  844,  183,  183,  845,  846,

      183,  848,  183,  183,  840,  866,  183,  183,  941,  183,
      842,  865,  183,  183,  183,  183,  183,  183,  867,  868,
      843,  183,  183,  183,  183,  845,  846,  183,  848,  183,
      183,  847,  866,  183,  183,  849,  183,  183,  850,  183,
      869,  183,  941,  183,  183,  867,  868,  851,  183,  183,
      183,  183,  852,  941,  183,  870,  853,  183,  847,  183,
      183,  183,  849,  183,  183,  850,  183,  869,  183,  854,
      856,  183,  855,  183,  851,  183,  871,  872,  183,  852,
      183,  183,  870,  853,  183,  873,  183,  183,  183,  183,
      183,  183,  874,  183,  875,  183,  854,  856,  183,  855,

      183,  876,  857,  871,  872,  183,  858,  183,  183,  877,
      183,  183,  873,  878,  879,  183,  183,  183,  183,  874,
      183,  875,  880,  881,  882,  183,  883,  884,  876,  857,
      183,  941,  183,  858,  941,  183,  877,  183,  183,  941,
      878,  879,  886,  909,  183,  183,  183,  183,  941,  880,
      881,  882,  183,  883,  884,  885,  183,  183,  887,  183,
      941,  183,  183,  888,  183,  183,  183,  183,  941,  886,
      909,  183,  183,  183,  183,  889,  183,  183,  183,  183,
      183,  183,  885,  183,  891,  887,  183,  183,  183,  183,
      888,  183,  183,  183,  183,  890,  183,  183,  183,  183,

      183,  892,  889,  183,  183,  183,  183,  183,  183,  183,
      941,  891,  941,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  890,  183,  183,  183,  183,  183,  892,  183,
      183,  183,  896,  183,  941,  183,  183,  183,  894,  893,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  895,  183,  183,  183,  183,  896,
      897,  183,  183,  900,  183,  894,  893,  183,  183,  183,
      898,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  895,  183,  183,  183,  183,  899,  897,  183,  183,
      900,  183,  901,  902,  183,  183,  183,  898,  183,  183,

      183,  183,  183,  903,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  899,  904,  183,  183,  941,  183,  901,
      902,  183,  183,  910,  911,  905,  183,  183,  183,  183,
      903,  183,  183,  183,  183,  183,  183,  941,  183,  906,
      183,  904,  183,  183,  183,  912,  913,  914,  183,  183,
      910,  911,  905,  183,  183,  183,  183,  183,  183,  907,
      183,  915,  183,  183,  183,  183,  906,  183,  183,  908,
      183,  183,  912,  913,  914,  183,  183,  183,  916,  917,
      183,  183,  183,  183,  183,  183,  907,  183,  915,  183,
      183,  183,  183,  183,  918,  183,  908,  183,  183,  941,

      183,  183,  183,  183,  183,  916,  917,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  918,  183,  941,  183,  183,  919,  183,  183,  183,
      183,  183,  183,  927,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  920,  922,  183,  183,
      921,  183,  183,  919,  928,  941,  183,  183,  183,  183,
      927,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      929,  183,  941,  920,  922,  183,  183,  921,  183,  183,
      923,  928,  183,  183,  183,  183,  183,  930,  183,  183,
      925,  926,  183,  183,  183,  183,  183,  929,  183,  183,

      931,  924,  183,  183,  183,  183,  937,  923,  183,  183,
      183,  183,  183,  183,  930,  183,  183,  925,  926,  183,
      932,  183,  183,  183,  183,  183,  183,  931,  924,  183,
      183,  183,  183,  937,  183,  183,  933,  183,  183,  183,
      183,  183,  183,  935,  938,  936,  183,  932,  183,  183,
      183,  183,  183,  934,  183,  939,  183,  183,  941,  183,
      183,  183,  941,  933,  183,  183,  183,  183,  183,  183,
      935,  938,  936,  183,  183,  183,  183,  183,  940,  941,
      934,  183,  939,  183,  183,  183,  183,  183,  941,  941,
      941,  183,  183,  183,  183,  941,  941,  183,  941,  941,

      183,  183,  183,  183,  183,  940,  941,  941,  941,  941,
      941,  183,  183,  941,  941,  941,  941,  941,  941,  941,
      183,  183,  941,  941,  183,   80,   80,   80,   80,   84,
      941,  941,   84,   85,  941,   85,   85,  170,  941,  170,
      170,  172,  941,  172,  172,  173,  941,  173,  173,  183,
      941,  183,  183,    7,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941
    } ;

static yyconst flex_int16_t yy_chk[3822] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    6,    9,    9,    5,    6,
       10,   10,   17,   21,   17,   18,   18,   20,   26,   20,
       29,   22,   30,   36,   26,   20,  945,   20,   22,   24,
      359,   24,   20,   21,  260,   22,   24,  178,   22,   22,
       21,   24,   45,   45,   20,   26,   20,   29,   22,   30,
       36,   26,   20,   23,   20,   22,   24,   23,   24,   20,
       21,   23,   22,   24,   27,   22,   22,   23,   24,   25,

       23,   96,   27,   31,   53,   25,   53,   31,   25,   28,
       23,   25,   97,   31,   23,   32,   28,   28,   23,   32,
      176,   27,   28,   91,   23,   91,   25,   23,   96,   27,
       31,   33,   25,   41,   31,   25,   28,   35,   25,   97,
       31,   41,   32,   28,   28,   33,   32,   34,   35,   28,
      173,   33,   33,   37,   35,   34,  172,   37,   33,   34,
       41,  179,   34,  179,   35,   90,   42,   42,   41,   46,
       46,   88,   33,   85,   34,   35,   54,   54,   33,   33,
       37,   35,   34,   40,   37,   40,   34,   66,   40,   34,
       38,   62,   38,   42,   42,   38,   99,   63,   62,   99,

       79,   63,   38,   38,   62,   63,  100,   66,   38,   84,
       40,   62,   40,   82,   66,   40,   55,   38,   62,   38,
       79,   63,   38,   99,   63,   62,   99,   79,   63,   38,
       38,   62,   63,  100,   66,   38,   39,   39,   62,  103,
       39,   83,   83,   39,   39,   52,  103,   79,   63,   51,
       39,  104,   68,   39,  171,  171,   68,   50,   49,   47,
       19,   16,   15,   39,   39,   14,  103,   39,   98,   13,
       39,   39,   68,  103,    7,    0,   98,   39,  104,   68,
       39,   56,   56,   68,   56,   56,   56,   56,   56,   56,
       56,   65,   56,   56,   56,   98,   72,  106,   56,   68,

       56,   65,  105,   98,  105,  107,   56,  106,   56,  108,
      111,   65,   72,   56,    0,    0,   72,    0,   65,    0,
        0,    0,    0,   72,  106,   56,    0,   56,   65,  105,
      112,  105,  107,   56,  106,   56,  108,  111,   65,   72,
       56,   57,   57,   72,   57,   57,   57,   57,   57,   57,
       57,   67,   57,   57,   57,   67,    0,  112,    0,   57,
      101,   67,  113,    0,  114,   73,   71,  115,    0,   73,
       71,   67,    0,  117,  101,  118,    0,   71,   67,   57,
        0,  119,   67,   71,    0,   73,   57,  101,   67,  113,
       71,  114,   73,   71,  115,   77,   73,   71,   67,   77,

      117,  101,  118,   77,   71,  120,   57,   58,  119,   76,
       71,   58,   73,  121,   58,  110,  110,   71,   76,   77,
       76,   58,   77,   76,   58,   58,   77,  122,  126,   76,
       77,   58,  120,    0,   58,    0,   76,    0,   58,    0,
      121,   58,  110,  110,  128,   76,   77,   76,   58,    0,
       76,   58,   58,    0,  122,  126,   76,   78,   58,   59,
       78,   78,  123,   59,  109,  123,  116,   59,  116,  109,
      129,  128,  116,   59,  130,  109,   59,   78,  131,  116,
      124,  134,  109,   59,   78,  124,   59,   78,   78,  123,
       59,  109,  123,  116,   59,  116,  109,  129,    0,  116,

       59,  130,  109,   59,   78,  131,  116,  124,  134,  109,
       59,   60,  124,  127,  132,  133,  132,  133,   60,  135,
       60,  136,  137,  127,  138,   60,  139,  140,  127,  127,
       60,   60,    0,  142,  143,  144,    0,  145,   60,    0,
      127,  132,  133,  132,  133,   60,  135,   60,  136,  137,
      127,  138,   60,  139,  140,  127,  127,   60,   60,   61,
      142,  143,  144,   61,  145,  147,  146,  149,  148,   61,
      146,  150,   61,  148,  151,   61,  152,  153,  154,   61,
        0,    0,  151,  155,  156,  157,   61,  159,    0,    0,
       61,  160,  147,  146,  149,  148,   61,  146,  150,   61,

      148,  151,   61,  152,  153,  154,   61,   64,   64,  151,
      155,  156,  157,  158,  159,   64,   64,  161,  160,  162,
      163,   64,  164,  163,  158,  165,  166,   64,    0,  168,
      169,    0,    0,  262,   64,   64,    0,  264,  265,  268,
      158,  183,   64,   64,  161,  167,  162,  163,   64,  164,
      163,  158,  165,  166,   64,   69,  168,  169,  167,   69,
      262,  183,  184,  184,  264,  265,  268,    0,  183,   69,
        0,  190,  167,  269,    0,   69,   69,  185,    0,   69,
        0,    0,   69,  184,    0,  167,   69,    0,  183,  184,
      184,  190,  185,    0,  186,  270,   69,  185,  190,    0,

      269,  186,   69,   69,  185,  213,   69,   70,   70,  186,
      184,  189,  189,  272,  186,  188,   70,  188,  190,  185,
       70,  186,  270,   70,  185,  213,  189,   70,  186,  273,
        0,  189,  213,    0,   70,   70,  186,  188,  189,  189,
      272,  186,  188,   70,  188,  187,    0,   70,  187,  187,
       70,  194,  213,  189,   70,   74,  273,   74,  189,  274,
       74,  194,    0,    0,  188,  275,  276,   74,   74,  187,
        0,  194,  187,   74,  278,  187,  187,   74,  194,    0,
        0,  279,   74,  191,   74,    0,  274,   74,  194,  271,
      191,  271,  275,  276,   74,   74,  187,  191,  194,  280,

       74,  278,    0,  191,   74,   75,   75,  192,  279,   75,
      191,  192,   75,   75,  282,    0,  271,  191,  271,   75,
        0,    0,   75,    0,  191,  195,  280,  283,  193,   75,
      191,  192,   75,   75,  192,  193,   75,  193,  192,   75,
       75,  282,  195,    0,  284,  195,   75,  198,  193,   75,
      196,  285,  195,    0,  283,  193,   75,    0,  192,    0,
      198,  198,  193,  199,  193,  196,  201,  198,  286,  195,
      196,  284,  195,  287,  198,  193,    0,  196,  285,  199,
      201,  200,    0,  199,  202,  202,  201,  198,  198,    0,
      199,  200,  196,  201,  198,  286,  289,  196,  197,  290,

      287,  200,  197,  197,  218,  202,  199,  201,  200,  197,
      199,  202,  202,  201,  205,  203,  197,  203,  200,    0,
        0,  205,  197,  289,  218,  197,  290,  206,  200,  197,
      197,  218,  202,  204,  205,  204,  197,  203,    0,  204,
      206,  205,  203,  197,  203,  208,  204,  206,  205,  197,
        0,  218,  208,    0,  206,  204,    0,  229,  207,    0,
      204,  205,  204,    0,  203,  208,  204,  206,  207,  211,
      209,  210,  208,  204,  206,  291,  292,  229,  207,  208,
      209,  210,  204,  211,  229,  207,  211,    0,    0,  211,
      209,  210,  208,    0,    0,  207,  211,  209,  210,    0,

      212,  214,  291,  292,  229,  207,  216,  209,  210,  212,
      211,  222,  214,  211,  212,  216,  211,  209,  210,  293,
      212,  214,    0,    0,  222,  217,  216,  212,  214,  217,
        0,  222,    0,  216,  219,  219,  212,    0,  222,  214,
      294,  212,  216,    0,  296,  217,  293,  212,  214,  215,
      215,  222,  217,  216,  219,  237,  217,  237,  222,  215,
      220,  219,  219,  224,  215,  215,  220,  294,  220,    0,
      215,  296,  217,    0,    0,  237,  215,  215,  224,  223,
      220,  219,  237,  224,  237,    0,  215,  220,  223,  225,
      224,  215,  215,  220,  221,  220,  221,  215,  221,  223,

      228,  228,  237,    0,  225,  224,  223,  220,    0,  225,
      224,    0,  226,  227,  297,  223,  225,  227,  221,  226,
      228,  221,  232,  221,    0,  221,  223,  228,  228,  230,
      230,  225,  226,  231,  233,  232,  225,  227,  233,  226,
      227,  297,  232,  298,  227,  221,  226,  228,  231,  232,
      230,  234,  299,  231,    0,  234,  230,  230,  233,  226,
      231,  233,  232,  235,  227,  233,    0,  235,  300,  232,
      298,  234,  236,  238,    0,  231,  238,  230,  234,  299,
      231,  236,  234,  235,  301,  233,  236,  240,    0,  239,
      235,    0,  236,  238,  235,  300,  239,  240,  234,  236,

      238,  242,  241,  238,  239,  242,  302,  240,  236,  239,
      235,  301,    0,  236,  240,  241,  239,  247,  243,  236,
      238,    0,  241,  239,  240,  242,  243,  244,  242,  241,
      244,  239,  242,  302,  240,    0,  239,  247,  243,  245,
      248,  281,  241,  246,  247,  243,  245,  303,  248,  241,
      244,  246,  242,  243,  244,  304,  281,  244,    0,  245,
      248,  249,  246,  246,  247,  243,  245,  248,  281,    0,
      246,    0,  249,  245,  303,  248,  250,  244,  246,  252,
      252,  249,  304,  281,    0,  256,  245,  248,  249,  246,
      246,  251,  250,  253,  254,  251,  250,  253,  251,  249,

      252,  254,    0,  250,  305,  256,  252,  252,  249,    0,
      306,  251,  256,  253,  254,  257,  255,  307,  251,  250,
      253,  254,  251,  250,  253,  251,  309,  252,  254,  255,
      257,  305,  256,  310,  312,  257,  255,  306,  251,  308,
      253,  254,  257,  255,  307,  313,  314,  315,  316,  308,
      317,  318,  319,  309,  321,  322,  255,  257,  323,  324,
      310,  312,  257,  255,  325,  326,  308,  327,  328,  329,
      330,  331,  313,  314,  315,  316,  308,  317,  318,  319,
      332,  321,  322,  333,  326,  323,  324,  334,  335,  337,
      338,  325,  326,  339,  327,  328,  329,  330,  331,  341,

      343,  344,  345,  346,  348,  350,  349,  332,  349,  351,
      333,  326,  352,  353,  334,  335,  337,  338,  354,  355,
      339,  356,  357,  360,  361,  356,  341,  343,  344,  345,
      346,  348,  350,  349,  362,  349,  351,  363,  365,  352,
      353,    0,  366,  360,  361,  354,  355,    0,  356,  357,
      360,  361,  356,  364,  362,  457,  367,  363,  365,  368,
      364,  362,  366,  458,  363,  365,  367,    0,  369,  366,
      360,  361,  370,  364,  370,  369,  367,  368,  371,  368,
      364,  362,  457,  367,  363,  365,  368,  364,  369,  366,
      458,  371,  372,  367,  370,  369,  373,    0,  371,  370,

      364,  370,  369,  367,  368,  371,  368,  376,  372,  374,
      375,  373,  372,  374,    0,  369,  373,    0,  371,  372,
        0,  370,  377,  373,  375,  371,  459,  376,  379,  460,
      375,  461,  379,  374,  376,  372,  374,  375,  373,  372,
      374,  378,  377,  373,  381,  382,  381,  380,  378,  377,
        0,  375,  379,  459,  376,  379,  460,  375,  461,  379,
      374,  378,  380,  383,  386,  382,  381,  380,  378,  377,
        0,  381,  382,  381,  380,  378,  385,  384,  383,  379,
      384,  387,  388,  383,  386,    0,  388,  385,  378,  380,
      383,  386,  382,  381,  380,  389,  385,  390,  391,  390,

      384,  387,    0,  385,  384,  383,  388,  384,  387,  388,
      383,  386,  391,  388,  385,  389,  463,  393,  391,  390,
      394,  466,  389,  385,  390,  391,  390,  384,  387,  392,
      395,  404,  397,  388,  396,  397,  392,  393,  395,  391,
      394,  396,  389,  463,  393,  391,  390,  394,  466,  392,
      395,  404,  467,  398,  396,  397,  392,  395,  404,  397,
        0,  396,  397,  392,  393,  395,  400,  394,  396,  398,
      400,  399,  401,  398,  399,  402,  392,  395,  404,  467,
      398,  396,  397,  405,  403,  406,  400,  401,    0,    0,
      402,  399,  401,  400,  403,  402,  398,  400,  399,  401,

      398,  399,  402,  405,  403,  406,  407,  408,    0,  410,
      405,  403,  406,  400,  401,  409,  407,  402,  399,  401,
      468,  403,  402,  408,  409,  411,  407,  408,  412,  410,
      405,  403,  406,  407,  408,  409,  410,  413,  414,  414,
      411,  413,  409,  407,    0,  411,    0,  468,  412,  469,
      408,  409,  411,  407,  408,  412,  410,  413,  416,  414,
      416,  417,  409,  418,  413,  414,  414,  411,  413,  415,
        0,  419,  411,  415,  471,  412,  469,  417,  416,  418,
        0,  417,  420,  418,  413,  416,  414,  416,  417,  420,
      418,  419,  423,  415,  421,  424,  415,  422,  419,    0,

      415,  471,  420,    0,  417,  416,  418,  421,  417,  420,
      418,  422,  423,    0,  421,  424,  420,  422,  419,  423,
      415,  421,  424,    0,  422,    0,  425,  426,    0,  420,
      425,  429,  427,    0,  421,  433,  426,    0,  422,  423,
      428,  421,  424,  427,  422,  425,  429,  426,  428,  431,
      425,  429,  427,  425,  426,  433,    0,  425,  429,  427,
      428,  430,  433,  426,  431,  430,  434,  428,    0,  431,
      427,  472,  425,  429,  426,  428,  431,  425,  429,  427,
      432,  435,  433,  432,  436,  430,  434,  428,  430,    0,
        0,  431,  430,  434,  437,  439,  431,  441,  472,  440,

      432,  435,  436,  438,  436,  442,  440,  432,  435,  437,
      432,  436,  430,  434,  437,  439,  442,  441,  438,  440,
      443,  437,  439,  438,  441,  442,  440,  432,  435,  436,
      438,  436,  442,  440,  445,  443,  437,  446,    0,  444,
      443,  437,  439,  442,  441,  438,  440,  443,  444,  447,
      438,    0,  442,  448,  445,    0,    0,  446,  447,  444,
      473,  445,  443,  448,  446,  448,  444,  443,  449,  447,
      450,  474,    0,  448,  450,  444,  447,    0,  449,  476,
      448,  445,  451,  452,  446,  447,  444,  473,  449,  477,
      448,  451,  448,  453,  450,  449,  447,  450,  474,  452,

      448,  450,  451,  452,  454,  449,  476,    0,  478,  451,
      452,  453,  481,  453,  455,  449,  477,  482,  451,  454,
      453,  450,  456,  455,  454,  456,  452,  455,  483,  451,
      452,  454,  484,  485,  455,  478,  489,  490,  453,  481,
      453,  455,  456,  492,  482,  494,  454,  495,  496,  456,
      455,  454,  456,  497,  455,  483,  498,  499,  501,  484,
      485,  455,  505,  489,  490,  507,  508,  509,  499,  456,
      492,  510,  494,  512,  495,  496,  513,  514,  515,  516,
      497,  519,  520,  498,  499,  501,  522,  523,  524,  505,
      525,  526,  507,  508,  509,  499,  528,  529,  510,  530,

      512,  531,  534,  513,  514,  515,  516,  535,  519,  520,
      536,  537,  538,  522,  523,  524,  539,  525,  526,  540,
      541,  543,  545,  528,  529,    0,  530,    0,  531,  534,
      549,  547,  548,    0,  535,  551,  552,  536,  537,  538,
      550,  639,  640,  539,  547,  548,  540,  541,  543,  545,
      549,  547,  548,  550,  554,  551,  552,  549,  547,  548,
      550,  553,  551,  552,  555,  553,  641,  550,  639,  640,
      642,  547,  548,    0,  554,  558,  557,  549,  547,  548,
      550,  554,  551,  552,  555,  553,  556,  550,  553,  557,
      558,  555,  553,  641,  556,  558,  557,  642,  560,    0,

      559,  554,  558,  557,  563,  564,  556,    0,  561,  564,
      562,  555,  553,  556,  559,  561,  557,  558,  560,  563,
      559,  556,  558,  557,  563,  560,  562,  559,  561,  564,
      562,  563,  564,  556,  565,  561,  564,  562,  566,  567,
      566,  559,  561,  567,  569,  560,  563,  559,  570,  643,
        0,  563,  571,  562,  565,  561,  564,  562,  573,  567,
      566,  565,  568,  571,  569,  566,  567,  566,  570,  568,
      567,  569,  571,  572,  573,  570,  643,  574,  573,  571,
        0,  565,  568,  576,  572,  573,  567,  566,  577,  568,
      571,  569,  574,  572,  575,  570,  568,  574,  575,  571,

      572,  573,  578,  576,  574,  573,  580,  581,  577,  568,
      576,  572,  579,  644,  645,  577,  579,  580,  575,  574,
      572,  575,  578,  647,  574,  575,  580,  581,  582,  578,
      576,  583,  584,  580,  581,  577,  579,  582,    0,  579,
      644,  645,  584,  579,  580,  575,  586,  585,  582,  578,
      647,  583,  584,  580,  581,  582,    0,  587,  583,  584,
      585,    0,  590,  579,  582,  586,  586,  585,  588,  584,
      587,    0,    0,  586,  585,  582,    0,  587,  583,  584,
      592,  588,  590,  589,  587,  589,  593,  585,  588,  590,
        0,  591,  586,  586,  585,  588,  589,  587,  591,  594,

      592,  595,  596,  589,  587,    0,  593,  592,  588,  590,
      589,  591,  589,  593,  598,  588,  595,  597,  591,  594,
      601,  595,  596,  589,  597,  591,  594,  592,  595,  596,
      589,    0,  600,  593,  598,    0,  599,  597,  591,    0,
      601,  598,  603,  595,  597,  600,  594,  601,  595,  596,
      599,  597,  600,  602,    0,  602,  599,  648,  604,  600,
        0,  598,  603,  599,  597,    0,  606,  601,  605,  603,
      607,  604,  600,    0,  606,  602,  608,  599,  604,  600,
      602,  605,  602,  599,  648,  604,  606,  609,  605,  603,
      607,  609,  611,  606,    0,  605,  608,  607,  604,    0,

      610,  606,  602,  608,  610,  604,  614,    0,  605,  613,
      649,  609,  611,  606,  609,  605,    0,  607,  609,  611,
      612,  614,  613,  608,  610,    0,  614,  610,  612,  613,
      616,  610,  616,  614,  615,    0,  613,  649,  609,  611,
      612,    0,  615,  617,  618,  620,  619,  612,  614,  613,
      619,  610,  616,  614,  615,  612,  613,  616,  621,  616,
      622,  615,  623,  617,  618,  620,  619,  612,  621,  615,
      617,  618,  620,  619,  624,    0,    0,  619,  621,  616,
      622,  615,  623,  631,  625,  621,  625,  622,  624,  623,
      617,  618,  620,  619,  624,  621,  627,    0,  628,  626,

      651,  624,  628,  631,  632,  621,  625,  622,  626,  623,
      631,  625,  627,  625,  652,  624,  627,  629,  630,  626,
      630,  624,  628,  627,  632,  628,  626,  651,  634,  628,
      631,  632,  629,  625,  633,  626,  635,  629,  630,  627,
      636,  652,  653,  627,  629,  630,  626,  630,  634,  628,
      633,  632,  654,  655,  633,  634,  635,  656,  657,  629,
      636,  633,  658,  635,  629,  630,  659,  636,  661,  653,
      662,  663,  666,  667,  668,  634,  669,  633,  674,  654,
      655,  633,  675,  635,  656,  657,  676,  636,  679,  658,
      680,  681,  682,  659,  683,  661,  685,  662,  663,  666,

      667,  668,  686,  669,  687,  674,  688,  689,  690,  675,
      691,  692,  694,  676,  695,  679,  696,  680,  681,  682,
      698,  683,  699,  685,  701,  702,  704,    0,  705,  686,
        0,  687,    0,  688,  689,  690,  703,  691,  692,  694,
      765,  695,    0,  696,  701,  702,  704,  698,  705,  699,
      709,  701,  702,  704,  708,  705,  703,  703,  706,  706,
      707,    0,  710,  703,  708,    0,    0,  765,  711,  707,
      709,  701,  702,  704,  708,  705,    0,  709,  711,  706,
      707,  708,  710,  703,  703,  706,  706,  707,  711,  710,
      713,  708,  712,  714,  717,  711,  707,  709,  767,  712,

        0,  708,  716,  715,  718,  711,  706,  707,  768,  710,
      713,  716,  712,  714,  717,  711,    0,  713,  715,  712,
      714,  717,  716,  715,  718,  767,  712,  719,  720,  716,
      715,  718,  721,    0,    0,  768,    0,  713,  716,  712,
      714,  717,  719,  720,  769,  715,  721,  719,  720,  716,
      715,  718,  721,    0,  719,  720,  722,  723,  724,  721,
      722,  725,  770,  725,  723,    0,    0,    0,    0,  719,
      720,  769,  728,  721,  719,  720,  722,  723,  724,  721,
      726,  725,  727,  722,  723,  724,  729,  722,  725,  770,
      725,  723,  728,  726,  731,  730,    0,  727,  732,  728,

      726,    0,  727,  722,  723,  724,  729,  726,  725,  727,
      730,  734,  732,  729,  731,  730,  733,    0,  732,  728,
      726,  731,  730,  733,  727,  732,  735,  726,  736,  727,
      738,  734,  737,  729,  738,    0,  733,  730,  734,  732,
      741,  731,  730,  733,  739,  732,  735,  739,  736,  742,
      733,  772,  737,  735,  738,  736,    0,  738,  734,  737,
      741,  738,  740,  733,  739,  743,    0,  741,  746,  742,
      744,  739,    0,  735,  739,  736,  742,  740,  772,  737,
      745,  738,  740,  744,  773,  743,  748,  741,  746,  740,
      744,  739,  743,  745,  747,  746,  742,  744,  747,  749,

      745,  751,  751,  749,  740,  776,  748,  745,    0,  740,
      744,  773,  743,  748,  747,  746,  750,  744,  780,  782,
      745,  747,  751,  749,  753,  747,  749,  745,  751,  751,
      749,  750,  776,  748,  754,  752,  750,  755,  753,  752,
      785,  747,    0,  750,  753,  780,  782,  754,  757,  751,
      749,  753,  755,    0,  754,  788,  756,  755,  750,  752,
      756,  754,  752,  750,  755,  753,  752,  785,  757,  758,
      760,  753,  759,  759,  754,  757,  789,  791,  761,  755,
      756,  754,  788,  756,  755,  792,  752,  756,  762,  758,
      760,  764,  794,  759,  795,  757,  758,  760,  761,  759,

      759,  796,  762,  789,  791,  761,  763,  756,  762,  798,
      763,  764,  792,  799,  802,  762,  758,  760,  764,  794,
      759,  795,  804,  805,  806,  761,  811,  812,  796,  762,
      763,    0,  813,  763,    0,  762,  798,  763,  764,    0,
      799,  802,  815,  864,  816,  818,  814,  812,    0,  804,
      805,  806,  813,  811,  812,  814,  817,  763,  816,  813,
        0,  821,  815,  817,  816,  818,  814,  822,    0,  815,
      864,  816,  818,  814,  812,  819,  817,  819,  824,  813,
      820,  821,  814,  817,  823,  816,  823,  822,  821,  815,
      817,  816,  818,  814,  822,  820,  825,  819,  824,  826,

      820,  827,  819,  817,  819,  824,  823,  820,  821,  828,
        0,  823,    0,  823,  822,  830,  825,  831,  832,  826,
      833,  827,  820,  825,  819,  824,  826,  820,  827,  828,
      829,  834,  836,  823,    0,  830,  828,  831,  832,  829,
      833,  835,  830,  825,  831,  832,  826,  833,  827,  837,
      829,  834,  836,  838,  835,  840,  828,  829,  834,  836,
      838,  835,  830,  842,  831,  832,  829,  833,  835,  837,
      839,  841,  843,  838,  839,  840,  837,  829,  834,  836,
      838,  835,  840,  842,  844,  847,  841,  838,  835,  846,
      842,  841,  843,  845,  839,  845,  837,  839,  841,  843,

      838,  839,  840,  846,  844,  847,  848,  849,  850,  846,
      842,  844,  847,  841,  849,  845,  846,    0,  841,  843,
      845,  839,  845,  866,  871,  851,  848,  849,  850,  851,
      846,  844,  847,  848,  849,  850,  846,    0,  854,  852,
      855,  849,  845,  852,  853,  873,  874,  877,  856,  851,
      866,  871,  851,  848,  849,  850,  851,  857,  854,  853,
      855,  880,  858,  852,  853,  854,  852,  855,  856,  858,
      852,  853,  873,  874,  877,  856,  851,  857,  881,  882,
      884,  885,  858,  886,  857,  854,  853,  855,  880,  858,
      852,  853,  887,  888,  889,  856,  858,  890,  889,    0,

      884,  885,  892,  886,  857,  881,  882,  884,  885,  858,
      886,  891,  887,  888,  893,  894,  895,  890,  889,  887,
      888,  889,  892,    0,  890,  889,  891,  884,  885,  892,
      886,  891,  897,  909,  893,  894,  895,  898,  891,  887,
      888,  893,  894,  895,  890,  889,  896,  899,  896,  892,
      898,  900,  897,  891,  911,    0,  901,  898,  891,  897,
      909,  893,  894,  895,  898,  902,  903,  899,  896,  904,
      913,  900,    0,  896,  899,  896,  901,  898,  900,  897,
      902,  911,  906,  901,  898,  902,  903,  915,  905,  904,
      906,  907,  902,  903,  899,  896,  904,  913,  900,  908,

      916,  905,  906,  901,  919,  918,  927,  902,  905,  906,
      921,  907,  902,  903,  915,  905,  904,  906,  907,  908,
      918,  920,  923,  924,  919,  918,  908,  916,  905,  906,
      921,  919,  918,  927,  925,  905,  920,  921,  907,  926,
      922,  920,  923,  924,  929,  925,  908,  918,  920,  923,
      924,  919,  918,  922,  925,  932,  933,  921,    0,  926,
      922,  925,    0,  920,  934,  935,  926,  922,  920,  923,
      924,  929,  925,  936,  939,  932,  933,  940,  934,    0,
      922,  925,  932,  933,  934,  935,  926,  922,    0,    0,
        0,  934,  935,  936,  939,    0,    0,  940,    0,    0,

      936,  939,  932,  933,  940,  934,    0,    0,    0,    0,
        0,  934,  935,    0,    0,    0,    0,    0,    0,    0,
      936,  939,    0,    0,  940,  942,  942,  942,  942,  943,
        0,    0,  943,  944,    0,  944,  944,  946,    0,  946,
      946,  947,    0,  947,  947,  948,    0,  948,  948,  949,
        0,  949,  949,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941,  941,  941,  941,  941,  941,  941,  941,  941,  941,
      941
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */


/***************************
 ** Section 3: Rules
 ***************************/
#line 1625 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define C_COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 52 "flex_lexer.l"


#line 1874 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 942 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 941 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 56 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
{ BEGIN(C_COMMENT); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
{ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
{ }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 132:
#line 192 "flex_lexer.l"
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2669 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(C_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 942 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 942 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 941);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 222 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
