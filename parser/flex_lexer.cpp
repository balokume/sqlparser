#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 133
#define YY_END_OF_BUFFER 134
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[920] =
    {   0,
        0,    0,    2,    2,  134,  132,    4,    4,  132,  125,
      132,  125,  125,  128,  125,  125,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    4,    0,    0,  131,    1,  127,  126,
      128,  123,  122,  124,  130,  130,  130,  130,  130,  113,
      130,  114,  130,  130,  130,  130,  130,  130,  130,  130,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  115,  130,  116,  117,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  118,
      119,  120,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  121,  130,
      130,  130,  130,  130,  130,  130,  130,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  129,  126,   99,  130,  100,  130,  130,  101,
      102,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      103,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  104,  130,  130,  130,  130,  130,  130,  105,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  106,  130,  130,  107,  130,  130,  130,  130,  130,

      130,  130,  130,  108,  130,  130,  109,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  110,  130,
      130,  130,  130,  111,  130,  130,  130,  130,  112,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  130,  130,  130,  130,
      130,   72,  130,   73,   93,  130,  130,  130,  130,   74,
      130,  130,  130,  130,   75,  130,  130,  130,   76,   77,
      130,  130,  130,  130,  130,   78,   79,   80,  130,  130,
       81,  130,   82,  130,  130,  130,  130,  130,  130,   83,
      130,   84,   85,   86,  130,   87,  130,  130,  130,  130,
       88,  130,  130,  130,  130,  130,   89,   90,  130,  130,

      130,  130,  130,  130,  130,   91,  130,  130,  130,  130,
       92,   94,   95,  130,  130,  130,  130,  130,  130,  130,
       96,  130,   97,  130,   98,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   54,   55,  130,  130,  130,  130,
      130,  130,  130,   56,  130,  130,  130,   57,  130,  130,
      130,  130,  130,  130,  130,  130,  130,   58,  130,  130,
      130,   59,   60,  130,  130,  130,  130,   61,   62,   63,
       64,  130,  130,  130,   65,   66,  130,  130,  130,  130,
      130,   67,  130,  130,  130,  130,   68,  130,  130,  130,
       69,  130,  130,  130,   70,  130,  130,   71,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  130,   30,  130,  130,   31,  130,   32,  130,
      130,   33,   34,  130,   35,   36,   37,  130,   38,  130,
       39,   40,  130,   41,   42,  130,  130,   43,  130,  130,
       44,  130,  130,  130,   45,  130,   46,   47,   48,  130,
       49,  130,  130,  130,   50,   51,   52,   53,  130,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   14,   15,   16,   17,
       18,  130,   19,  130,   20,   21,   22,   23,  130,   24,
      130,  130,   25,   26,  130,   27,   28,  130,  130,  130,
       29,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  130,   10,  130,   11,
      130,   12,  130,  130,   13,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  130,    7,  130,    8,    9,    2,
        2,    2,    2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[927] =
    {   0,
        0,    0,   65,    0,  355, 3675,  129,  131,    0, 3675,
      348,  344,  341,  127,  126,  338,  123,  123,  175,  221,
      119,  132,  118,  131,  165,  119,  134,  176,  177,  213,
      219,  226,    0,  183,  269,  312,  232,  188,  137,    0,
      161,  205,  344,    0,  340,  336,  303,  203,  202,  295,
      369,  427,  479,  531,  579,  627,  264,  297,  675,  303,
      218,  361,  382,  727,  775,  827,  263,  419,  877,  929,
      977,  436,  431,  241,  301,  287, 3675, 3675,  282,  250,
      262, 3675, 3675, 3675,    0,  225,  260,  285,  322,  280,
      365,    0,  360,  291,  370,  428,  329,  354,  480,  412,

      356,  420,  419,  438,  443,  473,  435,  430,  435,  473,
      475,  476,  474,  481,    0,  485,  531,  488,  497,  485,
      509,  528,  551,  512,  520,  518,  523,  532,  546,  542,
        0,  549,  535,  540,  559,  581,  575,  562,  580,  580,
      580,  579,  598,  599,  590,  599,  601,  594,  592,  589,
      629,  636,  634,  632,  642,  641,  629,    0,  296,  253,
      248,    0,    0,  210,  207,  294,    0,    0,    0,  652,
      678,  673,  694,  733,  692,  762,  718,  772,  746,  778,
      816,  821,  817, 1029,  842,  781,  866,  831,  891,  881,
     1079,  916,  921,  900,  951,  935,  973,  967,  992,  975,

     1021, 1128, 1017, 1027, 1035, 1045, 1061, 1089, 1071, 1066,
     1105, 1119, 1124, 1133, 1162, 1103, 1168, 1157, 1165, 1183,
     1187, 1202, 1217, 1193, 1221, 1225, 1247, 1231, 1253, 1259,
     1276, 1261, 1282, 1299, 1285, 1314, 1316, 1320, 1349, 1339,
     1330, 1338, 3675,  190,    0,  653,    0,  659,  674,    0,
        0,  687,  689,  706, 1335,  717,  715,  752,  787,  816,
        0,  833,  839,  875, 1080,  887,  892,  880,  933,  969,
      989,    0, 1000, 1051, 1151, 1145, 1166, 1174,    0, 1173,
     1190, 1245, 1240, 1262, 1266, 1256, 1289, 1317, 1344, 1355,
     1364, 1368, 1354, 1363,    0, 1358, 1374, 1371, 1382, 1388,

     1385, 1372, 1373,    0, 1383, 1379, 1379, 1394, 1398, 1407,
     1395, 1395, 1399, 1413, 1395, 1409, 1413, 1418,    0, 1405,
     1409, 1411, 1420,    0, 1417, 1414, 1423, 1435,    0, 1429,
     1431, 1432, 1448, 1437, 1431, 1430, 1437, 1448, 1455,    0,
      152, 1460, 1463, 1466, 1472, 1482, 1476, 1477, 1481, 1494,
     1515, 1500, 1517, 1532, 1511, 1540, 1551, 1534, 1546, 1569,
     1574, 1568, 1582, 1584, 1585, 1617, 1608, 1586, 1618, 1630,
     1620, 1636, 1648, 1651, 1622, 1639, 1652, 1673, 1684, 1674,
     1702, 1692, 1710, 1713, 1714, 1715, 1716, 1718, 1744, 1750,
     1747, 1726, 1769, 1748, 1772, 1759, 1782, 1788, 1798, 1804,

     1780, 1823, 1813, 1822, 1801, 1812, 1856, 1846, 1854, 1864,
     1889, 1875, 1877, 1867, 1886, 1888, 1900, 1910, 1919, 1921,
     1923, 1929, 1938, 1942, 1944, 1954, 1963, 1982, 1977, 1988,
     1986, 1996, 2000, 2017, 2040, 2028, 1465, 1493, 1525, 1537,
     1643,    0, 1680,    0,    0, 1674, 1797, 1819, 1864,    0,
     1925, 1982, 1988, 2011,    0, 2038, 2034, 2034,    0,    0,
     2031, 2035, 2034, 2036, 2056,    0,    0,    0, 2058, 2045,
        0, 2048,    0, 2051, 2049, 2047, 2057, 2058, 2072,    0,
     2065,    0,    0,    0, 2067,    0, 2079, 2090, 2077, 2079,
        0, 2096, 2095, 2083, 2087, 2094,    0,    0, 2107, 2108,

     2097, 2093, 2092, 2100, 2112,    0, 2111, 2110, 2115, 2106,
        0,    0, 2106, 2126, 2116, 2110, 2132, 2121, 2137, 2140,
        0, 2128,    0, 2145,    0, 2148, 2149, 2150, 2160, 2154,
     2158, 2183, 2164, 2182, 2204, 2208, 2198, 2222, 2199, 2227,
     2217, 2223, 2256, 2253, 2268, 2258, 2277, 2267, 2271, 2281,
     2296, 2286, 2310, 2321, 2312, 2320, 2322, 2331, 2335, 2336,
     2361, 2345, 2364, 2366, 2375, 2376, 2385, 2407, 2390, 2419,
     2404, 2415, 2418, 2428, 2429, 2452, 2430, 2444, 2460, 2441,
     2469, 2463, 2482, 2484, 2493, 2478, 2492, 2518, 2527, 2526,
     2517, 2536, 2535, 2560, 2532, 2548, 2572, 2566, 2571, 2569,

     2577, 2600, 2590, 2602, 2605, 2630, 2631, 2634, 2635, 2639,
     2640, 2644, 2645, 2668,    0,    0, 2138, 2165, 2193, 2215,
     2223, 2262, 2282,    0, 2316, 2343, 2360,    0, 2466, 2497,
     2515, 2567, 2586, 2591, 2628, 2639, 2667,    0, 2673, 2663,
     2664,    0,    0, 2665, 2684, 2671, 2682,    0,    0,    0,
        0, 2694, 2690, 2679,    0,    0, 2696, 2684, 2685, 2699,
     2696,    0, 2708, 2690, 2709, 2713, 2696, 2700, 2699, 2722,
        0, 2719, 2723, 2728,    0, 2715, 2734,    0, 2733, 2734,
     2738, 2742, 2743, 2748, 2764, 2767, 2751, 2752, 2782, 2776,
     2788, 2793, 2797, 2807, 2801, 2805, 2818, 2822, 2836, 2826,

     2851, 2841, 2870, 2862, 2859, 2867, 2876, 2880, 2884, 2905,
     2908, 2893, 2910, 2916, 2918, 2933, 2921, 2934, 2939, 2944,
     2947, 2962, 2970, 2958, 2973, 2972, 2988, 2998, 2996, 3007,
     3012, 3001, 3029, 3037, 3031, 3042, 3047, 3050, 3052, 3061,
     3086, 3063, 2739,    0, 2970, 3038, 3052, 3061,    0, 3082,
     3070,    0,    0, 3089,    0,    0,    0, 3091,    0, 3083,
        0,    0, 3076,    0,    0, 3085, 3100,    0, 3094, 3107,
        0, 3089, 3105, 3091,    0, 3117, 3102,    0,    0, 3110,
        0, 3124, 3125, 3107,    0,    0,    0,    0, 3117, 3126,
     3134, 3136, 3135, 3150, 3158, 3139, 3169, 3160, 3168, 3179,

     3200, 3184, 3190, 3201, 3203, 3209, 3213, 3212, 3214, 3218,
     3224, 3235, 3253, 3243, 3252, 3257, 3258, 3267, 3268, 3269,
     3286, 3292, 3303, 3297, 3298, 3302, 3320, 3321, 3335, 3336,
     3337, 3326, 3351, 3360, 3361, 3365,    0,    0,    0,    0,
        0, 3223,    0, 3292,    0,    0,    0,    0, 3344,    0,
     3330, 3366,    0,    0, 3359,    0,    0, 3362, 3368, 3377,
        0, 3386, 3389, 3390, 3391, 3394, 3400, 3395, 3419, 3405,
     3424, 3428, 3429, 3445, 3430, 3440, 3454, 3458, 3459, 3468,
     3462, 3464, 3494, 3496, 3473, 3497, 3448,    0, 3483,    0,
     3486,    0, 3482, 3492,    0, 3512, 3508, 3518, 3522, 3537,

     3536, 3546, 3547, 3548, 3513,    0, 3537,    0,    0, 3552,
     3561, 3562, 3570, 3571,    0,    0, 3580, 3586, 3675, 3650,
     3654,  152, 3658, 3662, 3666, 3670
    } ;

static yyconst flex_int16_t yy_def[927] =
    {   0,
      919,    1,  919,    3,  919,  919,  919,  919,  920,  919,
      921,  919,  919,  919,  919,  919,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  923,
      923,  919,  924,  923,  925,  923,  923,  923,  923,  923,
      926,  926,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,  919,  920,  921,  919,  919,  919,  919,
      919,  919,  919,  919,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,

      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  923,  923,  924,
      925,  923,  923,  923,  923,  923,  923,  923,  923,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  919,  919,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,

      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  923,
      923,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,

      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
      922,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  922,  922,  922,  922,
      922,  922,  922,  922,  922,   52,   52,   52,   52,   52,

       52,   52,   52,   52,  922,  922,  922,  922,  922,   52,
       52,   52,   52,   52,  922,  922,   52,   52,    0,  919,
      919,  919,  919,  919,  919,  919
    } ;

static yyconst flex_int16_t yy_nxt[3741] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   33,   33,   33,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   33,   33,   33,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   44,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,

       67,   67,   67,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   67,   67,   67,
       74,   74,   74,   74,   80,   81,   82,   83,   86,   91,
       87,  111,  103,  113,  104,  119,   88,  112,   89,  105,
      120,  114,  107,   90,  106,   85,  156,  157,  108,   92,
      341,  109,  159,   74,  110,   86,   91,   87,  111,  103,
      113,  104,  119,   88,  112,   89,  105,  120,  114,  107,
       90,  106,  115,  156,  157,  108,   92,   93,  109,  116,
      117,  110,  121,  124,   94,  118,  122,  125,  244,  137,

      154,   95,  123,  138,   96,   97,   74,   74,  155,  115,
      165,  166,  167,  168,   93,  341,  116,  117,  164,  121,
      124,   94,  118,  122,  125,  126,  137,  154,   95,  123,
      138,   96,   97,   98,  205,  155,  130,   99,  134,  127,
      245,  100,   74,   74,  131,  128,  129,  101,  132,  135,
      102,  133,  126,  162,  170,  136,  340,  151,  244,  152,
       98,  205,  153,  130,   99,  134,  127,  245,  100,   80,
       81,  131,  128,  129,  101,  132,  135,  102,  133,  170,
      170,  170,  136,  139,  151,  140,  152,  196,  141,  153,
       79,  246,   77,  197,  251,  142,  143,  159,   74,  170,

      170,  165,  166,  256,  243,  169,  170,  170,  247,  198,
      139,  164,  140,  170,  196,  141,  248,  199,  246,  170,
      197,  251,  142,  143,  144,  145,  170,  170,  146,  204,
      256,  147,  148,  170,  249,  247,  198,  250,  149,  170,
      170,  150,  163,  248,  199,  162,  170,  158,   84,   79,
       78,  144,  145,   77,  919,  146,  204,  919,  147,  148,
      170,  249,  261,  919,  250,  149,  170,  919,  150,  158,
      158,  919,  158,  158,  158,  158,  158,  206,  158,  158,
      158,  207,  252,  254,  171,  262,  172,  208,  269,  261,
      255,  919,  173,  257,  174,  258,  253,  170,  209,  175,

      919,  919,  210,  919,  206,  919,  919,  919,  207,  252,
      254,  171,  262,  172,  208,  269,  919,  255,  170,  173,
      257,  174,  258,  253,  170,  209,  175,  158,  158,  210,
      158,  158,  158,  158,  158,  222,  158,  158,  158,  223,
      919,  267,  268,  176,  259,  170,  270,  170,  239,  271,
      241,  242,  170,  272,  260,  170,  240,  273,  278,  279,
      919,  280,  222,  177,  919,  919,  223,  170,  267,  268,
      176,  259,  170,  270,  170,  239,  271,  241,  242,  170,
      272,  260,  170,  240,  273,  278,  279,  274,  280,  275,
      177,  178,  263,  276,  170,  170,  281,  264,  179,  170,

      277,  282,  283,  265,  284,  180,  286,  285,  181,  182,
      266,  287,  288,  293,  274,  170,  275,  294,  178,  263,
      276,  295,  170,  281,  264,  179,  296,  277,  282,  283,
      265,  284,  180,  286,  285,  181,  182,  266,  287,  288,
      293,  301,  170,  183,  294,  302,  289,  184,  295,  303,
      297,  185,  298,  296,  304,  305,  290,  186,  306,  307,
      187,  291,  292,  299,  308,  300,  309,  170,  301,  310,
      183,  311,  302,  289,  184,  919,  303,  297,  185,  298,
      316,  304,  305,  290,  186,  306,  307,  187,  291,  292,
      299,  308,  300,  309,  170,  170,  310,  312,  311,  317,

      314,  313,  188,  318,  189,  315,  320,  316,  321,  190,
      322,  319,  323,  324,  191,  170,  919,  327,  328,  329,
      919,  330,  170,  325,  312,  919,  317,  314,  313,  188,
      318,  189,  315,  320,  326,  321,  190,  322,  319,  323,
      324,  191,  170,  170,  327,  328,  329,  192,  330,  331,
      325,  333,  332,  193,  334,  335,  194,  338,  336,  195,
      339,  326,  919,  170,  919,  919,  919,  919,  170,  437,
      170,  337,  919,  919,  192,  438,  331,  919,  333,  332,
      193,  334,  335,  194,  338,  336,  195,  339,  170,  170,
      170,  170,  200,  342,  170,  170,  437,  439,  337,  201,

      202,  919,  438,  919,  343,  203,  348,  919,  170,  170,
      170,  170,  919,  440,  170,  170,  170,  344,  170,  200,
      342,  170,  919,  441,  439,  345,  201,  202,  170,  442,
      170,  343,  203,  348,  170,  170,  170,  170,  170,  211,
      440,  170,  919,  170,  344,  346,  445,  446,  347,  170,
      441,  919,  345,  212,  170,  170,  442,  170,  353,  213,
      214,  170,  170,  170,  919,  919,  211,  919,  919,  170,
      170,  919,  346,  445,  446,  347,  170,  919,  170,  349,
      212,  170,  170,  447,  919,  353,  213,  214,  170,  170,
      170,  170,  215,  350,  170,  351,  170,  170,  170,  448,

      216,  354,  352,  355,  217,  170,  349,  218,  170,  170,
      447,  170,  919,  366,  170,  170,  919,  170,  170,  215,
      350,  170,  351,  919,  170,  170,  448,  216,  354,  352,
      355,  217,  356,  170,  218,  170,  919,  170,  170,  219,
      366,  170,  357,  170,  170,  919,  449,  170,  359,  450,
      220,  919,  170,  170,  358,  919,  221,  170,  170,  356,
      170,  368,  451,  170,  170,  919,  219,  170,  919,  357,
      170,  364,  365,  449,  170,  359,  450,  220,  170,  170,
      170,  358,  170,  221,  170,  170,  919,  452,  368,  451,
      170,  224,  367,  225,  170,  370,  226,  170,  364,  365,

      919,  455,  170,  227,  228,  170,  369,  170,  456,  170,
      919,  457,  919,  170,  452,  919,  170,  170,  224,  367,
      225,  919,  370,  226,  170,  919,  377,  170,  455,  170,
      227,  228,  170,  369,  170,  456,  170,  170,  457,  375,
      170,  229,  230,  170,  170,  231,  458,  919,  232,  233,
      376,  170,  170,  377,  170,  234,  919,  170,  235,  170,
      919,  379,  919,  170,  170,  170,  375,  170,  229,  230,
      919,  170,  231,  458,  378,  232,  233,  376,  170,  170,
      919,  919,  234,  170,  170,  235,  919,  170,  379,  170,
      919,  170,  170,  170,  170,  919,  459,  381,  170,  380,

      382,  378,  236,  170,  237,  460,  919,  238,  170,  170,
      170,  170,  461,  170,  170,  919,  170,  383,  170,  919,
      170,  919,  384,  459,  381,  919,  380,  382,  170,  236,
      170,  237,  460,  170,  238,  170,  170,  170,  170,  461,
      170,  360,  390,  170,  383,  170,  361,  391,  385,  384,
      919,  170,  362,  170,  919,  170,  919,  170,  919,  363,
      170,  170,  393,  170,  170,  170,  919,  462,  360,  390,
      170,  392,  170,  361,  391,  385,  919,  170,  170,  362,
      170,  170,  170,  394,  170,  395,  363,  170,  170,  393,
      170,  399,  170,  371,  462,  372,  453,  170,  392,  373,

      398,  396,  170,  397,  170,  170,  374,  170,  170,  170,
      394,  454,  395,  919,  170,  170,  919,  919,  399,  170,
      371,  170,  372,  453,  170,  170,  373,  398,  396,  170,
      397,  919,  170,  374,  170,  170,  400,  919,  454,  170,
      170,  170,  170,  386,  170,  403,  170,  402,  170,  170,
      401,  919,  170,  387,  919,  170,  919,  919,  388,  389,
      170,  919,  170,  400,  170,  463,  170,  170,  170,  170,
      386,  170,  403,  170,  402,  464,  170,  401,  170,  404,
      387,  170,  170,  405,  170,  388,  389,  170,  406,  465,
      466,  170,  463,  170,  407,  408,  170,  467,  170,  170,

      170,  170,  464,  409,  170,  170,  404,  410,  170,  170,
      405,  170,  414,  468,  919,  406,  465,  466,  170,  170,
      170,  407,  408,  170,  467,  170,  170,  411,  170,  170,
      409,  170,  412,  170,  410,  413,  170,  170,  170,  414,
      468,  170,  919,  419,  415,  170,  170,  170,  919,  919,
      170,  417,  416,  170,  411,  919,  170,  170,  469,  412,
      170,  170,  413,  170,  170,  170,  420,  170,  170,  170,
      419,  415,  470,  919,  170,  170,  418,  424,  417,  416,
      170,  471,  421,  170,  170,  469,  472,  473,  170,  170,
      170,  919,  170,  420,  170,  170,  170,  170,  170,  470,

      422,  170,  170,  418,  424,  919,  425,  919,  471,  421,
      170,  423,  170,  472,  473,  170,  170,  427,  170,  170,
      474,  170,  170,  919,  170,  170,  426,  422,  170,  919,
      170,  430,  170,  425,  428,  170,  170,  429,  423,  170,
      431,  919,  170,  475,  427,  170,  435,  474,  170,  443,
      170,  444,  170,  426,  170,  433,  170,  170,  430,  170,
      476,  428,  170,  170,  429,  170,  170,  431,  434,  436,
      475,  477,  432,  435,  170,  170,  443,  170,  444,  170,
      478,  170,  433,  170,  479,  170,  481,  476,  482,  483,
      484,  485,  170,  170,  480,  434,  436,  486,  477,  432,

      487,  170,  170,  488,  489,  490,  491,  478,  492,  493,
      494,  479,  170,  481,  495,  482,  483,  484,  485,  496,
      498,  480,  499,  500,  486,  501,  502,  487,  503,  504,
      488,  489,  490,  491,  505,  492,  493,  494,  497,  506,
      507,  495,  508,  509,  510,  511,  496,  498,  512,  499,
      500,  513,  501,  502,  514,  503,  504,  515,  517,  516,
      518,  505,  519,  520,  521,  497,  506,  507,  522,  508,
      509,  510,  511,  523,  525,  512,  170,  524,  513,  526,
      919,  514,  170,  919,  515,  517,  516,  518,  527,  519,
      520,  521,  170,  170,  615,  522,  170,  170,  170,  170,

      523,  525,  170,  170,  524,  528,  526,  529,  170,  170,
      170,  919,  170,  170,  532,  527,  533,  170,  170,  170,
      170,  615,  616,  170,  170,  170,  170,  170,  530,  170,
      170,  170,  528,  170,  529,  170,  170,  170,  531,  170,
      170,  532,  536,  533,  170,  170,  534,  170,  170,  616,
      170,  170,  537,  170,  170,  530,  170,  170,  170,  919,
      170,  617,  539,  170,  535,  531,  618,  170,  170,  536,
      170,  919,  919,  534,  170,  170,  170,  170,  170,  537,
      170,  538,  170,  170,  542,  170,  541,  170,  617,  539,
      170,  535,  540,  618,  170,  170,  544,  170,  170,  543,

      545,  170,  549,  170,  170,  170,  919,  919,  538,  170,
      170,  542,  170,  541,  170,  919,  546,  170,  170,  540,
      170,  170,  170,  544,  170,  170,  543,  545,  170,  549,
      547,  170,  170,  170,  170,  548,  551,  170,  555,  919,
      919,  919,  550,  546,  170,  170,  170,  170,  170,  170,
      552,  170,  170,  170,  170,  170,  170,  547,  170,  619,
      170,  170,  548,  551,  170,  555,  170,  170,  170,  550,
      919,  170,  170,  170,  554,  170,  556,  552,  553,  170,
      170,  170,  170,  170,  170,  170,  619,  170,  170,  170,
      170,  170,  620,  170,  170,  170,  557,  558,  621,  170,

      170,  554,  170,  556,  919,  553,  559,  919,  170,  170,
      170,  170,  561,  919,  170,  170,  170,  170,  170,  620,
      170,  560,  919,  557,  558,  621,  170,  170,  170,  170,
      170,  565,  566,  559,  567,  170,  170,  170,  170,  561,
      564,  562,  170,  919,  563,  170,  170,  170,  560,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  565,  566,
      568,  567,  170,  170,  573,  170,  170,  564,  562,  170,
      569,  563,  571,  170,  575,  170,  170,  170,  170,  170,
      170,  170,  570,  170,  170,  170,  170,  568,  170,  170,
      170,  573,  574,  170,  576,  170,  170,  569,  170,  571,

      572,  575,  170,  919,  170,  170,  577,  170,  170,  570,
      170,  170,  170,  170,  170,  170,  170,  583,  170,  574,
      170,  576,  170,  170,  170,  170,  622,  572,  584,  170,
      578,  170,  170,  577,  170,  170,  579,  170,  170,  170,
      170,  170,  581,  170,  583,  170,  580,  170,  170,  170,
      623,  170,  582,  622,  919,  584,  170,  578,  170,  170,
      919,  170,  170,  579,  170,  170,  170,  170,  585,  581,
      170,  587,  170,  580,  919,  170,  170,  623,  919,  582,
      170,  588,  170,  593,  919,  170,  170,  586,  589,  170,
      170,  170,  170,  170,  624,  585,  592,  170,  587,  170,

      170,  590,  594,  170,  170,  170,  591,  170,  588,  170,
      593,  170,  919,  170,  586,  589,  170,  170,  170,  170,
      170,  624,  170,  592,  170,  170,  170,  170,  590,  594,
      170,  170,  170,  591,  595,  170,  170,  170,  170,  170,
      170,  596,  919,  170,  598,  170,  170,  919,  625,  170,
      597,  170,  170,  170,  170,  170,  599,  170,  170,  170,
      602,  595,  170,  170,  170,  170,  170,  601,  596,  600,
      170,  598,  170,  170,  170,  625,  919,  597,  170,  170,
      170,  170,  170,  599,  170,  170,  170,  602,  603,  919,
      170,  919,  170,  170,  601,  919,  600,  170,  170,  170,

      607,  170,  170,  606,  170,  170,  170,  170,  604,  919,
      605,  608,  170,  170,  626,  603,  170,  170,  170,  627,
      170,  919,  170,  628,  170,  170,  170,  607,  609,  170,
      606,  170,  170,  170,  610,  604,  170,  605,  608,  170,
      170,  626,  919,  170,  170,  170,  627,  614,  611,  170,
      628,  170,  629,  170,  630,  609,  170,  631,  632,  170,
      170,  610,  633,  170,  170,  612,  634,  635,  636,  613,
      637,  170,  638,  639,  614,  611,  170,  640,  641,  629,
      170,  630,  642,  170,  631,  632,  643,  644,  647,  633,
      645,  170,  612,  634,  635,  636,  613,  637,  648,  638,

      639,  646,  649,  170,  640,  641,  650,  651,  652,  642,
      653,  654,  655,  643,  644,  647,  656,  645,  657,  658,
      659,  660,  661,  662,  663,  648,  664,  665,  646,  649,
      666,  667,  668,  650,  651,  652,  669,  653,  654,  655,
      670,  671,  672,  656,  673,  657,  658,  659,  660,  661,
      662,  663,  674,  664,  665,  675,  676,  666,  667,  668,
      677,  678,  919,  669,  170,  170,  170,  670,  671,  672,
      683,  673,  919,  919,  170,  743,  170,  679,  680,  674,
      170,  744,  675,  676,  170,  170,  681,  677,  678,  682,
      170,  170,  170,  170,  170,  684,  170,  683,  170,  170,

      170,  170,  743,  170,  679,  680,  919,  170,  744,  745,
      919,  170,  170,  681,  170,  170,  682,  170,  170,  170,
      170,  170,  684,  170,  170,  170,  170,  170,  685,  687,
      746,  919,  919,  170,  170,  170,  745,  686,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  747,  690,
      689,  170,  688,  170,  691,  685,  687,  746,  170,  170,
      170,  170,  170,  170,  686,  170,  170,  170,  692,  170,
      170,  170,  170,  919,  170,  747,  690,  689,  694,  688,
      170,  691,  693,  170,  170,  170,  170,  170,  748,  170,
      170,  919,  170,  170,  170,  692,  170,  170,  749,  170,

      695,  170,  170,  170,  170,  694,  919,  170,  696,  693,
      170,  170,  170,  170,  170,  748,  170,  170,  698,  170,
      170,  170,  170,  697,  170,  749,  170,  695,  170,  170,
      170,  170,  170,  700,  170,  696,  170,  170,  170,  170,
      170,  699,  750,  701,  170,  698,  170,  170,  170,  170,
      697,  170,  170,  170,  919,  170,  170,  170,  170,  170,
      700,  170,  702,  170,  170,  170,  751,  170,  699,  750,
      701,  170,  170,  170,  170,  170,  752,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  703,  919,  170,  702,
      704,  170,  170,  751,  170,  705,  919,  170,  170,  170,

      170,  170,  170,  752,  170,  707,  170,  170,  170,  170,
      706,  170,  170,  703,  708,  919,  919,  704,  170,  170,
      170,  170,  705,  170,  170,  709,  170,  170,  170,  170,
      919,  170,  707,  170,  170,  170,  710,  706,  170,  170,
      170,  708,  711,  170,  170,  170,  714,  170,  170,  919,
      170,  170,  709,  170,  170,  170,  919,  170,  170,  712,
      170,  170,  170,  710,  170,  170,  170,  170,  170,  711,
      170,  170,  170,  714,  715,  713,  170,  170,  170,  718,
      170,  170,  170,  717,  170,  170,  712,  170,  170,  716,
      919,  170,  170,  170,  170,  170,  170,  753,  170,  170,

      170,  715,  713,  170,  170,  170,  718,  170,  170,  170,
      717,  719,  170,  720,  170,  170,  716,  721,  170,  919,
      170,  170,  754,  170,  753,  170,  170,  170,  170,  170,
      722,  755,  170,  170,  170,  170,  170,  919,  719,  723,
      720,  170,  170,  170,  721,  170,  725,  170,  170,  754,
      724,  170,  170,  170,  170,  170,  170,  722,  755,  727,
      170,  170,  170,  170,  729,  919,  723,  726,  170,  170,
      170,  170,  170,  725,  728,  170,  170,  724,  170,  170,
      170,  170,  731,  756,  170,  170,  727,  170,  170,  170,
      170,  729,  730,  170,  726,  170,  170,  732,  170,  170,

      919,  728,  170,  170,  734,  170,  170,  170,  170,  731,
      756,  170,  170,  170,  170,  170,  170,  757,  170,  730,
      170,  170,  758,  170,  732,  919,  170,  735,  919,  170,
      733,  734,  170,  170,  170,  170,  170,  736,  170,  919,
      170,  170,  737,  170,  757,  170,  170,  170,  170,  758,
      170,  740,  739,  170,  735,  170,  170,  733,  759,  760,
      170,  742,  738,  170,  736,  170,  170,  170,  170,  737,
      170,  170,  741,  170,  170,  170,  170,  170,  740,  739,
      170,  170,  170,  170,  170,  759,  760,  170,  742,  738,
      761,  762,  763,  170,  170,  764,  765,  170,  170,  741,

      766,  767,  170,  170,  170,  768,  769,  170,  170,  770,
      771,  170,  772,  773,  774,  775,  776,  761,  762,  763,
      777,  778,  764,  765,  779,  780,  781,  766,  767,  782,
      783,  170,  768,  769,  784,  785,  770,  771,  786,  772,
      773,  774,  775,  776,  787,  788,  789,  777,  778,  170,
      170,  779,  780,  781,  170,  837,  782,  783,  791,  792,
      919,  784,  785,  793,  170,  786,  919,  796,  170,  170,
      170,  787,  788,  789,  170,  790,  170,  170,  170,  170,
      170,  170,  837,  170,  170,  791,  792,  170,  170,  794,
      793,  170,  170,  795,  796,  170,  170,  170,  170,  798,

      170,  170,  790,  170,  799,  170,  170,  170,  797,  170,
      170,  170,  170,  170,  170,  170,  794,  802,  170,  170,
      795,  803,  919,  170,  170,  170,  798,  170,  800,  170,
      170,  799,  801,  170,  170,  797,  170,  170,  170,  170,
      170,  170,  170,  170,  802,  170,  807,  919,  803,  804,
      170,  170,  170,  805,  170,  800,  170,  170,  170,  801,
      170,  170,  170,  919,  170,  170,  806,  170,  170,  170,
      170,  919,  170,  807,  808,  170,  804,  170,  170,  170,
      805,  170,  919,  170,  170,  170,  170,  170,  809,  170,
      811,  810,  170,  806,  170,  170,  170,  919,  170,  170,

      813,  808,  170,  170,  170,  170,  170,  919,  919,  170,
      170,  812,  170,  170,  170,  809,  170,  811,  810,  170,
      170,  170,  170,  170,  170,  170,  170,  813,  919,  170,
      170,  815,  170,  170,  170,  814,  170,  170,  812,  170,
      817,  170,  919,  170,  170,  816,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  815,  170,
      170,  170,  814,  819,  170,  818,  919,  817,  170,  170,
      170,  170,  816,  170,  822,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  919,  170,  170,  170,  170,
      819,  820,  818,  823,  170,  838,  170,  170,  170,  821,

      824,  822,  170,  919,  170,  170,  170,  170,  170,  170,
      170,  826,  170,  170,  170,  170,  170,  170,  820,  827,
      823,  170,  838,  170,  170,  170,  821,  824,  170,  825,
      829,  170,  170,  170,  170,  170,  170,  170,  826,  170,
      919,  170,  828,  170,  170,  170,  827,  170,  170,  831,
      170,  170,  919,  170,  839,  170,  825,  829,  832,  170,
      830,  170,  833,  170,  170,  170,  834,  170,  170,  828,
      170,  919,  170,  170,  170,  170,  831,  170,  170,  170,
      170,  839,  840,  170,  841,  832,  170,  830,  170,  833,
      170,  835,  170,  834,  170,  170,  842,  170,  836,  170,

      170,  843,  170,  844,  170,  170,  170,  845,  846,  840,
      170,  841,  847,  170,  848,  170,  849,  850,  835,  851,
      852,  853,  170,  842,  170,  836,  170,  854,  843,  170,
      844,  855,  856,  857,  845,  846,  858,  859,  860,  847,
      861,  848,  862,  849,  850,  919,  851,  852,  853,  170,
      170,  864,  170,  919,  854,  170,  919,  919,  855,  856,
      857,  863,  170,  858,  859,  860,  170,  861,  919,  862,
      170,  170,  170,  919,  170,  170,  170,  170,  864,  170,
      865,  866,  170,  867,  170,  170,  170,  919,  863,  170,
      919,  868,  919,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  865,  866,  919,
      867,  170,  170,  170,  869,  170,  170,  170,  868,  870,
      170,  170,  170,  170,  919,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  887,  170,  170,  871,  170,
      170,  869,  170,  170,  170,  170,  870,  170,  170,  170,
      170,  170,  170,  170,  872,  170,  170,  170,  919,  874,
      170,  170,  887,  170,  170,  871,  170,  170,  170,  170,
      876,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      875,  872,  873,  170,  170,  878,  874,  170,  170,  170,
      919,  919,  919,  170,  170,  170,  170,  876,  170,  877,

      170,  170,  170,  170,  170,  170,  170,  875,  170,  873,
      170,  170,  878,  170,  170,  170,  170,  880,  170,  170,
      170,  170,  879,  888,  919,  919,  877,  881,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  882,  880,  170,  170,  883,  884,  879,
      888,  170,  170,  170,  881,  170,  170,  170,  889,  890,
      170,  170,  170,  170,  170,  170,  170,  170,  885,  170,
      882,  170,  170,  170,  883,  884,  170,  170,  170,  170,
      170,  170,  891,  170,  170,  889,  890,  170,  886,  170,
      892,  893,  894,  895,  170,  885,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  891,
      170,  170,  896,  919,  170,  886,  170,  892,  893,  894,
      895,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  896,
      170,  170,  919,  170,  170,  170,  170,  919,  170,  170,
      897,  919,  170,  170,  170,  170,  170,  170,  170,  898,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  899,
      900,  170,  170,  170,  170,  170,  170,  897,  170,  905,
      170,  170,  170,  170,  170,  919,  898,  170,  170,  904,
      170,  170,  170,  170,  170,  170,  899,  900,  170,  901,

      170,  170,  170,  170,  170,  170,  905,  170,  170,  170,
      170,  170,  170,  170,  906,  907,  904,  170,  908,  909,
      903,  170,  170,  902,  170,  170,  901,  170,  170,  915,
      170,  170,  170,  170,  170,  919,  170,  170,  170,  170,
      170,  906,  907,  910,  170,  908,  909,  903,  170,  911,
      902,  170,  170,  170,  170,  170,  915,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  912,  916,  917,  919,
      910,  170,  170,  170,  914,  170,  911,  170,  170,  170,
      170,  170,  913,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  918,  912,  916,  917,  170,  170,  170,  170,

      170,  914,  170,  919,  170,  170,  170,  170,  919,  913,
      170,  170,  919,  170,  170,  170,  170,  919,  919,  918,
      919,  919,  170,  170,  170,  170,  919,  919,  919,  170,
      919,  919,  919,  170,  170,  919,  919,  919,  919,  919,
      919,  919,  919,  170,  919,  919,  919,  919,  919,  170,
       75,  919,  919,   75,   76,  919,   76,   76,  158,  919,
      158,  158,  160,  919,  160,  160,  161,  919,  161,  161,
      170,  919,  170,  170,    5,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,

      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919
    } ;

static yyconst flex_int16_t yy_chk[3741] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   23,   21,   24,   21,   26,   17,   23,   17,   21,
       27,   24,   22,   17,   21,  922,   39,   39,   22,   18,
      341,   22,   41,   41,   22,   17,   18,   17,   23,   21,
       24,   21,   26,   17,   23,   17,   21,   27,   24,   22,
       17,   21,   25,   39,   39,   22,   18,   19,   22,   25,
       25,   22,   28,   29,   19,   25,   28,   29,  244,   34,

       38,   19,   28,   34,   19,   19,   42,   42,   38,   25,
       48,   48,   49,   49,   19,  165,   25,   25,  164,   28,
       29,   19,   25,   28,   29,   30,   34,   38,   19,   28,
       34,   19,   19,   20,   61,   38,   31,   20,   32,   30,
       86,   20,   74,   74,   31,   30,   30,   20,   31,   32,
       20,   31,   30,  161,   61,   32,  160,   37,   80,   37,
       20,   61,   37,   31,   20,   32,   30,   86,   20,   81,
       81,   31,   30,   30,   20,   31,   32,   20,   31,   67,
       57,   61,   32,   35,   37,   35,   37,   57,   35,   37,
       79,   87,   76,   57,   90,   35,   35,  159,  159,   67,

       57,  166,  166,   94,   75,   50,   67,   57,   88,   58,
       35,   47,   35,   58,   57,   35,   88,   58,   87,   60,
       57,   90,   35,   35,   36,   36,   67,   57,   36,   60,
       94,   36,   36,   58,   89,   88,   58,   89,   36,   60,
       58,   36,   46,   88,   58,   45,   60,   43,   16,   13,
       12,   36,   36,   11,    5,   36,   60,    0,   36,   36,
       58,   89,   97,    0,   89,   36,   60,    0,   36,   51,
       51,    0,   51,   51,   51,   51,   51,   62,   51,   51,
       51,   62,   91,   93,   51,   98,   51,   62,  101,   97,
       93,    0,   51,   95,   51,   95,   91,   62,   63,   51,

        0,    0,   63,    0,   62,    0,    0,    0,   62,   91,
       93,   51,   98,   51,   62,  101,    0,   93,   63,   51,
       95,   51,   95,   91,   62,   63,   51,   52,   52,   63,
       52,   52,   52,   52,   52,   68,   52,   52,   52,   68,
        0,  100,  100,   52,   96,   63,  102,   73,   72,  103,
       73,   73,   72,  104,   96,   68,   72,  105,  107,  108,
        0,  109,   68,   52,    0,    0,   68,   73,  100,  100,
       52,   96,   72,  102,   73,   72,  103,   73,   73,   72,
      104,   96,   68,   72,  105,  107,  108,  106,  109,  106,
       52,   53,   99,  106,   73,   53,  110,   99,   53,   72,

      106,  111,  112,   99,  113,   53,  114,  113,   53,   53,
       99,  114,  116,  118,  106,   53,  106,  119,   53,   99,
      106,  120,   53,  110,   99,   53,  121,  106,  111,  112,
       99,  113,   53,  114,  113,   53,   53,   99,  114,  116,
      118,  124,   53,   54,  119,  125,  117,   54,  120,  126,
      122,   54,  122,  121,  127,  128,  117,   54,  129,  130,
       54,  117,  117,  123,  132,  123,  133,   54,  124,  134,
       54,  135,  125,  117,   54,    0,  126,  122,   54,  122,
      138,  127,  128,  117,   54,  129,  130,   54,  117,  117,
      123,  132,  123,  133,   54,   55,  134,  136,  135,  139,

      137,  136,   55,  140,   55,  137,  141,  138,  142,   55,
      143,  140,  144,  145,   55,   55,    0,  147,  148,  149,
        0,  150,   55,  146,  136,    0,  139,  137,  136,   55,
      140,   55,  137,  141,  146,  142,   55,  143,  140,  144,
      145,   55,   55,   56,  147,  148,  149,   56,  150,  151,
      146,  152,  151,   56,  153,  154,   56,  156,  155,   56,
      157,  146,    0,   56,    0,    0,    0,    0,  170,  246,
       56,  155,    0,    0,   56,  248,  151,    0,  152,  151,
       56,  153,  154,   56,  156,  155,   56,  157,  170,  172,
       56,   59,   59,  171,  171,  170,  246,  249,  155,   59,

       59,    0,  248,    0,  172,   59,  175,    0,  175,  172,
      173,   59,    0,  252,  171,  170,  172,  173,   59,   59,
      171,  171,    0,  253,  249,  173,   59,   59,  175,  254,
      173,  172,   59,  175,  177,  175,  172,  173,   59,   64,
      252,  171,    0,   64,  173,  174,  256,  257,  174,  174,
      253,    0,  173,   64,  177,  175,  254,  173,  179,   64,
       64,  177,  179,   64,    0,    0,   64,    0,    0,  174,
       64,    0,  174,  256,  257,  174,  174,    0,  176,  176,
       64,  177,  179,  258,    0,  179,   64,   64,  178,  179,
       64,   65,   65,  176,  180,  178,  174,  186,  176,  259,

       65,  180,  178,  180,   65,  176,  176,   65,  178,  179,
      258,   65,    0,  186,  180,  178,    0,  186,   65,   65,
      176,  180,  178,    0,  186,  176,  259,   65,  180,  178,
      180,   65,  181,  183,   65,  178,    0,  182,   65,   66,
      186,  180,  181,   66,  186,    0,  260,  188,  183,  262,
       66,    0,  181,  183,  182,    0,   66,  182,  185,  181,
      183,  188,  263,   66,  182,    0,   66,  188,    0,  181,
       66,  185,  185,  260,  188,  183,  262,   66,  185,  181,
      183,  182,  187,   66,  182,  185,    0,  264,  188,  263,
       66,   69,  187,   69,  188,  190,   69,  190,  185,  185,

        0,  266,  187,   69,   69,  185,  189,  189,  267,  187,
        0,  268,    0,   69,  264,    0,  194,  190,   69,  187,
       69,    0,  190,   69,  190,    0,  194,  189,  266,  187,
       69,   69,  192,  189,  189,  267,  194,  193,  268,  192,
       69,   70,   70,  194,  190,   70,  269,    0,   70,   70,
      193,  196,  192,  194,  189,   70,    0,  193,   70,  192,
        0,  196,    0,  194,  193,   70,  192,  195,   70,   70,
        0,  196,   70,  269,  195,   70,   70,  193,  196,  192,
        0,    0,   70,  198,  193,   70,    0,  195,  196,  197,
        0,  200,   70,   71,  195,    0,  270,  198,  196,  197,

      198,  195,   71,  198,   71,  271,    0,   71,  199,  197,
      198,  200,  273,   71,  195,    0,  197,  199,  200,    0,
       71,    0,  199,  270,  198,    0,  197,  198,  199,   71,
      198,   71,  271,  203,   71,  199,  197,  201,  200,  273,
       71,  184,  203,  204,  199,  184,  184,  204,  201,  199,
        0,  205,  184,  203,    0,  199,    0,  201,    0,  184,
      203,  206,  206,  204,  201,  184,    0,  274,  184,  203,
      204,  205,  184,  184,  204,  201,    0,  207,  205,  184,
      203,  206,  210,  207,  201,  207,  184,  209,  206,  206,
      204,  210,  184,  191,  274,  191,  265,  207,  205,  191,

      209,  208,  210,  208,  207,  208,  191,  209,  206,  210,
      207,  265,  207,    0,  209,  191,    0,    0,  210,  216,
      191,  211,  191,  265,  207,  208,  191,  209,  208,  210,
      208,    0,  208,  191,  209,  212,  211,    0,  265,  216,
      213,  211,  191,  202,  202,  214,  216,  213,  211,  214,
      212,    0,  208,  202,    0,  212,    0,    0,  202,  202,
      213,    0,  212,  211,  202,  275,  216,  213,  211,  214,
      202,  202,  214,  218,  213,  276,  214,  212,  215,  215,
      202,  219,  212,  217,  217,  202,  202,  213,  218,  277,
      278,  202,  275,  218,  219,  220,  214,  280,  215,  220,

      218,  219,  276,  221,  217,  215,  215,  221,  219,  224,
      217,  217,  224,  281,    0,  218,  277,  278,  222,  220,
      218,  219,  220,  221,  280,  215,  220,  222,  219,  224,
      221,  217,  222,  223,  221,  223,  224,  225,  222,  224,
      281,  226,    0,  228,  225,  222,  220,  228,    0,    0,
      221,  226,  225,  223,  222,    0,  224,  225,  282,  222,
      223,  226,  223,  227,  225,  222,  229,  228,  226,  229,
      228,  225,  283,    0,  228,  230,  227,  232,  226,  225,
      223,  284,  230,  227,  225,  282,  285,  286,  226,  229,
      227,    0,  231,  229,  228,  230,  229,  232,  233,  283,

      231,  235,  230,  227,  232,    0,  233,    0,  284,  230,
      227,  231,  231,  285,  286,  234,  229,  235,  233,  231,
      287,  235,  230,    0,  232,  233,  234,  231,  235,    0,
      236,  237,  237,  233,  236,  234,  238,  236,  231,  231,
      238,    0,  234,  288,  235,  233,  241,  287,  235,  255,
      236,  255,  237,  234,  242,  240,  238,  236,  237,  237,
      289,  236,  234,  238,  236,  239,  241,  238,  240,  242,
      288,  290,  239,  241,  242,  240,  255,  236,  255,  237,
      291,  242,  240,  238,  292,  239,  293,  289,  294,  296,
      297,  298,  239,  241,  292,  240,  242,  299,  290,  239,

      300,  242,  240,  301,  302,  303,  305,  291,  306,  307,
      308,  292,  239,  293,  309,  294,  296,  297,  298,  310,
      311,  292,  312,  313,  299,  314,  315,  300,  316,  317,
      301,  302,  303,  305,  318,  306,  307,  308,  310,  320,
      321,  309,  322,  323,  325,  326,  310,  311,  327,  312,
      313,  328,  314,  315,  330,  316,  317,  331,  332,  331,
      333,  318,  334,  335,  336,  310,  320,  321,  337,  322,
      323,  325,  326,  338,  339,  327,  342,  338,  328,  343,
        0,  330,  344,    0,  331,  332,  331,  333,  345,  334,
      335,  336,  347,  348,  437,  337,  342,  349,  346,  343,

      338,  339,  344,  342,  338,  346,  343,  349,  345,  344,
      350,    0,  347,  348,  352,  345,  352,  349,  346,  347,
      348,  437,  438,  342,  349,  346,  343,  355,  350,  344,
      350,  351,  346,  353,  349,  345,  352,  350,  351,  347,
      348,  352,  355,  352,  349,  346,  353,  355,  354,  438,
      358,  351,  356,  353,  355,  350,  356,  350,  351,    0,
      353,  439,  359,  352,  354,  351,  440,  357,  354,  355,
      358,    0,    0,  353,  355,  354,  356,  358,  351,  356,
      353,  357,  359,  356,  362,  360,  361,  357,  439,  359,
      361,  354,  360,  440,  357,  354,  363,  358,  363,  362,

      364,  365,  368,  356,  362,  360,    0,    0,  357,  359,
      361,  362,  360,  361,  357,    0,  365,  361,  363,  360,
      364,  365,  368,  363,  367,  363,  362,  364,  365,  368,
      366,  362,  360,  366,  369,  367,  371,  361,  375,    0,
        0,    0,  370,  365,  367,  363,  370,  364,  365,  368,
      372,  367,  372,  366,  369,  376,  371,  366,  375,  441,
      366,  369,  367,  371,  373,  375,  370,  374,  377,  370,
        0,  367,  372,  370,  374,  376,  377,  372,  373,  372,
      366,  369,  376,  371,  373,  375,  441,  374,  377,  378,
      380,  373,  443,  370,  374,  377,  378,  379,  446,  372,

      379,  374,  376,  377,    0,  373,  380,    0,  382,  378,
      380,  373,  382,    0,  374,  377,  378,  380,  381,  443,
      379,  381,    0,  378,  379,  446,  383,  379,  382,  384,
      385,  386,  387,  380,  388,  382,  378,  380,  381,  382,
      385,  383,  392,    0,  384,  381,  383,  379,  381,  384,
      385,  386,  387,  383,  388,  382,  384,  385,  386,  387,
      389,  388,  392,  391,  394,  381,  390,  385,  383,  392,
      389,  384,  391,  383,  396,  396,  384,  385,  386,  387,
      389,  388,  390,  391,  394,  393,  390,  389,  395,  392,
      391,  394,  395,  390,  397,  396,  401,  389,  397,  391,

      393,  396,  396,    0,  398,  393,  398,  389,  395,  390,
      391,  394,  393,  390,  399,  395,  401,  405,  397,  395,
      400,  397,  396,  401,  398,  397,  447,  393,  406,  403,
      399,  398,  393,  398,  399,  395,  400,  405,  404,  402,
      400,  399,  403,  401,  405,  397,  402,  400,  406,  403,
      448,  398,  404,  447,    0,  406,  403,  399,  404,  402,
        0,  399,  408,  400,  405,  404,  402,  400,  407,  403,
      409,  408,  407,  402,    0,  406,  403,  448,    0,  404,
      410,  409,  408,  414,    0,  404,  402,  407,  410,  408,
      409,  412,  407,  413,  449,  407,  413,  409,  408,  407,

      410,  411,  415,  414,  416,  411,  412,  410,  409,  408,
      414,  412,    0,  413,  407,  410,  417,  409,  412,  407,
      413,  449,  415,  413,  416,  411,  418,  410,  411,  415,
      414,  416,  411,  412,  417,  419,  417,  420,  412,  421,
      413,  418,    0,  417,  420,  422,  418,    0,  451,  415,
      419,  416,  411,  418,  423,  419,  422,  420,  424,  421,
      425,  417,  419,  417,  420,  422,  421,  424,  418,  423,
      426,  420,  422,  418,  423,  451,    0,  419,  424,  427,
      425,  423,  419,  422,  420,  424,  421,  425,  427,    0,
      426,    0,  422,  429,  424,    0,  423,  426,  428,  427,

      430,  423,  431,  429,  430,  424,  427,  425,  428,    0,
      428,  431,  432,  429,  452,  427,  433,  426,  428,  453,
      429,    0,  431,  454,  430,  428,  427,  430,  432,  431,
      429,  430,  432,  434,  433,  428,  433,  428,  431,  432,
      429,  452,    0,  433,  436,  428,  453,  436,  434,  431,
      454,  430,  456,  434,  457,  432,  435,  458,  461,  432,
      434,  433,  462,  433,  436,  435,  463,  464,  465,  435,
      469,  436,  470,  472,  436,  434,  435,  474,  475,  456,
      434,  457,  476,  435,  458,  461,  477,  478,  481,  462,
      479,  436,  435,  463,  464,  465,  435,  469,  485,  470,

      472,  479,  487,  435,  474,  475,  488,  489,  490,  476,
      492,  493,  494,  477,  478,  481,  495,  479,  496,  499,
      500,  501,  502,  503,  504,  485,  505,  507,  479,  487,
      508,  509,  510,  488,  489,  490,  513,  492,  493,  494,
      514,  515,  516,  495,  517,  496,  499,  500,  501,  502,
      503,  504,  518,  505,  507,  519,  520,  508,  509,  510,
      522,  524,    0,  513,  526,  527,  528,  514,  515,  516,
      530,  517,    0,    0,  531,  617,  529,  526,  527,  518,
      533,  618,  519,  520,  526,  527,  528,  522,  524,  529,
      530,  526,  527,  528,  531,  532,  529,  530,  534,  532,

      533,  531,  617,  529,  526,  527,    0,  533,  618,  619,
        0,  526,  527,  528,  537,  539,  529,  530,  534,  532,
      535,  531,  532,  529,  536,  534,  532,  533,  535,  537,
      620,    0,    0,  541,  537,  539,  619,  536,  538,  542,
      535,  537,  539,  540,  536,  534,  532,  535,  621,  541,
      540,  536,  538,  541,  542,  535,  537,  620,  538,  542,
      541,  537,  539,  540,  536,  538,  542,  535,  543,  544,
      540,  536,  543,    0,  546,  621,  541,  540,  546,  538,
      541,  542,  545,  548,  545,  538,  542,  549,  622,  544,
      540,    0,  543,  547,  546,  543,  544,  550,  623,  543,

      547,  546,  552,  548,  545,  546,    0,  549,  550,  545,
      548,  545,  551,  547,  549,  622,  544,  550,  552,  543,
      547,  546,  552,  551,  550,  623,  553,  547,  555,  552,
      548,  545,  551,  554,  549,  550,  556,  554,  557,  551,
      547,  553,  625,  558,  550,  552,  553,  558,  555,  552,
      551,  559,  560,  553,    0,  555,  556,  554,  557,  551,
      554,  562,  559,  556,  554,  557,  626,  558,  553,  625,
      558,  559,  560,  553,  558,  555,  627,  561,  559,  560,
      563,  562,  564,  556,  554,  557,  561,    0,  562,  559,
      563,  565,  566,  626,  558,  564,    0,  561,  559,  560,

      563,  567,  564,  627,  561,  566,  569,  563,  562,  564,
      565,  565,  566,  561,  567,    0,    0,  563,  565,  566,
      571,  567,  564,  568,  561,  568,  569,  563,  567,  564,
        0,  572,  566,  569,  573,  570,  568,  565,  565,  566,
      571,  567,  570,  568,  574,  575,  577,  571,  567,    0,
      568,  572,  568,  569,  573,  570,    0,  580,  572,  574,
      578,  573,  570,  568,  574,  575,  577,  571,  576,  570,
      568,  574,  575,  577,  578,  576,  579,  580,  572,  582,
      578,  573,  570,  581,  580,  581,  574,  578,  576,  579,
        0,  574,  575,  577,  586,  576,  579,  629,  583,  582,

      584,  578,  576,  579,  580,  581,  582,  578,  587,  585,
      581,  583,  581,  584,  586,  576,  579,  585,  583,    0,
      584,  586,  630,  579,  629,  583,  582,  584,  587,  585,
      588,  631,  581,  591,  588,  587,  585,    0,  583,  589,
      584,  586,  590,  589,  585,  583,  591,  584,  595,  630,
      590,  593,  592,  591,  588,  587,  585,  588,  631,  593,
      591,  588,  590,  589,  596,    0,  589,  592,  595,  590,
      589,  593,  592,  591,  594,  595,  594,  590,  593,  592,
      591,  588,  598,  632,  596,  600,  593,  599,  597,  590,
      589,  596,  597,  601,  592,  595,  594,  599,  593,  592,

        0,  594,  598,  594,  603,  600,  603,  599,  597,  598,
      632,  596,  600,  601,  599,  597,  602,  633,  604,  597,
      601,  605,  634,  594,  599,    0,  603,  604,    0,  598,
      602,  603,  600,  603,  599,  597,  602,  605,  604,    0,
      601,  605,  606,  602,  633,  604,  606,  607,  605,  634,
      608,  609,  608,  603,  604,  610,  611,  602,  635,  636,
      612,  613,  607,  602,  605,  604,  606,  607,  605,  606,
      608,  609,  611,  606,  607,  610,  611,  608,  609,  608,
      612,  613,  610,  611,  614,  635,  636,  612,  613,  607,
      637,  639,  640,  606,  607,  641,  644,  608,  609,  611,

      645,  646,  610,  611,  614,  647,  652,  612,  613,  653,
      654,  614,  657,  658,  659,  660,  661,  637,  639,  640,
      663,  664,  641,  644,  665,  666,  667,  645,  646,  668,
      669,  614,  647,  652,  670,  672,  653,  654,  673,  657,
      658,  659,  660,  661,  674,  676,  677,  663,  664,  679,
      680,  665,  666,  667,  681,  743,  668,  669,  682,  683,
        0,  670,  672,  684,  684,  673,    0,  687,  688,  679,
      680,  674,  676,  677,  681,  681,  679,  680,  682,  683,
      685,  681,  743,  686,  684,  682,  683,  687,  688,  685,
      684,  684,  690,  686,  687,  688,  679,  680,  689,  690,

      685,  681,  681,  686,  691,  682,  683,  685,  689,  692,
      686,  684,  690,  693,  687,  688,  685,  695,  689,  690,
      686,  696,    0,  694,  691,  689,  690,  685,  693,  692,
      686,  691,  694,  693,  697,  689,  692,  695,  698,  690,
      693,  696,  700,  694,  695,  689,  700,    0,  696,  697,
      694,  691,  699,  698,  697,  693,  692,  702,  698,  694,
      693,  697,  700,    0,  695,  698,  699,  701,  696,  700,
      694,    0,  699,  700,  701,  705,  697,  702,  704,  699,
      698,  697,    0,  706,  702,  698,  703,  701,  703,  700,
      705,  704,  707,  699,  701,  705,  708,    0,  704,  699,

      709,  701,  705,  706,  702,  704,  703,    0,    0,  712,
      706,  708,  707,  703,  701,  703,  708,  705,  704,  707,
      709,  710,  705,  708,  711,  704,  713,  709,    0,  712,
      706,  711,  714,  703,  715,  710,  712,  717,  708,  707,
      717,  710,    0,  708,  711,  716,  713,  709,  710,  716,
      718,  711,  714,  713,  715,  719,  712,  717,  711,  714,
      720,  715,  710,  721,  717,  718,    0,  717,  710,  716,
      718,  711,  716,  713,  724,  719,  716,  718,  722,  714,
      720,  715,  719,  721,  717,    0,  723,  720,  726,  725,
      721,  722,  718,  725,  724,  745,  716,  718,  722,  723,

      727,  724,  719,    0,  727,  722,  723,  720,  726,  725,
      721,  729,  729,  723,  728,  726,  725,  732,  722,  730,
      725,  724,  745,  730,  727,  722,  723,  727,  731,  728,
      732,  727,  729,  723,  728,  726,  725,  732,  729,  729,
        0,  728,  731,  730,  732,  733,  730,  735,  731,  734,
      730,  727,    0,  734,  746,  731,  728,  732,  736,  729,
      733,  728,  737,  737,  732,  733,  738,  735,  739,  731,
      730,    0,  733,  734,  735,  731,  734,  740,  736,  742,
      734,  746,  747,  737,  748,  736,  738,  733,  739,  737,
      737,  740,  733,  738,  735,  739,  750,  740,  741,  742,

      734,  751,  741,  754,  740,  736,  742,  758,  760,  747,
      737,  748,  763,  738,  766,  739,  767,  769,  740,  770,
      772,  773,  741,  750,  740,  741,  742,  774,  751,  741,
      754,  776,  777,  780,  758,  760,  782,  783,  784,  763,
      789,  766,  790,  767,  769,    0,  770,  772,  773,  741,
      791,  793,  792,    0,  774,  796,    0,    0,  776,  777,
      780,  792,  790,  782,  783,  784,  794,  789,    0,  790,
      791,  793,  792,    0,  795,  796,  798,  791,  793,  792,
      794,  795,  796,  797,  799,  797,  794,    0,  792,  790,
        0,  798,    0,  794,  795,  800,  798,  791,  793,  792,

      802,  795,  796,  798,  799,  797,  803,  794,  795,    0,
      797,  799,  797,  794,  801,  800,  801,  804,  798,  805,
      802,  795,  800,  798,    0,  806,  803,  802,  808,  807,
      809,  799,  797,  803,  810,  842,  801,  804,  807,  805,
      811,  801,  800,  801,  804,  806,  805,  802,  808,  807,
      809,  812,  806,  803,  810,  808,  807,  809,    0,  814,
      811,  810,  842,  801,  804,  807,  805,  811,  815,  813,
      817,  812,  806,  816,  817,  808,  807,  809,  812,  814,
      816,  810,  813,  818,  819,  820,  814,  811,  815,  813,
        0,    0,    0,  816,  817,  815,  813,  817,  812,  819,

      816,  817,  821,  818,  819,  820,  814,  816,  822,  813,
      818,  819,  820,  824,  825,  815,  813,  823,  826,  823,
      816,  817,  821,  844,    0,    0,  819,  824,  822,  821,
      818,  819,  820,  824,  825,  822,  827,  828,  826,  823,
      824,  825,  832,  827,  823,  826,  823,  829,  830,  821,
      844,  829,  830,  831,  824,  822,  827,  828,  849,  851,
      824,  825,  832,  827,  828,  826,  823,  833,  831,  832,
      827,  829,  830,  831,  829,  830,  834,  835,  829,  830,
      831,  836,  852,  827,  828,  849,  851,  833,  836,  832,
      855,  858,  859,  860,  833,  831,  834,  835,  829,  830,

      831,  836,  862,  834,  835,  863,  864,  865,  836,  852,
      866,  868,  867,    0,  833,  836,  867,  855,  858,  859,
      860,  870,  862,  834,  835,  863,  864,  865,  836,  862,
      866,  868,  863,  864,  865,  869,  867,  866,  868,  867,
      871,  870,    0,  867,  872,  873,  875,    0,  870,  862,
      869,    0,  863,  864,  865,  869,  876,  866,  868,  874,
      871,  874,  869,  867,  872,  873,  875,  871,  870,  876,
      877,  872,  873,  875,  878,  879,  876,  869,  881,  887,
      882,  874,  869,  876,  880,    0,  874,  871,  874,  885,
      877,  872,  873,  875,  878,  879,  876,  877,  881,  880,

      882,  878,  879,  876,  880,  881,  887,  882,  874,  885,
      883,  880,  884,  886,  889,  891,  885,  877,  893,  894,
      884,  878,  879,  883,  897,  881,  880,  882,  896,  905,
      883,  880,  884,  886,  898,    0,  885,  883,  899,  884,
      886,  889,  891,  896,  897,  893,  894,  884,  896,  898,
      883,  897,  901,  900,  898,  896,  905,  883,  899,  884,
      886,  898,  902,  903,  904,  899,  900,  907,  910,    0,
      896,  897,  901,  900,  903,  896,  898,  911,  912,  901,
      900,  898,  902,  903,  904,  899,  913,  914,  910,  902,
      903,  904,  912,  900,  907,  910,  917,  911,  912,  901,

      900,  903,  918,    0,  911,  912,  913,  914,    0,  902,
      903,  904,    0,  913,  914,  910,  917,    0,    0,  912,
        0,    0,  918,  917,  911,  912,    0,    0,    0,  918,
        0,    0,    0,  913,  914,    0,    0,    0,    0,    0,
        0,    0,    0,  917,    0,    0,    0,    0,    0,  918,
      920,    0,    0,  920,  921,    0,  921,  921,  923,    0,
      923,  923,  924,    0,  924,  924,  925,    0,  925,  925,
      926,    0,  926,  926,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,

      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1597 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1845 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 920 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 919 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 126:
#line 184 "flex_lexer.l"
case 127:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2609 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 920 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 920 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 919);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 214 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
