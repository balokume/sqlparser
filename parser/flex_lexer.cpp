#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[928] =
    {   0,
        0,    0,    2,    2,  135,  133,    4,    4,  133,  126,
      133,  126,  126,  129,  126,  126,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,    0,    0,  132,    1,
      128,  127,  129,  124,  123,  125,  131,  131,  131,  131,
      131,  113,  131,  114,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  115,  131,  116,  117,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  118,  119,  120,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  121,  131,  131,  131,  131,  131,  131,  131,  131,
        2,    2,    2,    2,    2,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  130,  127,   99,  131,
      100,  131,  131,  101,  102,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  103,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  104,  131,  131,  131,  131,
      131,  131,  105,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  106,  131,  131,  107,  131,

      131,  131,  131,  131,  131,  131,  131,  108,  131,  131,
      109,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  110,  131,  131,  131,  131,  111,  131,
      131,  131,  131,  112,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  131,  131,  131,  131,  131,   72,  131,   73,
       93,  131,  131,  131,  131,   74,  131,  131,  131,  131,
       75,  131,  131,  131,   76,   77,  131,  131,  131,  131,
      131,   78,   79,   80,  131,  131,   81,  131,   82,  131,
      131,  131,  131,  131,  131,   83,  131,   84,   85,   86,
      131,   87,  131,  131,  131,  131,   88,  131,  131,  131,

      131,  131,   89,   90,  131,  131,  122,  131,  131,  131,
      131,  131,   91,  131,  131,  131,  131,   92,   94,   95,
      131,  131,  131,  131,  131,  131,  131,   96,  131,   97,
      131,   98,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   54,   55,  131,  131,  131,  131,  131,  131,
      131,   56,  131,  131,  131,   57,  131,  131,  131,  131,
      131,  131,  131,  131,  131,   58,  131,  131,  131,   59,
       60,  131,  131,  131,  131,   61,   62,   63,   64,  131,
      131,  131,   65,   66,  131,  131,  131,  131,  131,   67,
      131,  131,  131,  131,   68,  131,  131,  131,   69,  131,
      131,  131,   70,  131,  131,   71,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      131,   30,  131,  131,   31,  131,   32,  131,  131,   33,
       34,  131,   35,   36,   37,  131,   38,  131,   39,   40,
      131,   41,   42,  131,  131,   43,  131,  131,   44,  131,
      131,  131,   45,  131,   46,   47,   48,  131,   49,  131,
      131,  131,   50,   51,   52,   53,  131,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   14,   15,   16,   17,   18,  131,
       19,  131,   20,   21,   22,   23,  131,   24,  131,  131,
       25,   26,  131,   27,   28,  131,  131,  131,   29,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  131,   10,  131,   11,  131,   12,

      131,  131,   13,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  131,    7,  131,    8,    9,    2,    2,    2,
        2,    2,    5,    6,    2,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[935] =
    {   0,
        0,    0,   65,    0,  368, 3691,  129,  131,    0, 3691,
      358,  351,  346,  127,  126,  343,  123,  123,  175,  221,
      119,  132,  118,  131,  165,  119,  134,  176,  177,  213,
      219,  226,  124,  183,  269,  312,  232,  188,  223,    0,
        0,  161,  205,  347,    0,  344,  341,  334,  203,  202,
      327,  369,  427,  479,  531,  579,  627,  264,  297,  675,
      303,  218,  361,  382,  727,  775,  827,  419,  424,  877,
      929,  977,  430,  438,  263,  289,  308,  289, 3691, 3691,
      284,  250,  290, 3691, 3691, 3691,    0,  142,  209,  285,
      306,  289,  365,    0,  360,  322,  339,  369,  355,  362,

      477,  419,  409,  426,  423,  441,  445,  483,  438,  436,
      470,  479,  478,  480,  481,  487,    0,  486,  531,  503,
      525,  512,  532,  528,  551,  524,  529,  527,  528,  541,
      554,  552,    0,  556,  566,  570,  588,  585,  583,  581,
      589,  589,  587,  586,  584,  605,  606,  598,  625,  607,
      601,  624,  622,  635,  642,  641,  639,  650,  651,  637,
        0,  300,  253,  248,    0,    0,  210,  207,  297,    0,
        0,    0,  661,  686,  694,  719,  705,  740,  758,  715,
      790,  812,  821,  769,  809,  843, 1029,  851,  846,  876,
      881,  910,  918, 1079,  920,  921,  962,  951,  963,  974,

     1006, 1028,  772, 1034, 1128, 1031, 1062,  825, 1085, 1088,
     1124,  992, 1071, 1114, 1125, 1139, 1157, 1162,  975, 1179,
     1168, 1174, 1196, 1193, 1198, 1208, 1230, 1231, 1247, 1236,
     1252, 1264, 1285, 1268, 1298, 1111, 1293, 1296, 1310, 1331,
     1322, 1346, 1347, 1355, 1336, 1364, 3691,  190,    0,  653,
        0,  655,  684,    0,    0,  683,  679,  722,  919,  717,
      739,  765,  797,  819,    0,  842,  872,  888, 1185,  982,
      981,  972, 1020, 1027, 1041,    0, 1050, 1060, 1076, 1078,
     1096, 1133,    0, 1168, 1204, 1242, 1226, 1250, 1266, 1261,
     1285, 1304, 1359, 1360, 1361, 1370, 1355, 1363,    0, 1361,

     1385, 1385, 1391, 1396, 1394, 1384, 1385,    0, 1397, 1392,
     1394, 1409, 1410, 1418, 1404, 1404, 1410, 1405, 1425, 1407,
     1421, 1425, 1426,    0, 1411, 1415, 1419, 1431,    0, 1428,
     1428, 1435, 1446,    0, 1441, 1452, 1444, 1459, 1449, 1443,
     1445, 1452, 1459, 1466,    0,  152, 1478, 1480, 1483, 1484,
     1501, 1492, 1493, 1506, 1497, 1502, 1534, 1537, 1546, 1545,
     1551, 1555, 1556, 1568, 1579, 1594, 1585, 1609, 1591, 1604,
     1623, 1622, 1608, 1610, 1644, 1625, 1661, 1648, 1658, 1653,
     1663, 1674, 1677, 1679, 1696, 1714, 1698, 1713, 1715, 1727,
     1731, 1732, 1736, 1765, 1750, 1767, 1753, 1769, 1768, 1786,

     1799, 1808, 1807, 1821, 1822, 1820, 1823, 1832, 1860, 1824,
     1856, 1862, 1866, 1888, 1890, 1891, 1896, 1912, 1894, 1920,
     1922, 1928, 1944, 1930, 1931, 1956, 1960, 1968, 1966, 1965,
     1982, 1984, 1996, 2010, 2014, 1998, 2019, 2036, 2040, 2044,
     2068, 2062, 1474, 1557, 1619, 1680, 1719,    0, 1726,    0,
        0, 1783, 1860, 1863, 1920,    0, 1963, 1983, 1985, 2046,
        0, 2050, 2049, 2063,    0,    0, 2061, 2062, 2058, 2061,
     2082,    0,    0,    0, 2088, 2079,    0, 2084,    0, 2084,
     2083, 2079, 2089, 2093, 2105,    0, 2103,    0,    0,    0,
     2097,    0, 2106, 2114, 2102, 2106,    0, 2124, 2124, 2113,

     2114, 2120,    0,    0, 2134, 2135,    0, 2124, 2122, 2121,
     2130, 2144,    0, 2144, 2143, 2148, 2140,    0,    0, 2138,
     2158, 2151, 2145, 2168, 2151, 2165, 2168,    0, 2154,    0,
     2172,    0, 2176, 2185, 2180, 2201, 2182, 2184, 2190, 2206,
     2215, 2230, 2234, 2224, 2249, 2240, 2252, 2264, 2255, 2289,
     2268, 2294, 2300, 2298, 2283, 2306, 2317, 2323, 2322, 2339,
     2352, 2340, 2351, 2356, 2362, 2357, 2373, 2388, 2374, 2392,
     2405, 2407, 2410, 2428, 2431, 2416, 2442, 2446, 2447, 2459,
     2465, 2461, 2470, 2464, 2482, 2500, 2483, 2501, 2495, 2505,
     2524, 2533, 2516, 2519, 2535, 2554, 2549, 2559, 2565, 2573,

     2575, 2589, 2570, 2584, 2599, 2598, 2613, 2607, 2608, 2624,
     2639, 2643, 2641, 2653, 2647, 2675, 2658, 2672, 2681, 2683,
     2687, 2691,    0,    0, 2160, 2192, 2218, 2247, 2299, 2353,
     2411,    0, 2403, 2480, 2534,    0, 2606, 2620, 2642, 2682,
     2678, 2681, 2684, 2702, 2705,    0, 2711, 2702, 2701,    0,
        0, 2702, 2721, 2712, 2720,    0,    0,    0,    0, 2733,
     2728, 2717,    0,    0, 2735, 2723, 2724, 2741, 2741,    0,
     2750, 2732, 2750, 2754, 2737, 2739, 2740, 2761,    0, 2760,
     2762, 2765,    0, 2752, 2771,    0, 2769, 2770, 2780, 2771,
     2775, 2786, 2799, 2804, 2783, 2805, 2829, 2837, 2820, 2823,

     2838, 2854, 2842, 2848, 2872, 2873, 2877, 2878, 2896, 2859,
     2908, 2913, 2902, 2907, 2911, 2921, 2912, 2942, 2945, 2946,
     2947, 2950, 2951, 2961, 2982, 2976, 2980, 2986, 2990, 3001,
     3011, 2995, 3016, 2999, 3034, 3025, 3050, 3039, 3055, 3060,
     3064, 3078, 3065, 3068, 3090, 3093, 3094, 3104, 3103, 3108,
     2809,    0, 2825, 3005, 3030, 3049,    0, 3111, 3104,    0,
        0, 3124,    0,    0,    0, 3127,    0, 3120,    0,    0,
     3112,    0,    0, 3120, 3134,    0, 3131, 3143,    0, 3127,
     3143, 3124,    0, 3149, 3134,    0,    0, 3145,    0, 3157,
     3161, 3143,    0,    0,    0,    0, 3155, 3163, 3167, 3168,

     3172, 3182, 3186, 3178, 3218, 3197, 3181, 3207, 3232, 3221,
     3222, 3226, 3231, 3235, 3247, 3250, 3260, 3261, 3264, 3266,
     3272, 3275, 3276, 3298, 3304, 3289, 3306, 3290, 3314, 3315,
     3330, 3329, 3320, 3338, 3339, 3344, 3372, 3378, 3360, 3363,
     3369, 3384, 3388, 3393,    0,    0,    0,    0,    0, 3168,
        0, 3158,    0,    0,    0,    0, 3178,    0, 3223, 3352,
        0,    0, 3339,    0,    0, 3369, 3386, 3397,    0, 3403,
     3406, 3412, 3414, 3417, 3422, 3428, 3436, 3438, 3446, 3447,
     3452, 3462, 3457, 3468, 3470, 3471, 3476, 3486, 3480, 3492,
     3511, 3502, 3505, 3514, 3501,    0, 3505,    0, 3508,    0,

     3506, 3519,    0, 3535, 3536, 3544, 3540, 3565, 3546, 3554,
     3568, 3569, 3545,    0, 3556,    0,    0, 3580, 3584, 3594,
     3590, 3598,    0,    0, 3599, 3602, 3691, 3666, 3670,  152,
     3674, 3678, 3682, 3686
    } ;

static yyconst flex_int16_t yy_def[935] =
    {   0,
      927,    1,  927,    3,  927,  927,  927,  927,  928,  927,
      929,  927,  927,  927,  927,  927,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      931,  931,  927,  932,  931,  933,  931,  931,  931,  931,
      931,  934,  934,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  927,  928,  929,  927,  927,
      927,  927,  927,  927,  927,  927,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      931,  931,  932,  933,  931,  931,  931,  931,  931,  931,
      931,  931,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  927,  927,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  931,  931,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,

      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  930,  930,  930,  930,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  930,  930,  930,  930,  930,  930,

      930,  930,  930,   53,   53,   53,   53,   53,   53,   53,
       53,   53,  930,  930,  930,  930,  930,   53,   53,   53,
       53,   53,  930,  930,   53,   53,    0,  927,  927,  927,
      927,  927,  927,  927
    } ;

static yyconst flex_int16_t yy_nxt[3757] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   40,   40,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   45,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   75,   75,   41,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   75,   75,
       76,   76,   76,   76,   82,   83,   84,   85,   88,   93,
       89,  113,  105,  115,  106,  121,   90,  114,   91,  107,
      122,  116,  109,   92,  108,   87,  139,  249,  110,   94,
      346,  111,  162,   76,  112,   88,   93,   89,  113,  105,
      115,  106,  121,   90,  114,   91,  107,  122,  116,  109,
       92,  108,  117,  139,  249,  110,   94,   95,  111,  118,
      119,  112,  123,  126,   96,  120,  124,  127,  248,  140,

      157,   97,  125,  141,   98,   99,   76,   76,  158,  117,
      168,  169,  170,  171,   95,  346,  118,  119,  167,  123,
      126,   96,  120,  124,  127,  128,  140,  157,   97,  125,
      141,   98,   99,  100,  208,  158,  132,  101,  136,  129,
      250,  102,  159,  160,  133,  130,  131,  103,  134,  137,
      104,  135,  128,  165,  173,  138,  345,  154,  248,  155,
      100,  208,  156,  132,  101,  136,  129,  250,  102,  159,
      160,  133,  130,  131,  103,  134,  137,  104,  135,  173,
      173,  173,  138,  142,  154,  143,  155,  199,  144,  156,
       76,   76,   81,  200,   79,  145,  146,   82,   83,  173,

      173,  162,   76,  255,  168,  169,  173,  173,  251,  201,
      142,  247,  143,  173,  199,  144,  252,  202,  253,  173,
      200,  254,  145,  146,  147,  148,  173,  173,  149,  207,
      255,  150,  151,  173,  260,  251,  201,  172,  152,  173,
      173,  153,  167,  252,  202,  253,  173,  166,  254,  165,
      161,  147,  148,   86,   81,  149,  207,   80,  150,  151,
      173,  260,  261,   79,  262,  152,  173,  927,  153,  161,
      161,  927,  161,  161,  161,  161,  161,  209,  161,  161,
      161,  210,  256,  258,  174,  263,  175,  211,  265,  261,
      259,  262,  176,  266,  177,  264,  257,  173,  212,  178,

      927,  927,  213,  927,  209,  927,  927,  927,  210,  256,
      258,  174,  263,  175,  211,  265,  927,  259,  173,  176,
      266,  177,  264,  257,  173,  212,  178,  161,  161,  213,
      161,  161,  161,  161,  161,  173,  161,  161,  161,  927,
      226,  273,  243,  179,  227,  173,  173,  927,  271,  272,
      244,  225,  274,  275,  173,  173,  276,  245,  246,  277,
      173,  282,  173,  180,  927,  283,  173,  226,  273,  243,
      179,  227,  927,  173,  173,  271,  272,  244,  225,  274,
      275,  173,  173,  276,  245,  246,  277,  173,  282,  267,
      180,  181,  283,  173,  268,  173,  284,  278,  182,  279,

      269,  173,  285,  280,  286,  183,  287,  270,  184,  185,
      281,  288,  290,  292,  289,  173,  267,  291,  181,  927,
      927,  268,  173,  284,  278,  182,  279,  269,  297,  285,
      280,  286,  183,  287,  270,  184,  185,  281,  288,  290,
      292,  289,  173,  186,  291,  298,  293,  187,  299,  300,
      301,  188,  302,  305,  306,  297,  294,  189,  307,  308,
      190,  295,  296,  303,  309,  304,  310,  173,  927,  311,
      186,  312,  298,  293,  187,  299,  300,  301,  188,  302,
      305,  306,  927,  294,  189,  307,  308,  190,  295,  296,
      303,  309,  304,  310,  173,  173,  311,  313,  312,  314,

      315,  316,  191,  318,  192,  317,  319,  321,  322,  193,
      323,  320,  325,  326,  194,  173,  927,  327,  324,  328,
      927,  329,  173,  332,  313,  333,  314,  315,  316,  191,
      318,  192,  317,  319,  321,  322,  193,  323,  320,  325,
      326,  194,  173,  173,  327,  324,  328,  195,  329,  330,
      332,  334,  333,  196,  335,  336,  197,  338,  337,  198,
      331,  339,  340,  173,  927,  927,  341,  343,  344,  443,
      173,  444,  927,  927,  195,  927,  330,  173,  334,  342,
      196,  335,  336,  197,  338,  337,  198,  331,  339,  340,
      173,  173,  203,  341,  343,  344,  443,  173,  444,  204,

      205,  347,  173,  927,  173,  206,  342,  445,  927,  446,
      173,  173,  927,  447,  927,  927,  927,  351,  173,  203,
      352,  173,  173,  927,  173,  348,  204,  205,  347,  173,
      173,  173,  206,  927,  445,  173,  446,  173,  173,  214,
      447,  173,  349,  173,  351,  448,  451,  352,  173,  173,
      350,  173,  348,  215,  353,  173,  173,  173,  173,  216,
      217,  927,  173,  173,  927,  927,  214,  927,  173,  349,
      173,  452,  448,  451,  173,  354,  173,  350,  173,  927,
      215,  353,  173,  173,  927,  361,  216,  217,  173,  355,
      173,  173,  218,  927,  173,  362,  453,  927,  452,  927,

      219,  173,  354,  173,  220,  173,  173,  221,  173,  454,
      927,  173,  361,  356,  927,  173,  355,  927,  173,  218,
      357,  173,  362,  453,  358,  173,  173,  219,  173,  927,
      927,  220,  173,  173,  221,  173,  454,  173,  173,  222,
      356,  173,  363,  173,  359,  173,  360,  357,  173,  455,
      223,  358,  173,  173,  927,  173,  224,  173,  456,  173,
      927,  397,  173,  173,  173,  927,  222,  173,  173,  363,
      173,  359,  173,  360,  364,  173,  455,  223,  371,  173,
      369,  370,  173,  224,  173,  456,  173,  173,  397,  173,
      173,  228,  173,  229,  173,  457,  230,  173,  927,  927,

      458,  364,  372,  231,  232,  371,  173,  369,  370,  173,
      927,  373,  173,  173,  173,  927,  927,  173,  228,  173,
      229,  927,  457,  230,  173,  374,  173,  458,  927,  372,
      231,  232,  375,  449,  173,  450,  173,  173,  373,  173,
      173,  233,  234,  380,  173,  235,  173,  927,  236,  237,
      381,  927,  374,  173,  173,  238,  173,  173,  239,  375,
      449,  173,  450,  173,  173,  173,  927,  173,  233,  234,
      380,  927,  235,  173,  383,  236,  237,  381,  173,  173,
      927,  173,  238,  173,  173,  239,  927,  173,  382,  384,
      173,  173,  173,  173,  173,  927,  461,  462,  173,  173,

      385,  383,  240,  463,  241,  173,  173,  242,  173,  927,
      173,  173,  927,  173,  173,  382,  384,  173,  173,  927,
      173,  403,  173,  461,  462,  173,  173,  385,  173,  240,
      463,  241,  927,  464,  242,  173,  386,  173,  173,  387,
      173,  365,  173,  927,  173,  173,  366,  173,  403,  173,
      173,  927,  367,  388,  465,  173,  395,  466,  389,  368,
      464,  390,  467,  386,  173,  173,  387,  173,  365,  173,
      173,  173,  173,  366,  173,  927,  468,  173,  173,  367,
      388,  465,  396,  395,  466,  389,  368,  173,  390,  467,
      469,  173,  173,  376,  173,  377,  404,  173,  173,  378,

      927,  173,  398,  468,  173,  173,  379,  173,  470,  396,
      399,  927,  400,  927,  173,  173,  927,  469,  927,  471,
      376,  173,  377,  404,  173,  173,  378,  430,  173,  398,
      173,  173,  927,  379,  173,  470,  401,  399,  402,  400,
      173,  173,  173,  391,  173,  405,  471,  173,  173,  472,
      173,  173,  927,  392,  430,  173,  406,  173,  393,  394,
      173,  173,  407,  401,  173,  402,  927,  173,  173,  408,
      391,  173,  405,  173,  173,  173,  472,  173,  173,  409,
      392,  927,  173,  406,  173,  393,  394,  173,  173,  407,
      173,  173,  473,  173,  410,  173,  408,  927,  173,  411,

      173,  459,  173,  412,  173,  173,  409,  927,  413,  414,
      173,  173,  173,  415,  173,  173,  460,  173,  416,  473,
      173,  410,  173,  927,  173,  173,  411,  474,  459,  173,
      412,  173,  173,  417,  173,  413,  414,  173,  418,  173,
      415,  173,  173,  460,  173,  416,  173,  173,  419,  927,
      420,  173,  173,  927,  474,  475,  173,  927,  476,  173,
      417,  173,  423,  173,  927,  418,  173,  173,  173,  477,
      421,  173,  173,  173,  173,  419,  425,  420,  422,  173,
      173,  424,  475,  173,  173,  476,  478,  927,  173,  423,
      173,  427,  479,  173,  173,  173,  477,  421,  426,  173,

      173,  173,  927,  425,  173,  422,  927,  173,  424,  173,
      173,  173,  173,  478,  173,  173,  480,  431,  427,  479,
      927,  173,  428,  432,  927,  426,  173,  173,  173,  173,
      481,  173,  173,  429,  173,  927,  173,  436,  173,  173,
      927,  173,  433,  480,  431,  927,  173,  173,  173,  428,
      432,  434,  441,  173,  435,  927,  173,  481,  173,  173,
      429,  173,  173,  173,  436,  173,  437,  173,  927,  433,
      438,  439,  173,  173,  173,  482,  483,  484,  434,  441,
      173,  435,  173,  173,  440,  173,  485,  487,  488,  173,
      173,  173,  489,  437,  173,  442,  486,  438,  439,  173,

      173,  490,  482,  483,  484,  491,  492,  173,  493,  173,
      173,  440,  494,  485,  487,  488,  495,  496,  173,  489,
      497,  498,  442,  486,  499,  500,  501,  173,  490,  504,
      502,  505,  491,  492,  506,  493,  507,  508,  509,  494,
      510,  511,  512,  495,  496,  513,  514,  497,  498,  503,
      515,  499,  500,  501,  516,  517,  504,  502,  505,  518,
      519,  506,  520,  507,  508,  509,  521,  510,  511,  512,
      524,  525,  513,  514,  526,  527,  503,  515,  522,  528,
      523,  516,  517,  529,  530,  532,  518,  519,  531,  520,
      927,  927,  927,  521,  173,  927,  533,  524,  525,  173,

      534,  526,  527,  623,  927,  522,  528,  523,  173,  173,
      529,  530,  532,  173,  173,  531,  173,  173,  173,  173,
      173,  173,  173,  533,  535,  538,  173,  534,  173,  173,
      623,  537,  536,  173,  927,  173,  173,  173,  173,  927,
      173,  173,  173,  173,  173,  173,  173,  173,  539,  173,
      540,  535,  538,  173,  927,  173,  173,  927,  537,  536,
      173,  173,  173,  544,  173,  173,  541,  173,  927,  173,
      173,  173,  173,  173,  927,  539,  543,  540,  542,  927,
      173,  173,  173,  927,  546,  545,  624,  173,  173,  173,
      544,  173,  173,  541,  173,  173,  927,  173,  173,  173,

      173,  549,  547,  543,  173,  542,  548,  552,  173,  173,
      173,  546,  545,  624,  173,  173,  550,  927,  173,  173,
      173,  173,  173,  551,  556,  173,  173,  173,  549,  547,
      173,  173,  927,  548,  552,  553,  554,  173,  173,  173,
      173,  558,  173,  550,  173,  173,  173,  173,  173,  555,
      551,  556,  173,  173,  173,  625,  557,  173,  173,  173,
      173,  173,  553,  554,  173,  173,  173,  173,  558,  562,
      927,  173,  173,  173,  173,  559,  555,  173,  560,  173,
      173,  561,  625,  557,  173,  173,  173,  173,  173,  173,
      173,  173,  565,  173,  173,  173,  562,  173,  563,  173,

      564,  173,  559,  927,  173,  560,  173,  173,  561,  626,
      173,  173,  173,  173,  173,  173,  173,  173,  568,  565,
      173,  173,  173,  927,  173,  563,  173,  564,  566,  173,
      173,  173,  173,  567,  173,  627,  626,  173,  628,  173,
      173,  173,  173,  173,  569,  568,  570,  572,  573,  173,
      173,  173,  574,  571,  927,  566,  173,  173,  173,  173,
      567,  173,  627,  173,  927,  628,  173,  173,  173,  173,
      173,  569,  173,  570,  572,  573,  173,  173,  173,  574,
      571,  575,  577,  173,  580,  173,  173,  927,  927,  173,
      173,  576,  578,  173,  173,  173,  173,  927,  927,  173,

      579,  173,  173,  173,  173,  173,  581,  629,  575,  577,
      173,  580,  173,  173,  582,  173,  173,  927,  576,  578,
      583,  927,  173,  173,  173,  584,  927,  579,  173,  173,
      173,  173,  173,  581,  629,  173,  173,  173,  173,  173,
      590,  582,  173,  173,  173,  927,  587,  583,  173,  173,
      173,  173,  584,  585,  586,  927,  173,  173,  173,  173,
      173,  588,  173,  173,  173,  173,  173,  590,  173,  927,
      173,  173,  591,  587,  592,  173,  173,  927,  173,  927,
      585,  586,  173,  173,  173,  173,  173,  173,  588,  630,
      589,  594,  173,  593,  631,  173,  173,  927,  173,  591,

      927,  592,  173,  173,  173,  173,  173,  173,  598,  173,
      173,  927,  173,  600,  596,  595,  630,  589,  594,  173,
      593,  631,  597,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  598,  601,  173,  602,  173,
      600,  596,  595,  599,  173,  927,  173,  173,  173,  597,
      632,  173,  927,  173,  173,  173,  173,  173,  173,  173,
      173,  604,  605,  601,  173,  602,  173,  173,  927,  927,
      599,  173,  173,  173,  173,  173,  173,  632,  603,  606,
      173,  173,  173,  173,  173,  173,  633,  173,  604,  605,
      609,  173,  173,  173,  173,  607,  173,  608,  610,  173,

      173,  173,  173,  173,  173,  603,  606,  173,  173,  173,
      615,  173,  173,  633,  173,  634,  635,  609,  173,  173,
      173,  611,  607,  173,  608,  610,  173,  173,  173,  173,
      173,  173,  173,  927,  173,  173,  612,  615,  613,  173,
      614,  173,  634,  635,  616,  173,  173,  173,  611,  927,
      173,  927,  173,  173,  927,  173,  173,  173,  636,  173,
      173,  173,  173,  612,  637,  613,  927,  614,  617,  638,
      927,  616,  173,  173,  618,  619,  173,  173,  173,  173,
      173,  622,  173,  173,  173,  636,  639,  173,  640,  641,
      642,  637,  643,  620,  644,  617,  638,  621,  173,  173,

      645,  618,  619,  173,  173,  173,  646,  173,  622,  647,
      648,  173,  649,  639,  650,  640,  641,  642,  651,  643,
      620,  644,  652,  653,  621,  173,  655,  645,  656,  657,
      658,  173,  659,  646,  654,  660,  647,  648,  661,  649,
      662,  650,  663,  664,  665,  651,  666,  667,  668,  652,
      653,  669,  670,  655,  671,  656,  657,  658,  672,  659,
      673,  654,  660,  674,  675,  661,  676,  662,  677,  663,
      664,  665,  678,  666,  667,  668,  679,  680,  669,  670,
      681,  671,  682,  683,  684,  672,  685,  673,  686,  927,
      674,  675,  173,  676,  927,  677,  173,  751,  691,  678,

      173,  173,  692,  679,  680,  687,  173,  681,  752,  682,
      683,  684,  173,  685,  688,  686,  689,  173,  173,  173,
      173,  173,  173,  173,  751,  691,  173,  173,  173,  692,
      690,  173,  687,  173,  753,  752,  927,  173,  927,  173,
      173,  688,  173,  689,  173,  173,  173,  173,  173,  173,
      173,  173,  927,  173,  693,  695,  173,  690,  173,  927,
      173,  753,  754,  694,  173,  173,  173,  173,  173,  173,
      173,  173,  927,  173,  927,  697,  173,  173,  173,  696,
      173,  693,  695,  173,  173,  173,  699,  173,  173,  754,
      694,  173,  173,  173,  927,  173,  698,  173,  173,  173,

      173,  700,  697,  173,  173,  173,  696,  173,  701,  927,
      173,  173,  173,  699,  173,  173,  173,  927,  173,  173,
      702,  703,  173,  698,  755,  173,  173,  173,  700,  927,
      173,  173,  173,  173,  173,  701,  173,  173,  173,  173,
      927,  173,  173,  173,  704,  927,  173,  702,  703,  173,
      705,  755,  173,  173,  706,  173,  173,  173,  173,  173,
      173,  173,  927,  173,  708,  173,  173,  173,  173,  173,
      707,  704,  173,  173,  709,  173,  173,  705,  173,  756,
      173,  706,  173,  173,  710,  173,  173,  173,  173,  173,
      173,  708,  173,  173,  173,  173,  927,  707,  173,  173,

      173,  709,  173,  173,  173,  173,  756,  927,  173,  173,
      173,  710,  927,  711,  173,  173,  173,  173,  712,  173,
      173,  173,  927,  173,  173,  173,  173,  757,  173,  758,
      927,  173,  173,  927,  713,  173,  173,  173,  927,  715,
      711,  173,  714,  173,  173,  712,  173,  173,  173,  717,
      173,  173,  173,  173,  757,  173,  758,  716,  173,  173,
      718,  713,  173,  173,  173,  719,  715,  173,  173,  714,
      173,  173,  927,  173,  173,  173,  717,  173,  173,  173,
      722,  173,  173,  173,  716,  173,  173,  718,  927,  173,
      173,  173,  719,  721,  173,  173,  720,  173,  173,  173,

      173,  173,  173,  759,  173,  173,  173,  722,  173,  173,
      173,  726,  723,  173,  927,  725,  173,  173,  173,  173,
      721,  173,  173,  720,  173,  173,  173,  173,  173,  724,
      759,  173,  173,  173,  727,  173,  173,  173,  726,  723,
      173,  173,  725,  173,  173,  173,  173,  730,  173,  173,
      760,  173,  173,  728,  927,  173,  724,  729,  173,  173,
      173,  727,  173,  173,  173,  173,  731,  173,  173,  173,
      173,  173,  927,  927,  730,  173,  173,  760,  173,  173,
      728,  173,  173,  732,  729,  173,  173,  173,  927,  173,
      173,  173,  173,  731,  733,  173,  173,  173,  173,  735,

      737,  173,  173,  736,  734,  173,  173,  927,  173,  173,
      732,  173,  173,  173,  739,  173,  173,  173,  173,  738,
      173,  733,  173,  173,  173,  173,  735,  737,  173,  173,
      736,  734,  173,  173,  173,  173,  173,  761,  173,  740,
      173,  739,  173,  173,  173,  762,  738,  173,  927,  173,
      173,  173,  173,  742,  741,  173,  173,  173,  763,  173,
      173,  173,  173,  173,  761,  745,  740,  173,  743,  173,
      173,  173,  762,  744,  748,  173,  173,  173,  746,  173,
      742,  741,  173,  173,  173,  763,  173,  173,  173,  173,
      173,  173,  745,  747,  173,  743,  173,  173,  764,  173,

      744,  748,  173,  750,  173,  746,  173,  173,  173,  765,
      173,  173,  766,  749,  767,  173,  173,  173,  173,  173,
      747,  173,  768,  173,  173,  764,  173,  173,  769,  770,
      750,  771,  772,  773,  173,  173,  765,  774,  173,  766,
      749,  767,  775,  776,  173,  777,  173,  778,  779,  768,
      173,  780,  781,  782,  173,  769,  770,  783,  771,  772,
      773,  784,  785,  786,  774,  787,  788,  789,  790,  775,
      776,  791,  777,  792,  778,  779,  793,  794,  780,  781,
      782,  795,  796,  797,  783,  173,  173,  799,  784,  785,
      786,  800,  787,  788,  789,  790,  173,  927,  791,  804,

      792,  801,  173,  793,  794,  173,  173,  173,  795,  796,
      797,  173,  173,  173,  799,  173,  173,  798,  800,  173,
      173,  173,  173,  173,  802,  845,  804,  927,  801,  173,
      803,  927,  173,  173,  173,  173,  807,  927,  173,  173,
      173,  173,  173,  173,  798,  173,  173,  173,  173,  173,
      846,  802,  845,  173,  173,  805,  173,  803,  810,  173,
      806,  927,  173,  807,  811,  173,  173,  173,  173,  808,
      173,  927,  173,  173,  173,  173,  927,  846,  173,  809,
      173,  173,  805,  173,  173,  810,  173,  806,  173,  173,
      173,  811,  173,  173,  173,  173,  808,  173,  815,  927,

      173,  173,  173,  812,  813,  173,  809,  814,  173,  173,
      927,  173,  173,  173,  173,  173,  173,  173,  173,  816,
      173,  173,  173,  173,  173,  815,  817,  173,  821,  173,
      812,  813,  173,  819,  814,  173,  173,  173,  173,  173,
      173,  173,  818,  173,  173,  173,  816,  173,  173,  173,
      173,  173,  820,  817,  173,  821,  173,  173,  173,  173,
      819,  173,  173,  173,  173,  173,  173,  173,  823,  818,
      173,  173,  822,  824,  173,  173,  173,  173,  173,  820,
      927,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  927,  173,  173,  173,  823,  173,  173,  173,  822,

      824,  825,  173,  927,  173,  173,  827,  826,  173,  173,
      173,  830,  173,  173,  173,  173,  173,  173,  173,  173,
      927,  847,  173,  173,  173,  173,  173,  173,  825,  173,
      828,  173,  173,  827,  826,  173,  831,  173,  830,  173,
      829,  173,  173,  173,  173,  173,  832,  173,  847,  173,
      173,  835,  173,  173,  173,  173,  833,  828,  173,  173,
      848,  173,  173,  831,  173,  834,  173,  829,  173,  927,
      173,  173,  849,  832,  173,  173,  173,  173,  835,  173,
      173,  173,  173,  833,  840,  836,  173,  848,  173,  837,
      839,  173,  834,  173,  173,  838,  173,  173,  173,  849,

      173,  173,  173,  173,  173,  841,  173,  173,  173,  842,
      173,  840,  836,  173,  173,  844,  837,  839,  173,  173,
      173,  173,  838,  173,  173,  850,  173,  173,  173,  173,
      173,  173,  841,  173,  843,  851,  842,  173,  852,  173,
      173,  173,  844,  853,  173,  854,  173,  173,  855,  856,
      857,  173,  850,  173,  858,  859,  173,  173,  860,  861,
      862,  843,  851,  863,  864,  852,  173,  173,  865,  866,
      853,  173,  854,  867,  868,  855,  856,  857,  869,  870,
      895,  858,  859,  173,  173,  860,  861,  862,  872,  896,
      863,  864,  897,  871,  173,  865,  866,  173,  173,  173,

      867,  868,  173,  173,  173,  869,  870,  895,  173,  874,
      173,  173,  873,  173,  173,  872,  896,  173,  173,  897,
      871,  173,  173,  173,  173,  173,  173,  927,  876,  173,
      173,  173,  875,  173,  173,  173,  874,  173,  173,  873,
      173,  173,  173,  173,  173,  173,  877,  878,  173,  173,
      173,  173,  898,  927,  173,  876,  927,  173,  173,  875,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  879,  877,  878,  173,  173,  173,  173,  898,
      173,  173,  173,  173,  173,  173,  173,  927,  173,  173,
      173,  882,  173,  173,  173,  173,  173,  880,  173,  879,

      173,  881,  173,  173,  173,  173,  886,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  884,  927,  882,  173,
      173,  883,  173,  173,  880,  173,  173,  173,  881,  173,
      173,  173,  173,  886,  173,  173,  173,  885,  173,  173,
      173,  173,  173,  884,  888,  173,  173,  173,  883,  173,
      887,  173,  173,  173,  173,  173,  173,  173,  173,  889,
      173,  173,  890,  173,  885,  173,  173,  173,  899,  173,
      900,  888,  173,  173,  173,  173,  173,  887,  173,  173,
      173,  173,  173,  173,  891,  173,  889,  173,  173,  890,
      892,  893,  173,  173,  173,  899,  173,  900,  901,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      902,  891,  173,  903,  173,  173,  894,  892,  893,  173,
      173,  173,  173,  173,  173,  901,  173,  173,  173,  173,
      173,  173,  173,  173,  904,  173,  173,  902,  173,  173,
      903,  173,  173,  894,  173,  927,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  927,
      173,  904,  173,  173,  173,  173,  173,  905,  173,  173,
      927,  173,  173,  173,  173,  173,  906,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  908,  173,  173,  173,
      173,  173,  173,  173,  905,  173,  173,  907,  173,  173,

      173,  173,  173,  906,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  908,  173,  173,  173,  909,  173,  173,
      173,  912,  173,  173,  907,  173,  911,  173,  173,  173,
      173,  173,  913,  173,  173,  173,  914,  915,  173,  173,
      910,  173,  916,  173,  909,  173,  917,  173,  912,  173,
      173,  173,  173,  911,  173,  173,  173,  173,  927,  913,
      173,  923,  173,  914,  915,  173,  918,  910,  173,  916,
      173,  173,  173,  917,  173,  919,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  924,  173,  923,  173,
      921,  927,  927,  918,  920,  922,  925,  173,  173,  173,

      173,  173,  919,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  924,  173,  173,  173,  921,  173,  927,
      173,  920,  922,  925,  926,  927,  173,  173,  173,  927,
      173,  173,  173,  173,  173,  173,  927,  173,  173,  927,
      927,  173,  173,  173,  927,  173,  927,  173,  927,  927,
      927,  926,  927,  173,  927,  927,  927,  173,  927,  927,
      927,  173,  173,  927,  927,  173,   77,  927,  927,   77,
       78,  927,   78,   78,  161,  927,  161,  161,  163,  927,
      163,  163,  164,  927,  164,  164,  173,  927,  173,  173,
        5,  927,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927
    } ;

static yyconst flex_int16_t yy_chk[3757] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   23,   21,   24,   21,   26,   17,   23,   17,   21,
       27,   24,   22,   17,   21,  930,   33,   88,   22,   18,
      346,   22,   42,   42,   22,   17,   18,   17,   23,   21,
       24,   21,   26,   17,   23,   17,   21,   27,   24,   22,
       17,   21,   25,   33,   88,   22,   18,   19,   22,   25,
       25,   22,   28,   29,   19,   25,   28,   29,  248,   34,

       38,   19,   28,   34,   19,   19,   43,   43,   38,   25,
       49,   49,   50,   50,   19,  168,   25,   25,  167,   28,
       29,   19,   25,   28,   29,   30,   34,   38,   19,   28,
       34,   19,   19,   20,   62,   38,   31,   20,   32,   30,
       89,   20,   39,   39,   31,   30,   30,   20,   31,   32,
       20,   31,   30,  164,   62,   32,  163,   37,   82,   37,
       20,   62,   37,   31,   20,   32,   30,   89,   20,   39,
       39,   31,   30,   30,   20,   31,   32,   20,   31,   75,
       58,   62,   32,   35,   37,   35,   37,   58,   35,   37,
       76,   76,   81,   58,   78,   35,   35,   83,   83,   75,

       58,  162,  162,   92,  169,  169,   75,   58,   90,   59,
       35,   77,   35,   59,   58,   35,   90,   59,   91,   61,
       58,   91,   35,   35,   36,   36,   75,   58,   36,   61,
       92,   36,   36,   59,   96,   90,   59,   51,   36,   61,
       59,   36,   48,   90,   59,   91,   61,   47,   91,   46,
       44,   36,   36,   16,   13,   36,   61,   12,   36,   36,
       59,   96,   97,   11,   97,   36,   61,    5,   36,   52,
       52,    0,   52,   52,   52,   52,   52,   63,   52,   52,
       52,   63,   93,   95,   52,   98,   52,   63,   99,   97,
       95,   97,   52,  100,   52,   98,   93,   63,   64,   52,

        0,    0,   64,    0,   63,    0,    0,    0,   63,   93,
       95,   52,   98,   52,   63,   99,    0,   95,   64,   52,
      100,   52,   98,   93,   63,   64,   52,   53,   53,   64,
       53,   53,   53,   53,   53,   68,   53,   53,   53,    0,
       69,  103,   73,   53,   69,   64,   73,    0,  102,  102,
       73,   68,  104,  105,   74,   68,  106,   74,   74,  107,
       69,  109,   68,   53,    0,  110,   73,   69,  103,   73,
       53,   69,    0,   73,   74,  102,  102,   73,   68,  104,
      105,   74,   68,  106,   74,   74,  107,   69,  109,  101,
       53,   54,  110,   73,  101,   54,  111,  108,   54,  108,

      101,   74,  112,  108,  113,   54,  114,  101,   54,   54,
      108,  115,  116,  118,  115,   54,  101,  116,   54,    0,
        0,  101,   54,  111,  108,   54,  108,  101,  120,  112,
      108,  113,   54,  114,  101,   54,   54,  108,  115,  116,
      118,  115,   54,   55,  116,  121,  119,   55,  122,  123,
      124,   55,  124,  126,  127,  120,  119,   55,  128,  129,
       55,  119,  119,  125,  130,  125,  131,   55,    0,  132,
       55,  134,  121,  119,   55,  122,  123,  124,   55,  124,
      126,  127,    0,  119,   55,  128,  129,   55,  119,  119,
      125,  130,  125,  131,   55,   56,  132,  135,  134,  136,

      137,  138,   56,  139,   56,  138,  140,  141,  142,   56,
      143,  140,  144,  145,   56,   56,    0,  146,  143,  147,
        0,  148,   56,  150,  135,  151,  136,  137,  138,   56,
      139,   56,  138,  140,  141,  142,   56,  143,  140,  144,
      145,   56,   56,   57,  146,  143,  147,   57,  148,  149,
      150,  152,  151,   57,  153,  154,   57,  155,  154,   57,
      149,  156,  157,   57,    0,    0,  158,  159,  160,  250,
       57,  252,    0,    0,   57,    0,  149,  173,  152,  158,
       57,  153,  154,   57,  155,  154,   57,  149,  156,  157,
       57,   60,   60,  158,  159,  160,  250,  173,  252,   60,

       60,  174,  174,    0,  173,   60,  158,  253,    0,  256,
      175,   60,    0,  257,    0,    0,    0,  177,   60,   60,
      177,  177,  174,    0,  173,  175,   60,   60,  174,  174,
      175,  180,   60,    0,  253,  176,  256,  175,   60,   65,
      257,  177,  176,   65,  177,  258,  260,  177,  177,  174,
      176,  180,  175,   65,  178,  176,  178,  175,  180,   65,
       65,    0,  176,   65,    0,    0,   65,    0,  177,  176,
       65,  261,  258,  260,  179,  179,  178,  176,  180,    0,
       65,  178,  176,  178,    0,  184,   65,   65,  203,  179,
       65,   66,   66,    0,  179,  184,  262,    0,  261,    0,

       66,  179,  179,  178,   66,  184,  181,   66,  203,  263,
        0,   66,  184,  181,    0,  203,  179,    0,   66,   66,
      181,  179,  184,  262,  182,  185,  181,   66,  182,    0,
        0,   66,  184,  181,   66,  203,  263,  183,   66,   67,
      181,  208,  185,   67,  183,  185,  183,  181,  182,  264,
       67,  182,  185,  181,    0,  182,   67,  183,  266,  186,
        0,  208,  189,   67,  183,    0,   67,  188,  208,  185,
       67,  183,  185,  183,  186,  182,  264,   67,  189,  186,
      188,  188,  189,   67,  183,  266,  186,  188,  208,  189,
       67,   70,  190,   70,  188,  267,   70,  191,    0,    0,

      268,  186,  190,   70,   70,  189,  186,  188,  188,  189,
        0,  191,  190,   70,  188,    0,    0,  191,   70,  190,
       70,    0,  267,   70,  191,  192,  192,  268,    0,  190,
       70,   70,  193,  259,  193,  259,  195,  196,  191,  190,
       70,   71,   71,  195,  191,   71,  192,    0,   71,   71,
      196,    0,  192,  192,  193,   71,  195,  196,   71,  193,
      259,  193,  259,  195,  196,   71,    0,  198,   71,   71,
      195,    0,   71,  192,  198,   71,   71,  196,  197,  199,
        0,  193,   71,  195,  196,   71,    0,  198,  197,  199,
      200,  219,   71,   72,  198,    0,  270,  271,  197,  199,

      200,  198,   72,  272,   72,  197,  199,   72,  212,    0,
      200,  219,    0,   72,  198,  197,  199,  200,  219,    0,
       72,  212,  201,  270,  271,  197,  199,  200,  212,   72,
      272,   72,    0,  273,   72,  212,  201,  200,  219,  201,
       72,  187,  201,    0,  202,  187,  187,  206,  212,  201,
      204,    0,  187,  202,  274,  212,  206,  275,  202,  187,
      273,  204,  277,  201,  202,  187,  201,  206,  187,  201,
      204,  202,  187,  187,  206,    0,  278,  204,  207,  187,
      202,  274,  207,  206,  275,  202,  187,  213,  204,  277,
      279,  202,  187,  194,  206,  194,  213,  204,  207,  194,

        0,  209,  209,  278,  210,  207,  194,  213,  280,  207,
      210,    0,  210,    0,  213,  194,    0,  279,    0,  281,
      194,  209,  194,  213,  210,  207,  194,  236,  209,  209,
      214,  210,    0,  194,  213,  280,  211,  210,  211,  210,
      211,  215,  194,  205,  205,  214,  281,  236,  209,  282,
      214,  210,    0,  205,  236,  216,  215,  214,  205,  205,
      211,  215,  216,  211,  205,  211,    0,  211,  215,  217,
      205,  205,  214,  217,  236,  216,  282,  214,  218,  218,
      205,    0,  216,  215,  221,  205,  205,  211,  215,  216,
      222,  205,  284,  217,  220,  220,  217,    0,  218,  221,

      217,  269,  216,  222,  221,  218,  218,    0,  223,  224,
      222,  221,  223,  224,  225,  220,  269,  222,  225,  284,
      217,  220,  220,    0,  226,  218,  221,  285,  269,  224,
      222,  221,  223,  226,  225,  223,  224,  222,  226,  223,
      224,  225,  220,  269,  226,  225,  227,  228,  227,    0,
      228,  226,  230,    0,  285,  286,  224,    0,  287,  223,
      226,  225,  230,  229,    0,  226,  227,  228,  231,  288,
      229,  226,  230,  227,  228,  227,  232,  228,  229,  230,
      232,  231,  286,  229,  234,  287,  289,    0,  231,  230,
      229,  234,  290,  227,  228,  231,  288,  229,  233,  230,

      232,  233,    0,  232,  234,  229,    0,  232,  231,  237,
      229,  234,  238,  289,  235,  231,  291,  237,  234,  290,
        0,  233,  235,  238,    0,  233,  239,  232,  233,  237,
      292,  234,  238,  235,  235,    0,  237,  241,  241,  238,
        0,  235,  239,  291,  237,    0,  239,  240,  233,  235,
      238,  240,  245,  239,  240,    0,  237,  292,  241,  238,
      235,  235,  242,  243,  241,  241,  242,  240,    0,  239,
      243,  244,  245,  239,  240,  293,  294,  295,  240,  245,
      246,  240,  242,  243,  244,  241,  296,  297,  298,  242,
      243,  244,  300,  242,  240,  246,  296,  243,  244,  245,

      246,  301,  293,  294,  295,  302,  303,  246,  304,  242,
      243,  244,  305,  296,  297,  298,  306,  307,  244,  300,
      309,  310,  246,  296,  311,  312,  313,  246,  301,  315,
      314,  316,  302,  303,  317,  304,  318,  319,  320,  305,
      321,  322,  323,  306,  307,  325,  326,  309,  310,  314,
      327,  311,  312,  313,  328,  330,  315,  314,  316,  331,
      332,  317,  333,  318,  319,  320,  335,  321,  322,  323,
      337,  338,  325,  326,  339,  340,  314,  327,  336,  341,
      336,  328,  330,  342,  343,  344,  331,  332,  343,  333,
        0,    0,    0,  335,  347,    0,  348,  337,  338,  349,

      350,  339,  340,  443,    0,  336,  341,  336,  352,  353,
      342,  343,  344,  355,  347,  343,  348,  351,  356,  349,
      350,  347,  354,  348,  351,  356,  349,  350,  352,  353,
      443,  355,  354,  355,    0,  352,  353,  351,  356,    0,
      355,  347,  354,  348,  351,  356,  349,  350,  357,  354,
      357,  351,  356,  358,    0,  352,  353,    0,  355,  354,
      355,  360,  359,  361,  351,  356,  358,  361,    0,  354,
      357,  362,  363,  358,    0,  357,  360,  357,  359,    0,
      358,  360,  359,    0,  364,  362,  444,  361,  360,  359,
      361,  362,  363,  358,  361,  365,    0,  357,  362,  363,

      358,  367,  365,  360,  364,  359,  366,  369,  360,  359,
      366,  364,  362,  444,  361,  365,  367,    0,  362,  363,
      370,  367,  365,  368,  373,  368,  374,  369,  367,  365,
      366,  364,    0,  366,  369,  370,  371,  366,  372,  371,
      370,  376,  365,  367,  373,  368,  374,  370,  367,  372,
      368,  373,  368,  374,  369,  445,  375,  366,  372,  371,
      375,  376,  370,  371,  378,  372,  371,  370,  376,  380,
        0,  373,  368,  374,  379,  377,  372,  377,  378,  381,
      375,  379,  445,  375,  378,  372,  371,  375,  376,  380,
      382,  378,  384,  383,  379,  384,  380,  377,  382,  381,

      383,  379,  377,    0,  377,  378,  381,  375,  379,  446,
      382,  378,  385,  383,  387,  384,  380,  382,  387,  384,
      383,  379,  384,    0,  377,  382,  381,  383,  385,  388,
      386,  389,  385,  386,  387,  447,  446,  382,  449,  385,
      383,  387,  384,  390,  388,  387,  389,  391,  392,  388,
      386,  389,  393,  390,    0,  385,  388,  386,  389,  385,
      386,  387,  447,  390,    0,  449,  395,  391,  392,  397,
      390,  388,  393,  389,  391,  392,  388,  386,  389,  393,
      390,  394,  395,  396,  399,  398,  395,    0,    0,  397,
      390,  394,  396,  395,  391,  392,  397,    0,    0,  393,

      398,  394,  400,  396,  399,  398,  400,  452,  394,  395,
      396,  399,  398,  395,  401,  401,  397,    0,  394,  396,
      402,    0,  400,  403,  402,  403,    0,  398,  394,  400,
      396,  399,  398,  400,  452,  401,  406,  404,  405,  407,
      410,  401,  401,  403,  402,    0,  407,  402,  408,  400,
      403,  402,  403,  404,  405,    0,  406,  404,  405,  407,
      410,  408,  401,  406,  404,  405,  407,  410,  408,    0,
      403,  402,  411,  407,  412,  408,  409,    0,  412,    0,
      404,  405,  413,  406,  404,  405,  407,  410,  408,  453,
      409,  413,  411,  412,  454,  408,  409,    0,  412,  411,

        0,  412,  413,  409,  414,  412,  415,  416,  417,  413,
      419,    0,  417,  419,  415,  414,  453,  409,  413,  411,
      412,  454,  416,  409,  414,  412,  415,  416,  418,  413,
      419,  414,  417,  415,  416,  417,  420,  419,  421,  417,
      419,  415,  414,  418,  422,    0,  424,  425,  418,  416,
      455,  414,    0,  415,  416,  418,  420,  419,  421,  417,
      423,  424,  425,  420,  422,  421,  424,  425,    0,    0,
      418,  422,  426,  424,  425,  418,  427,  455,  423,  426,
      423,  430,  429,  420,  428,  421,  457,  423,  424,  425,
      430,  422,  426,  424,  425,  428,  427,  429,  431,  426,

      432,  430,  429,  427,  428,  423,  426,  423,  430,  429,
      436,  428,  433,  457,  436,  458,  459,  430,  431,  426,
      432,  433,  428,  427,  429,  431,  434,  432,  430,  429,
      435,  428,  433,    0,  436,  437,  434,  436,  434,  433,
      435,  436,  458,  459,  437,  431,  434,  432,  433,    0,
      435,    0,  438,  434,    0,  437,  439,  435,  460,  433,
      440,  436,  437,  434,  462,  434,    0,  435,  438,  463,
        0,  437,  438,  434,  439,  440,  439,  435,  442,  438,
      440,  442,  437,  439,  441,  460,  464,  440,  467,  468,
      469,  462,  470,  441,  471,  438,  463,  441,  442,  438,

      475,  439,  440,  439,  441,  442,  476,  440,  442,  478,
      480,  441,  481,  464,  482,  467,  468,  469,  483,  470,
      441,  471,  484,  485,  441,  442,  487,  475,  491,  493,
      494,  441,  495,  476,  485,  496,  478,  480,  498,  481,
      499,  482,  500,  501,  502,  483,  505,  506,  508,  484,
      485,  509,  510,  487,  511,  491,  493,  494,  512,  495,
      514,  485,  496,  515,  516,  498,  517,  499,  520,  500,
      501,  502,  521,  505,  506,  508,  522,  523,  509,  510,
      524,  511,  525,  526,  527,  512,  529,  514,  531,    0,
      515,  516,  533,  517,    0,  520,  535,  625,  537,  521,

      538,  534,  539,  522,  523,  533,  539,  524,  626,  525,
      526,  527,  533,  529,  534,  531,  535,  536,  537,  533,
      538,  534,  540,  535,  625,  537,  539,  538,  534,  539,
      536,  541,  533,  539,  627,  626,    0,  536,    0,  533,
      544,  534,  540,  535,  536,  537,  542,  538,  534,  540,
      543,  541,    0,  539,  542,  544,  546,  536,  541,    0,
      544,  627,  628,  543,  536,  545,  542,  544,  547,  540,
      543,  549,    0,  542,    0,  547,  546,  543,  541,  545,
      548,  542,  544,  546,  551,  545,  549,  544,  547,  628,
      543,  549,  545,  542,    0,  547,  548,  543,  549,  555,

      548,  550,  547,  546,  551,  550,  545,  548,  552,    0,
      552,  551,  545,  549,  554,  547,  553,    0,  549,  555,
      553,  554,  556,  548,  629,  550,  555,  548,  550,    0,
      552,  551,  550,  557,  554,  552,  553,  552,  559,  558,
        0,  554,  556,  553,  557,    0,  555,  553,  554,  556,
      558,  629,  550,  557,  559,  560,  562,  552,  559,  558,
      557,  554,    0,  553,  561,  559,  558,  563,  561,  556,
      560,  557,  564,  566,  565,  560,  562,  558,  565,  630,
      557,  559,  560,  562,  566,  559,  558,  563,  561,  567,
      569,  561,  564,  566,  563,  561,    0,  560,  565,  564,

      566,  565,  560,  562,  568,  565,  630,    0,  570,  567,
      569,  566,    0,  568,  563,  561,  567,  569,  570,  564,
      566,  571,    0,  572,  568,  565,  573,  631,  570,  633,
        0,  568,  576,    0,  571,  570,  567,  569,    0,  573,
      568,  571,  572,  572,  574,  570,  573,  575,  571,  575,
      572,  568,  576,  573,  631,  570,  633,  574,  577,  576,
      575,  571,  578,  579,  574,  577,  573,  575,  571,  572,
      572,  574,    0,  573,  575,  580,  575,  582,  577,  576,
      584,  581,  578,  579,  574,  577,  583,  575,    0,  578,
      579,  574,  577,  583,  575,  580,  581,  582,  585,  587,

      584,  581,  580,  634,  582,  577,  583,  584,  581,  578,
      579,  589,  585,  583,    0,  588,  586,  588,  585,  587,
      583,  590,  580,  581,  582,  585,  587,  584,  581,  586,
      634,  589,  593,  583,  590,  594,  586,  588,  589,  585,
      591,  590,  588,  586,  588,  585,  587,  595,  590,  592,
      635,  595,  593,  591,    0,  594,  586,  592,  589,  593,
      591,  590,  594,  586,  588,  597,  596,  591,  590,  592,
      596,  595,    0,    0,  595,  598,  592,  635,  595,  593,
      591,  599,  594,  598,  592,  597,  603,  591,    0,  600,
      596,  601,  597,  596,  599,  598,  592,  596,  595,  601,

      604,  599,  598,  602,  600,  602,  603,    0,  599,  600,
      598,  601,  597,  603,  606,  605,  600,  596,  601,  605,
      604,  599,  598,  608,  609,  602,  601,  604,  599,  607,
      602,  600,  602,  603,  606,  605,  600,  637,  601,  607,
      610,  606,  605,  608,  609,  638,  605,  604,    0,  607,
      608,  609,  602,  611,  610,  611,  607,  613,  639,  612,
      610,  606,  605,  615,  637,  614,  607,  610,  612,  614,
      608,  609,  638,  613,  617,  611,  607,  613,  615,  612,
      611,  610,  611,  615,  613,  639,  612,  610,  618,  614,
      615,  616,  614,  616,  617,  612,  614,  619,  640,  620,

      613,  617,  611,  621,  613,  615,  612,  622,  618,  641,
      615,  616,  642,  619,  643,  618,  614,  619,  616,  620,
      616,  617,  644,  621,  619,  640,  620,  622,  645,  647,
      621,  648,  649,  652,  622,  618,  641,  653,  616,  642,
      619,  643,  654,  655,  619,  660,  620,  661,  662,  644,
      621,  665,  666,  667,  622,  645,  647,  668,  648,  649,
      652,  669,  671,  672,  653,  673,  674,  675,  676,  654,
      655,  677,  660,  678,  661,  662,  680,  681,  665,  666,
      667,  682,  684,  685,  668,  687,  688,  690,  669,  671,
      672,  691,  673,  674,  675,  676,  689,    0,  677,  695,

      678,  692,  692,  680,  681,  687,  688,  690,  682,  684,
      685,  691,  687,  688,  690,  693,  689,  689,  691,  695,
      694,  696,  692,  689,  693,  751,  695,    0,  692,  692,
      694,    0,  687,  688,  690,  693,  699,    0,  691,  700,
      694,  696,  693,  689,  689,  697,  695,  694,  696,  692,
      753,  693,  751,  698,  701,  697,  699,  694,  703,  700,
      698,    0,  693,  699,  704,  697,  700,  694,  696,  701,
      702,    0,  697,  698,  701,  710,    0,  753,  703,  702,
      698,  701,  697,  699,  704,  703,  700,  698,  705,  706,
      702,  704,  697,  707,  708,  710,  701,  702,  708,    0,

      698,  701,  710,  705,  706,  703,  702,  707,  705,  706,
        0,  704,  709,  707,  708,  705,  706,  702,  713,  709,
      707,  708,  710,  714,  711,  708,  711,  715,  717,  712,
      705,  706,  709,  713,  707,  705,  706,  716,  713,  709,
      707,  708,  712,  714,  711,  713,  709,  715,  717,  712,
      714,  711,  716,  711,  715,  717,  712,  716,  718,  709,
      713,  719,  720,  721,  716,  713,  722,  723,  719,  712,
      714,  711,  718,  724,  715,  717,  712,  724,  718,  716,
        0,  719,  720,  721,  716,  718,  722,  723,  719,  720,
      721,    0,  726,  722,  723,  719,  727,  724,  725,  718,

      724,  725,  728,    0,  724,  718,  729,  726,  719,  720,
      721,  732,  726,  722,  723,  734,  727,  730,  725,  726,
        0,  754,  728,  727,  724,  725,  729,  731,  725,  728,
      730,  732,  733,  729,  726,  734,  733,  730,  732,  726,
      731,  736,  734,  727,  730,  725,  735,  731,  754,  728,
      735,  738,  733,  729,  731,  738,  736,  730,  732,  733,
      755,  736,  734,  733,  730,  737,  737,  731,  736,    0,
      735,  739,  756,  735,  731,  738,  740,  735,  738,  733,
      741,  743,  738,  736,  744,  739,  737,  755,  736,  740,
      742,  739,  737,  737,  742,  741,  740,  735,  739,  756,

      741,  743,  738,  740,  744,  745,  745,  741,  743,  746,
      747,  744,  739,  737,  742,  749,  740,  742,  739,  749,
      748,  742,  741,  740,  750,  758,  745,  741,  743,  746,
      747,  744,  745,  745,  748,  759,  746,  747,  762,  749,
      748,  742,  749,  766,  750,  768,  749,  748,  771,  774,
      775,  750,  758,  745,  777,  778,  746,  747,  780,  781,
      782,  748,  759,  784,  785,  762,  749,  748,  788,  790,
      766,  750,  768,  791,  792,  771,  774,  775,  797,  798,
      850,  777,  778,  799,  800,  780,  781,  782,  801,  852,
      784,  785,  857,  800,  804,  788,  790,  807,  802,  798,

      791,  792,  803,  799,  800,  797,  798,  850,  801,  803,
      799,  800,  802,  806,  804,  801,  852,  807,  802,  857,
      800,  804,  803,  808,  807,  802,  798,    0,  806,  803,
      799,  800,  805,  806,  805,  801,  803,  810,  811,  802,
      806,  804,  812,  808,  807,  802,  809,  813,  809,  803,
      808,  814,  859,    0,  805,  806,    0,  810,  811,  805,
      806,  805,  812,  815,  810,  811,  816,  813,  809,  812,
      808,  814,  815,  809,  813,  809,  817,  818,  814,  859,
      819,  805,  820,  815,  810,  811,  816,    0,  821,  812,
      815,  822,  823,  816,  813,  809,  817,  818,  814,  815,

      819,  821,  820,  817,  818,  826,  828,  819,  821,  820,
      815,  822,  823,  816,  824,  821,  825,    0,  822,  823,
      825,  824,  827,  817,  818,  826,  828,  819,  821,  820,
      829,  830,  826,  828,  824,  821,  833,  827,  822,  823,
      825,  824,  827,  825,  831,  832,  831,  825,  824,  827,
      829,  830,  826,  828,  834,  835,  833,  829,  830,  832,
      836,  824,  835,  833,  827,  832,  831,  825,  860,  827,
      863,  831,  832,  831,  834,  835,  839,  829,  830,  840,
      836,  834,  835,  833,  837,  841,  832,  836,  837,  835,
      838,  839,  832,  831,  838,  860,  839,  863,  866,  840,

      842,  834,  835,  839,  843,  841,  840,  836,  837,  844,
      867,  837,  841,  868,  838,  837,  844,  838,  839,  870,
      842,  838,  871,  839,  843,  866,  840,  842,  872,  844,
      873,  843,  841,  874,  875,  837,  844,  867,  875,  870,
      868,  838,  871,  844,  876,    0,  870,  842,  872,  871,
      873,  843,  877,  874,  878,  872,  844,  873,  875,    0,
      874,  875,  879,  880,  876,  875,  870,  877,  881,  871,
        0,  876,  877,  883,  878,  872,  882,  873,  882,  877,
      874,  878,  879,  880,  884,  875,  885,  886,  881,  879,
      880,  876,  887,  883,  877,  881,  889,  884,  882,  877,

      883,  878,  888,  882,  884,  882,  885,  886,  890,  879,
      880,  884,  887,  885,  886,  881,  889,  888,  892,  887,
      883,  893,  888,  889,  884,  882,  892,  891,  890,  888,
      894,  884,  895,  885,  886,  890,  897,  899,  892,  887,
      891,  893,  901,  889,  888,  892,  902,  891,  893,  888,
      894,  904,  905,  892,  891,  890,  907,  894,    0,  895,
      906,  913,  909,  897,  899,  892,  904,  891,  893,  901,
      910,  904,  905,  902,  891,  906,  907,  894,  904,  905,
      906,  908,  909,  907,  911,  912,  915,  906,  913,  909,
      910,    0,    0,  904,  908,  911,  918,  910,  904,  905,

      919,  908,  906,  907,  911,  912,  921,  906,  908,  909,
      920,  911,  912,  915,  922,  925,  918,  910,  926,    0,
      919,  908,  911,  918,  920,    0,  921,  919,  908,    0,
      920,  911,  912,  921,  922,  925,    0,  920,  926,    0,
        0,  922,  925,  918,    0,  926,    0,  919,    0,    0,
        0,  920,    0,  921,    0,    0,    0,  920,    0,    0,
        0,  922,  925,    0,    0,  926,  928,    0,    0,  928,
      929,    0,  929,  929,  931,    0,  931,  931,  932,    0,
      932,  932,  933,    0,  933,  933,  934,    0,  934,  934,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1604 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1852 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 928 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 927 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 127:
#line 185 "flex_lexer.l"
case 128:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2621 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 928 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 928 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 927);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 215 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
