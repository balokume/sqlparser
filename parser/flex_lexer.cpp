#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[932] =
    {   0,
        0,    0,    2,    2,  136,  134,    4,    4,  134,  127,
      134,  127,  127,  130,  127,  127,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
        2,    2,    3,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,    0,    0,  133,    1,
      129,  128,  130,  125,  124,  126,  132,  132,  132,  132,
      132,  113,  132,  114,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  115,  132,  116,  117,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  118,  119,  120,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  121,  132,  132,  132,  132,  132,  132,  132,
      132,    2,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  131,  128,
       99,  132,  100,  132,  132,  101,  102,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  103,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  104,  132,  132,
      132,  132,  132,  132,  105,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  106,  132,  132,

      107,  132,  132,  132,  132,  132,  132,  132,  132,  108,
      132,  132,  109,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  110,  132,  132,  132,  123,
      132,  111,  132,  132,  132,  132,  112,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  132,  132,  132,  132,
      132,   72,  132,   73,   93,  132,  132,  132,  132,   74,
      132,  132,  132,  132,   75,  132,  132,  132,   76,   77,
      132,  132,  132,  132,  132,   78,   79,   80,  132,  132,
       81,  132,   82,  132,  132,  132,  132,  132,  132,   83,
      132,   84,   85,   86,  132,   87,  132,  132,  132,  132,

       88,  132,  132,  132,  132,  132,   89,   90,  132,  132,
      122,  132,  132,  132,  132,  132,   91,  132,  132,  132,
      132,   92,   94,   95,  132,  132,  132,  132,  132,  132,
      132,   96,  132,   97,  132,   98,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   54,   55,  132,  132,
      132,  132,  132,  132,  132,   56,  132,  132,  132,   57,
      132,  132,  132,  132,  132,  132,  132,  132,  132,   58,
      132,  132,  132,   59,   60,  132,  132,  132,  132,   61,
       62,   63,   64,  132,  132,  132,   65,   66,  132,  132,
      132,  132,  132,   67,  132,  132,  132,  132,   68,  132,
      132,  132,   69,  132,  132,  132,   70,  132,  132,   71,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  132,   30,  132,  132,   31,  132,
       32,  132,  132,   33,   34,  132,   35,   36,   37,  132,
       38,  132,   39,   40,  132,   41,   42,  132,  132,   43,
      132,  132,   44,  132,  132,  132,   45,  132,   46,   47,
       48,  132,   49,  132,  132,  132,   50,   51,   52,   53,

      132,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  132,   19,  132,   20,   21,   22,   23,
      132,   24,  132,  132,   25,   26,  132,   27,   28,  132,
      132,  132,   29,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  132,   10,

      132,   11,  132,   12,  132,  132,   13,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  132,    7,  132,    8,
        9,    2,    2,    2,    2,    2,    5,    6,    2,    2,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    6,    5,
        5,    5,    5,    5,    7,    8,    5,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    5,    5,   10,
       11,   12,    5,    1,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
        1,    1,    1,    5,   39,    1,   40,   41,   42,   43,

       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,    5,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[939] =
    {   0,
        0,    0,   65,    0,  407, 3727,  129,  131,    0, 3727,
      400,  396,  346,  127,  126,  343,  123,  123,  175,  221,
      119,  132,  118,  131,  165,  119,  134,  176,  177,  213,
      219,  226,  124,  183,  269,  317,  232,  188,  223,    0,
        0,  161,  205,  347,    0,  342,  336,  331,  203,  202,
      308,  374,  432,  484,  536,  584,  632,  264,  305,  680,
      319,  218,  387,  351,  732,  780,  832,  333,  409,  882,
      934,  982,  435,  441,  263,  289,  313,  299, 3727, 3727,
      286,  250,  290, 3727, 3727, 3727,    0,  142,  209,  282,
      319,  278,  432,    0,  336,  299,  365,  438,  291,  364,

      482,  371,  387,  427,  428,  444,  448,  495,  442,  437,
      444,  456,  475,  476,  486,  525,    0,  480,  529,  483,
      498,  488,  514,  539,  552,  524,  532,  536,  537,  546,
      558,  557,    0,  561,  547,  556,  586,  586,  584,  583,
      592,  592,  592,  590,  588,  606,  598,  611,  603,  604,
      614,  608,  627,  624,  640,  647,  645,  644,  655,  656,
      642,    0,  301,  253,  248,    0,    0,  210,  207,  301,
        0,    0,    0,  666,  691,  677,  726,  744,  731,  782,
      703,  799,  765,  834,  774,  830,  822, 1034,  876,  867,
      895,  886,  936,  901, 1084,  831,  939,  940,  978,  970,

      984,  999, 1024,  968, 1036, 1133, 1049, 1066, 1032, 1072,
     1108, 1129, 1090, 1157, 1158, 1167, 1161, 1183, 1144, 1170,
     1199, 1196, 1202, 1224, 1228, 1233, 1236, 1265, 1254, 1282,
     1266, 1278, 1299, 1288, 1290, 1300, 1330, 1321, 1331, 1332,
     1340, 1381, 1364, 1369, 1375, 1386, 1394, 1403, 3727,  190,
        0,  658,    0,  660,  691,    0,    0,  699,  692,  705,
     1080,  707,  719,  730,  767,  763,    0,  787,  791,  821,
     1123,  837,  836,  833,  887,  880,  897,    0,  949,  946,
      951,  986,  994, 1010,    0, 1042, 1057, 1070, 1096, 1121,
     1132, 1147, 1171, 1197, 1212, 1231, 1235, 1397, 1225, 1243,

        0, 1291, 1328, 1340, 1346, 1357, 1390, 1377, 1382,    0,
     1397, 1392, 1396, 1417, 1427, 1433, 1426, 1425, 1430, 1424,
     1444, 1427, 1440, 1446, 1447,    0, 1431, 1436, 1437,    0,
     1446,    0, 1444, 1442, 1449, 1459,    0, 1451, 1471, 1451,
     1468, 1459, 1455, 1454, 1462, 1480, 1487,    0,  152, 1492,
     1494, 1502, 1503, 1506, 1505, 1507, 1518, 1524, 1536, 1537,
     1546, 1558, 1560, 1572, 1576, 1561, 1577, 1591, 1610, 1594,
     1615, 1600, 1628, 1629, 1634, 1612, 1631, 1664, 1646, 1665,
     1668, 1679, 1669, 1674, 1697, 1700, 1722, 1698, 1728, 1733,
     1723, 1736, 1752, 1683, 1739, 1754, 1757, 1771, 1773, 1768,

     1790, 1776, 1802, 1808, 1816, 1811, 1825, 1826, 1824, 1847,
     1857, 1862, 1859, 1860, 1895, 1892, 1900, 1905, 1914, 1930,
     1916, 1945, 1924, 1935, 1946, 1949, 1959, 1968, 1960, 1978,
     1964, 1970, 1989, 2013, 1999, 2000, 2014, 2018, 2032, 2043,
     2044, 2056, 2067, 2062, 2075, 2078, 1576, 1631, 1630, 1689,
     1708,    0, 1796,    0,    0, 1813, 1843, 1846, 1852,    0,
     1868, 1874, 1881, 2006,    0, 2023, 2020, 2066,    0,    0,
     2063, 2075, 2076, 2078, 2100,    0,    0,    0, 2101, 2095,
        0, 2098,    0, 2100, 2103, 2098, 2105, 2108, 2125,    0,
     2119,    0,    0,    0, 2113,    0, 2122, 2130, 2117, 2119,

        0, 2137, 2136, 2126, 2127, 2133,    0,    0, 2146, 2150,
        0, 2139, 2136, 2135, 2143, 2154,    0, 2160, 2157, 2164,
     2160,    0,    0, 2157, 2174, 2166, 2164, 2185, 2167, 2181,
     2184,    0, 2169,    0, 2186,    0, 2201, 2203, 2195, 2204,
     2200, 2205, 2233, 2218, 2219, 2249, 2254, 2255, 2258, 2259,
     2283, 2271, 2273, 2308, 2289, 2313, 2319, 2322, 2307, 2321,
     2332, 2347, 2337, 2361, 2375, 2345, 2362, 2363, 2377, 2396,
     2386, 2405, 2391, 2417, 2399, 2401, 2429, 2440, 2455, 2431,
     2459, 2445, 2450, 2461, 2474, 2463, 2491, 2485, 2499, 2504,
     2500, 2509, 2503, 2515, 2539, 2533, 2537, 2543, 2549, 2558,

     2567, 2575, 2588, 2577, 2591, 2573, 2589, 2603, 2613, 2607,
     2621, 2612, 2625, 2629, 2653, 2655, 2647, 2661, 2677, 2669,
     2666, 2679, 2685, 2683, 2687, 2695,    0,    0, 2213, 2235,
     2236, 2238, 2259, 2314, 2435,    0, 2699, 2704, 2717,    0,
     2703, 2711, 2721, 2723, 2710, 2712, 2715, 2727, 2726,    0,
     2733, 2724, 2724,    0,    0, 2725, 2741, 2729, 2739,    0,
        0,    0,    0, 2753, 2748, 2738,    0,    0, 2755, 2744,
     2746, 2761, 2759,    0, 2769, 2754, 2772, 2776, 2760, 2762,
     2762, 2783,    0, 2781, 2784, 2785,    0, 2773, 2793,    0,
     2791, 2793, 2803, 2795, 2805, 2827, 2819, 2821, 2809, 2817,

     2849, 2860, 2843, 2845, 2862, 2875, 2861, 2871, 2885, 2899,
     2883, 2913, 2916, 2901, 2929, 2925, 2939, 2915, 2937, 2953,
     2947, 2955, 2970, 2951, 2979, 2983, 2985, 2991, 2989, 2993,
     3001, 3007, 3022, 3024, 3033, 3023, 3025, 3039, 3061, 3047,
     3076, 3087, 3065, 3077, 3078, 3095, 3099, 3101, 3130, 3111,
     3113, 3127, 3139, 3116, 2807,    0, 2870, 2893, 2920, 2981,
        0, 3033, 3026,    0,    0, 3057,    0,    0,    0, 3137,
        0, 3135,    0,    0, 3125,    0,    0, 3136, 3151,    0,
     3145, 3157,    0, 3140, 3161, 3145,    0, 3169, 3155,    0,
        0, 3163,    0, 3177, 3179, 3166,    0,    0,    0,    0,

     3176, 3184, 3185, 3189, 3187, 3199, 3215, 3201, 3239, 3203,
     3224, 3227, 3243, 3233, 3238, 3252, 3255, 3256, 3269, 3257,
     3261, 3267, 3273, 3291, 3297, 3292, 3295, 3306, 3325, 3307,
     3331, 3309, 3323, 3335, 3349, 3357, 3341, 3359, 3360, 3363,
     3385, 3393, 3399, 3375, 3391, 3397, 3401, 3423,    0,    0,
        0,    0,    0, 3194,    0, 3178,    0,    0,    0,    0,
     3303,    0, 3352, 3400,    0,    0, 3394,    0,    0, 3402,
     3417, 3429,    0, 3431, 3433, 3434, 3435, 3439, 3449, 3447,
     3464, 3463, 3465, 3468, 3473, 3477, 3487, 3503, 3498, 3499,
     3501, 3517, 3509, 3513, 3522, 3531, 3527, 3541, 3523,    0,

     3537,    0, 3540,    0, 3535, 3546,    0, 3570, 3567, 3571,
     3572, 3576, 3573, 3575, 3604, 3581, 3583,    0, 3591,    0,
        0, 3606, 3607, 3621, 3609, 3625,    0,    0, 3630, 3638,
     3727, 3702, 3706,  152, 3710, 3714, 3718, 3722
    } ;

static yyconst flex_int16_t yy_def[939] =
    {   0,
      931,    1,  931,    3,  931,  931,  931,  931,  932,  931,
      933,  931,  931,  931,  931,  931,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      935,  935,  931,  936,  935,  937,  935,  935,  935,  935,
      935,  938,  938,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  931,  932,  933,  931,  931,
      931,  931,  931,  931,  931,  931,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  935,  935,  936,  937,  935,  935,  935,  935,  935,
      935,  935,  935,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  931,  931,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  935,  935,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,

      934,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  934,  934,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,  934,  934,

      934,  934,  934,  934,  934,  934,  934,   53,   53,   53,
       53,   53,   53,   53,   53,   53,  934,  934,  934,  934,
      934,   53,   53,   53,   53,   53,  934,  934,   53,   53,
        0,  931,  931,  931,  931,  931,  931,  931
    } ;

static yyconst flex_int16_t yy_nxt[3793] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       10,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   40,   40,    6,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   40,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   45,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,

       75,   75,   75,   41,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   75,   75,
       76,   76,   76,   76,   82,   83,   84,   85,   88,   93,
       89,  113,  105,  115,  106,  121,   90,  114,   91,  107,
      122,  116,  109,   92,  108,   87,  139,  251,  110,   94,
      349,  111,  163,   76,  112,   88,   93,   89,  113,  105,
      115,  106,  121,   90,  114,   91,  107,  122,  116,  109,
       92,  108,  117,  139,  251,  110,   94,   95,  111,  118,
      119,  112,  123,  126,   96,  120,  124,  127,  250,  140,

      158,   97,  125,  141,   98,   99,   76,   76,  159,  117,
      169,  170,  171,  172,   95,  349,  118,  119,  168,  123,
      126,   96,  120,  124,  127,  128,  140,  158,   97,  125,
      141,   98,   99,  100,  209,  159,  132,  101,  136,  129,
      252,  102,  160,  161,  133,  130,  131,  103,  134,  137,
      104,  135,  128,  166,  174,  138,  348,  155,  250,  156,
      100,  209,  157,  132,  101,  136,  129,  252,  102,  160,
      161,  133,  130,  131,  103,  134,  137,  104,  135,  174,
      174,  174,  138,  142,  155,  143,  156,  200,  144,  157,
       76,   76,  257,  201,   81,  145,  146,   82,   83,  174,

      174,  147,  163,   76,   79,  253,  174,  174,  169,  170,
      142,  262,  143,  254,  200,  144,  249,  202,  173,  257,
      201,  174,  145,  146,  267,  203,  174,  174,  147,  148,
      149,  255,  253,  150,  256,  174,  151,  152,  262,  168,
      254,  174,  167,  153,  202,  208,  154,  166,  174,  174,
      162,  267,  203,   86,   81,  174,  148,  149,  255,  260,
      150,  256,  174,  151,  152,  226,  261,  213,  174,  174,
      153,  214,  208,  154,  162,  162,  174,  162,  162,  162,
      162,  162,  174,  162,  162,  162,  260,  174,  263,  175,
      264,  176,  226,  261,  213,  268,  174,  177,  214,  178,

      273,  274,   80,  210,  179,   79,  931,  211,  931,  931,
      931,  931,  931,  212,  174,  263,  175,  264,  176,  275,
      931,  931,  268,  174,  177,  227,  178,  273,  274,  228,
      210,  179,  162,  162,  211,  162,  162,  162,  162,  162,
      212,  162,  162,  162,  931,  174,  275,  245,  180,  258,
      174,  174,  227,  276,  265,  246,  228,  174,  277,  278,
      247,  248,  279,  259,  266,  284,  285,  931,  181,  931,
      286,  174,  174,  931,  245,  180,  258,  174,  174,  287,
      276,  265,  246,  931,  174,  277,  278,  247,  248,  279,
      259,  266,  284,  285,  269,  181,  182,  286,  174,  270,

      174,  288,  289,  183,  174,  271,  287,  294,  299,  280,
      184,  281,  272,  185,  186,  282,  290,  931,  300,  291,
      174,  269,  283,  182,  301,  931,  270,  174,  288,  289,
      183,  302,  271,  931,  294,  299,  280,  184,  281,  272,
      185,  186,  282,  290,  295,  300,  291,  174,  187,  283,
      292,  301,  188,  307,  296,  293,  189,  308,  302,  297,
      298,  303,  190,  304,  305,  191,  306,  309,  310,  311,
      312,  295,  174,  931,  313,  187,  314,  292,  315,  188,
      307,  296,  293,  189,  308,  316,  297,  298,  303,  190,
      304,  305,  191,  306,  309,  310,  311,  312,  317,  174,

      174,  313,  318,  314,  320,  315,  319,  192,  321,  193,
      323,  324,  316,  322,  194,  325,  327,  328,  329,  195,
      174,  931,  330,  326,  331,  317,  332,  174,  333,  318,
      335,  320,  336,  319,  192,  321,  193,  323,  324,  334,
      322,  194,  325,  327,  328,  329,  195,  174,  174,  330,
      326,  331,  196,  332,  337,  333,  338,  335,  197,  336,
      339,  198,  341,  340,  199,  342,  334,  343,  174,  931,
      931,  344,  346,  347,  447,  174,  448,  931,  931,  196,
      931,  337,  174,  338,  345,  197,  931,  339,  198,  341,
      340,  199,  342,  174,  343,  174,  174,  204,  344,  346,

      347,  447,  174,  448,  205,  206,  350,  174,  351,  174,
      207,  345,  931,  174,  449,  931,  174,  931,  931,  174,
      174,  931,  931,  174,  204,  450,  451,  174,  452,  174,
      931,  205,  206,  350,  174,  351,  455,  207,  931,  174,
      174,  449,  174,  174,  215,  356,  174,  174,  174,  352,
      931,  456,  450,  451,  174,  452,  354,  353,  216,  355,
      174,  457,  174,  455,  217,  218,  174,  174,  174,  174,
      931,  215,  356,  931,  174,  174,  352,  361,  456,  458,
      174,  174,  931,  354,  353,  216,  355,  174,  457,  174,
      364,  217,  218,  459,  174,  174,  174,  219,  174,  357,

      365,  174,  931,  460,  361,  220,  458,  174,  174,  221,
      174,  931,  222,  358,  461,  174,  174,  364,  174,  931,
      459,  931,  359,  174,  219,  174,  357,  365,  174,  360,
      460,  931,  220,  462,  931,  174,  221,  174,  174,  222,
      358,  461,  174,  174,  223,  174,  174,  174,  174,  359,
      174,  465,  466,  367,  383,  224,  360,  362,  174,  363,
      462,  225,  174,  366,  467,  174,  174,  174,  174,  931,
      174,  223,  931,  174,  174,  174,  931,  174,  465,  466,
      367,  383,  224,  174,  362,  174,  363,  931,  225,  931,
      366,  467,  174,  174,  174,  174,  229,  174,  230,  374,

      468,  231,  174,  174,  931,  372,  373,  469,  232,  233,
      174,  174,  174,  470,  234,  378,  376,  174,  174,  174,
      931,  375,  174,  229,  931,  230,  374,  468,  231,  174,
      174,  174,  372,  373,  469,  232,  233,  174,  174,  174,
      470,  234,  378,  376,  174,  174,  235,  236,  375,  174,
      237,  377,  174,  238,  239,  174,  174,  931,  174,  931,
      240,  471,  472,  241,  174,  473,  385,  931,  384,  931,
      174,  931,  174,  235,  236,  174,  174,  237,  377,  174,
      238,  239,  174,  174,  174,  931,  174,  240,  471,  472,
      241,  931,  473,  385,  174,  384,  387,  174,  174,  174,

      174,  386,  174,  174,  174,  931,  174,  242,  931,  243,
      388,  174,  244,  174,  174,  174,  474,  475,  174,  931,
      174,  174,  931,  387,  931,  174,  476,  174,  386,  389,
      931,  174,  390,  174,  242,  174,  243,  388,  931,  244,
      174,  174,  174,  474,  475,  174,  368,  174,  174,  391,
      174,  369,  174,  476,  392,  931,  389,  370,  931,  390,
      174,  931,  174,  393,  371,  174,  477,  174,  400,  931,
      174,  931,  174,  368,  398,  174,  391,  174,  369,  174,
      478,  392,  174,  479,  370,  174,  399,  174,  174,  401,
      393,  371,  174,  477,  453,  400,  454,  174,  379,  174,

      380,  398,  174,  931,  381,  931,  174,  478,  174,  174,
      479,  382,  174,  399,  931,  174,  401,  931,  931,  406,
      174,  453,  931,  454,  174,  379,  174,  380,  480,  174,
      402,  381,  403,  174,  931,  174,  931,  931,  382,  463,
      481,  404,  931,  405,  174,  174,  406,  174,  394,  174,
      931,  174,  482,  174,  464,  480,  931,  402,  395,  403,
      174,  412,  931,  396,  397,  174,  463,  481,  404,  174,
      405,  174,  174,  174,  174,  394,  174,  174,  483,  482,
      174,  464,  407,  174,  410,  395,  174,  174,  412,  408,
      396,  397,  174,  174,  174,  411,  174,  174,  409,  174,

      174,  174,  484,  174,  174,  483,  174,  174,  931,  407,
      174,  410,  174,  174,  413,  174,  408,  931,  174,  174,
      174,  174,  411,  485,  174,  409,  174,  414,  486,  484,
      174,  415,  174,  174,  931,  174,  416,  931,  174,  174,
      174,  413,  174,  931,  417,  174,  174,  487,  418,  174,
      485,  488,  174,  419,  414,  486,  931,  491,  415,  174,
      174,  420,  174,  416,  174,  174,  421,  174,  492,  174,
      174,  417,  174,  423,  487,  418,  174,  931,  488,  174,
      419,  174,  174,  422,  491,  931,  931,  174,  420,  931,
      174,  174,  426,  421,  174,  492,  174,  174,  174,  174,

      423,  174,  174,  430,  174,  424,  174,  427,  174,  174,
      422,  428,  429,  425,  174,  174,  174,  174,  174,  426,
      931,  174,  493,  431,  174,  174,  174,  931,  174,  174,
      430,  174,  424,  174,  427,  174,  174,  434,  428,  429,
      425,  174,  174,  174,  494,  174,  174,  174,  174,  493,
      431,  174,  931,  174,  432,  435,  174,  174,  931,  436,
      495,  496,  174,  174,  434,  433,  174,  174,  174,  497,
      931,  494,  437,  174,  174,  174,  174,  931,  931,  440,
      174,  432,  435,  174,  174,  174,  436,  495,  496,  441,
      931,  174,  433,  174,  174,  174,  497,  174,  442,  437,

      174,  438,  443,  174,  439,  174,  440,  174,  498,  499,
      445,  174,  174,  489,  500,  444,  441,  174,  174,  174,
      501,  502,  174,  490,  174,  442,  503,  174,  438,  443,
      174,  439,  174,  504,  446,  498,  499,  445,  174,  174,
      489,  500,  444,  505,  174,  506,  174,  501,  502,  174,
      490,  508,  509,  503,  510,  511,  512,  174,  513,  514,
      504,  446,  515,  516,  507,  517,  174,  518,  519,  520,
      505,  521,  506,  522,  523,  524,  525,  528,  508,  509,
      529,  510,  511,  512,  530,  513,  514,  531,  532,  515,
      516,  507,  517,  533,  518,  519,  520,  526,  521,  527,

      522,  523,  524,  525,  528,  534,  536,  529,  174,  535,
      537,  530,  931,  931,  531,  532,  931,  931,  174,  538,
      533,  174,  174,  174,  526,  931,  527,  931,  174,  539,
      174,  931,  534,  536,  174,  174,  535,  537,  174,  174,
      174,  174,  174,  174,  540,  174,  538,  931,  174,  174,
      174,  543,  174,  544,  174,  174,  539,  174,  541,  542,
      174,  174,  174,  931,  931,  174,  174,  174,  174,  174,
      174,  540,  174,  174,  174,  545,  174,  174,  543,  174,
      544,  174,  174,  931,  548,  541,  542,  174,  174,  174,
      546,  547,  174,  550,  174,  931,  174,  174,  931,  174,

      174,  174,  545,  174,  174,  627,  549,  174,  174,  174,
      553,  548,  174,  174,  551,  174,  556,  546,  547,  174,
      550,  174,  552,  174,  174,  554,  174,  174,  560,  555,
      174,  174,  627,  549,  174,  174,  174,  553,  931,  174,
      174,  551,  558,  556,  174,  174,  174,  174,  174,  552,
      174,  174,  554,  174,  174,  560,  555,  174,  174,  557,
      628,  559,  562,  174,  174,  174,  629,  174,  931,  558,
      174,  174,  174,  174,  174,  174,  561,  174,  174,  563,
      174,  174,  174,  931,  174,  566,  557,  628,  559,  562,
      174,  174,  174,  629,  174,  174,  931,  174,  564,  576,

      174,  174,  565,  561,  174,  174,  563,  174,  174,  174,
      174,  174,  566,  174,  174,  174,  174,  174,  630,  174,
      931,  567,  174,  568,  631,  564,  576,  174,  174,  565,
      570,  174,  174,  174,  174,  569,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  630,  174,  571,  567,  174,
      568,  631,  174,  572,  573,  577,  931,  570,  174,  174,
      174,  174,  569,  174,  174,  174,  174,  574,  174,  174,
      578,  174,  174,  579,  571,  174,  174,  931,  575,  174,
      572,  573,  577,  580,  174,  174,  174,  174,  174,  174,
      174,  174,  584,  174,  574,  174,  174,  578,  582,  174,

      579,  931,  174,  581,  174,  575,  174,  174,  632,  174,
      580,  174,  174,  931,  174,  174,  174,  174,  174,  584,
      174,  583,  585,  586,  174,  582,  174,  174,  587,  588,
      581,  174,  174,  174,  174,  632,  174,  633,  174,  174,
      174,  174,  174,  931,  174,  174,  931,  174,  583,  585,
      586,  174,  174,  174,  174,  587,  588,  589,  590,  174,
      174,  174,  174,  174,  633,  174,  931,  174,  174,  174,
      591,  174,  634,  174,  174,  594,  595,  635,  174,  174,
      931,  931,  636,  174,  589,  590,  592,  174,  174,  174,
      174,  637,  593,  174,  931,  174,  174,  591,  174,  634,

      174,  931,  594,  595,  635,  174,  638,  596,  174,  636,
      174,  174,  639,  592,  931,  931,  174,  598,  637,  593,
      174,  174,  174,  174,  931,  174,  597,  599,  174,  600,
      174,  174,  174,  638,  596,  174,  174,  931,  174,  639,
      605,  174,  602,  174,  598,  601,  174,  603,  174,  931,
      174,  606,  174,  597,  599,  174,  600,  174,  174,  174,
      174,  174,  174,  174,  604,  174,  174,  605,  174,  602,
      931,  174,  601,  174,  603,  174,  174,  174,  606,  174,
      174,  174,  174,  607,  174,  174,  174,  174,  174,  174,
      608,  604,  174,  174,  174,  174,  174,  611,  174,  609,

      174,  610,  174,  174,  174,  174,  174,  174,  174,  174,
      607,  174,  174,  174,  174,  614,  174,  608,  640,  931,
      612,  174,  174,  174,  611,  174,  609,  174,  610,  174,
      174,  174,  174,  174,  174,  174,  174,  641,  613,  615,
      642,  174,  614,  174,  616,  640,  617,  612,  174,  174,
      174,  931,  174,  931,  174,  619,  174,  174,  618,  174,
      174,  174,  174,  174,  641,  613,  615,  642,  174,  620,
      931,  616,  174,  617,  931,  174,  174,  174,  174,  174,
      174,  174,  619,  174,  931,  618,  174,  174,  621,  643,
      644,  174,  174,  623,  174,  174,  620,  626,  174,  174,

      624,  622,  645,  174,  625,  174,  174,  174,  646,  647,
      174,  174,  648,  649,  174,  621,  643,  644,  174,  174,
      623,  174,  650,  651,  626,  174,  652,  624,  622,  645,
      174,  625,  653,  654,  655,  646,  647,  656,  174,  648,
      649,  174,  659,  657,  660,  661,  662,  663,  664,  650,
      651,  665,  666,  652,  658,  667,  668,  669,  670,  653,
      654,  655,  671,  672,  656,  673,  674,  675,  676,  659,
      657,  660,  661,  662,  663,  664,  677,  678,  665,  666,
      679,  658,  667,  668,  669,  670,  680,  681,  682,  671,
      672,  683,  673,  674,  675,  676,  684,  685,  686,  687,

      688,  689,  690,  677,  678,  931,  931,  679,  931,  931,
      931,  174,  931,  680,  681,  682,  695,  174,  683,  174,
      174,  174,  931,  684,  685,  686,  687,  688,  689,  690,
      691,  693,  692,  694,  174,  174,  174,  174,  174,  174,
      174,  174,  931,  695,  174,  696,  174,  174,  174,  174,
      755,  756,  757,  758,  174,  174,  931,  691,  693,  692,
      694,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  696,  697,  174,  174,  174,  755,  756,  757,
      758,  174,  174,  698,  759,  174,  699,  174,  700,  174,
      174,  174,  174,  931,  174,  174,  174,  174,  174,  174,

      697,  174,  174,  702,  703,  174,  701,  174,  931,  174,
      698,  759,  174,  699,  174,  700,  174,  174,  174,  174,
      704,  174,  174,  174,  174,  174,  174,  705,  931,  174,
      702,  703,  174,  701,  174,  174,  174,  174,  174,  706,
      760,  931,  931,  174,  174,  707,  174,  704,  174,  174,
      174,  174,  174,  174,  705,  174,  174,  174,  174,  708,
      931,  174,  174,  174,  174,  174,  706,  760,  174,  710,
      174,  174,  707,  174,  709,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  708,  712,  174,  713,
      174,  174,  711,  174,  931,  174,  710,  174,  174,  174,

      174,  709,  174,  931,  174,  174,  174,  174,  174,  931,
      174,  174,  174,  174,  712,  174,  713,  174,  174,  711,
      174,  174,  174,  714,  174,  174,  174,  174,  717,  174,
      715,  931,  174,  174,  174,  174,  718,  174,  174,  174,
      174,  174,  174,  716,  174,  174,  931,  174,  174,  174,
      714,  761,  931,  174,  174,  717,  174,  715,  719,  174,
      174,  174,  174,  718,  174,  174,  174,  174,  174,  720,
      716,  174,  174,  721,  174,  174,  174,  174,  761,  174,
      174,  174,  723,  174,  722,  719,  174,  931,  174,  931,
      174,  174,  174,  174,  174,  174,  720,  174,  174,  174,

      721,  726,  174,  174,  174,  724,  174,  174,  174,  723,
      174,  722,  931,  174,  725,  174,  174,  174,  174,  730,
      174,  174,  174,  729,  174,  174,  174,  174,  726,  727,
      931,  174,  724,  728,  174,  174,  174,  174,  931,  174,
      174,  725,  174,  174,  731,  174,  730,  174,  174,  174,
      729,  174,  174,  174,  174,  174,  727,  733,  174,  174,
      728,  734,  174,  174,  931,  174,  174,  174,  732,  174,
      735,  731,  174,  174,  174,  174,  174,  931,  174,  174,
      174,  931,  174,  174,  733,  174,  174,  740,  734,  174,
      931,  174,  174,  174,  174,  732,  174,  735,  931,  736,

      174,  174,  174,  174,  174,  174,  174,  174,  738,  174,
      174,  174,  174,  174,  740,  739,  174,  737,  174,  741,
      174,  174,  931,  743,  174,  174,  736,  174,  174,  174,
      174,  174,  174,  742,  174,  738,  174,  174,  174,  174,
      174,  174,  739,  174,  737,  174,  741,  744,  174,  174,
      743,  174,  174,  931,  174,  174,  174,  174,  931,  745,
      742,  174,  931,  174,  174,  174,  174,  746,  174,  174,
      174,  174,  174,  749,  744,  174,  174,  174,  931,  748,
      747,  931,  752,  174,  174,  174,  745,  751,  174,  174,
      174,  174,  174,  174,  746,  174,  174,  174,  174,  174,

      749,  174,  174,  754,  174,  174,  748,  747,  750,  752,
      174,  174,  174,  174,  751,  174,  174,  753,  174,  174,
      174,  174,  174,  174,  174,  762,  174,  763,  174,  174,
      754,  174,  174,  764,  765,  750,  766,  767,  174,  768,
      174,  769,  174,  770,  753,  771,  174,  772,  174,  773,
      174,  774,  762,  775,  763,  776,  777,  778,  174,  779,
      764,  765,  780,  766,  767,  781,  768,  782,  769,  783,
      770,  784,  771,  785,  772,  786,  773,  787,  774,  788,
      775,  789,  776,  777,  778,  790,  779,  791,  792,  780,
      793,  794,  781,  795,  782,  796,  783,  797,  784,  798,

      785,  799,  786,  800,  787,  801,  788,  174,  789,  174,
      931,  803,  790,  931,  791,  792,  931,  793,  794,  174,
      795,  804,  796,  849,  797,  808,  798,  174,  799,  174,
      800,  174,  801,  174,  174,  174,  174,  174,  803,  174,
      802,  174,  805,  174,  806,  174,  174,  807,  804,  931,
      849,  931,  808,  174,  174,  174,  174,  174,  174,  811,
      174,  174,  174,  174,  174,  174,  174,  802,  174,  805,
      174,  806,  174,  931,  807,  809,  174,  814,  174,  174,
      174,  174,  174,  810,  174,  174,  811,  815,  174,  931,
      174,  174,  174,  812,  931,  850,  174,  174,  174,  174,

      813,  174,  809,  174,  814,  174,  174,  174,  174,  851,
      810,  174,  174,  818,  815,  174,  816,  174,  174,  174,
      812,  174,  850,  174,  174,  174,  174,  813,  174,  174,
      817,  174,  174,  819,  174,  174,  851,  174,  174,  820,
      818,  174,  174,  816,  174,  174,  174,  821,  174,  174,
      852,  174,  174,  174,  822,  174,  174,  817,  174,  174,
      819,  174,  174,  825,  174,  174,  820,  174,  174,  174,
      823,  174,  174,  174,  821,  174,  174,  852,  174,  174,
      174,  822,  174,  174,  824,  826,  174,  174,  174,  174,
      825,  174,  174,  827,  174,  174,  174,  823,  174,  174,

      174,  174,  174,  828,  853,  174,  174,  174,  829,  174,
      174,  824,  826,  174,  174,  174,  174,  174,  174,  174,
      827,  174,  174,  174,  830,  174,  174,  174,  174,  174,
      828,  853,  174,  174,  174,  829,  174,  174,  831,  834,
      174,  174,  174,  174,  174,  835,  174,  854,  174,  174,
      174,  830,  174,  832,  174,  174,  174,  855,  174,  174,
      174,  174,  833,  174,  174,  831,  834,  174,  174,  174,
      174,  856,  835,  836,  854,  174,  174,  174,  837,  931,
      832,  174,  174,  174,  855,  174,  174,  174,  174,  833,
      174,  838,  174,  174,  174,  840,  174,  174,  856,  839,

      836,  174,  174,  174,  174,  837,  841,  843,  174,  842,
      174,  174,  174,  174,  174,  174,  931,  844,  838,  174,
      174,  174,  840,  174,  174,  931,  839,  846,  174,  174,
      174,  174,  174,  841,  843,  174,  842,  174,  174,  174,
      174,  174,  174,  174,  844,  845,  174,  174,  931,  174,
      174,  848,  174,  857,  846,  174,  174,  847,  174,  174,
      858,  859,  174,  174,  174,  860,  174,  861,  862,  863,
      174,  864,  845,  174,  174,  174,  174,  865,  848,  174,
      857,  866,  174,  867,  847,  868,  869,  858,  859,  870,
      174,  871,  860,  174,  861,  862,  863,  872,  864,  873,

      874,  174,  174,  876,  865,  174,  899,  931,  866,  900,
      867,  931,  868,  869,  875,  174,  870,  174,  871,  174,
      174,  174,  931,  174,  872,  174,  873,  874,  174,  877,
      876,  174,  174,  899,  880,  174,  900,  174,  878,  174,
      174,  875,  174,  174,  174,  931,  174,  174,  174,  174,
      174,  174,  174,  879,  174,  174,  877,  881,  174,  174,
      174,  880,  174,  174,  174,  878,  174,  174,  174,  174,
      174,  882,  174,  174,  174,  174,  174,  174,  174,  174,
      879,  174,  174,  174,  881,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  883,  174,  174,  174,  882,  174,

      174,  174,  174,  884,  174,  174,  174,  174,  886,  174,
      174,  174,  174,  174,  931,  174,  174,  901,  174,  174,
      174,  883,  174,  174,  174,  890,  885,  174,  174,  887,
      884,  174,  174,  174,  174,  886,  174,  888,  174,  174,
      174,  174,  174,  174,  901,  174,  931,  174,  931,  174,
      174,  174,  890,  885,  174,  174,  887,  174,  174,  891,
      174,  174,  889,  892,  888,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      931,  902,  931,  894,  174,  174,  891,  893,  174,  889,
      892,  174,  174,  174,  174,  174,  174,  895,  174,  174,

      174,  174,  174,  174,  174,  896,  174,  174,  902,  174,
      894,  174,  174,  174,  893,  174,  903,  174,  174,  931,
      174,  174,  174,  174,  895,  904,  174,  174,  174,  174,
      897,  905,  896,  174,  174,  174,  174,  174,  174,  174,
      174,  906,  174,  903,  174,  907,  898,  174,  174,  174,
      174,  174,  904,  931,  174,  174,  174,  897,  905,  174,
      174,  908,  174,  174,  174,  174,  174,  174,  906,  174,
      174,  174,  907,  898,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  931,  908,  174,
      174,  910,  174,  174,  174,  909,  174,  174,  174,  174,

      174,  174,  174,  174,  174,  931,  174,  174,  174,  174,
      174,  174,  174,  174,  912,  174,  174,  174,  910,  174,
      174,  931,  909,  174,  931,  174,  174,  174,  174,  174,
      174,  174,  911,  174,  174,  174,  174,  174,  174,  174,
      174,  912,  174,  916,  174,  174,  174,  174,  913,  174,
      174,  914,  174,  174,  917,  915,  174,  174,  174,  911,
      174,  174,  174,  174,  174,  174,  174,  174,  918,  919,
      916,  920,  174,  921,  174,  913,  174,  174,  914,  931,
      174,  917,  915,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  174,  931,  174,  918,  919,  174,  920,  927,

      921,  922,  923,  174,  174,  924,  174,  174,  174,  174,
      174,  925,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  928,  929,  174,  174,  174,  927,  931,  922,  923,
      174,  926,  924,  174,  174,  174,  174,  174,  925,  174,
      174,  174,  174,  174,  174,  174,  174,  174,  928,  929,
      174,  930,  174,  931,  174,  931,  931,  174,  926,  931,
      931,  174,  931,  931,  174,  931,  174,  174,  174,  174,
      174,  931,  174,  174,  174,  931,  931,  931,  930,  931,
      931,  174,  931,  931,  174,  931,  931,  931,  174,  931,
      931,  931,  931,  174,  931,  931,  931,  931,  931,  931,

      931,  174,   77,  931,  931,   77,   78,  931,   78,   78,
      162,  931,  162,  162,  164,  931,  164,  164,  165,  931,
      165,  165,  174,  931,  174,  174,    5,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931

    } ;

static yyconst flex_int16_t yy_chk[3793] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    7,    8,    8,   14,   14,   15,   15,   17,   18,
       17,   23,   21,   24,   21,   26,   17,   23,   17,   21,
       27,   24,   22,   17,   21,  934,   33,   88,   22,   18,
      349,   22,   42,   42,   22,   17,   18,   17,   23,   21,
       24,   21,   26,   17,   23,   17,   21,   27,   24,   22,
       17,   21,   25,   33,   88,   22,   18,   19,   22,   25,
       25,   22,   28,   29,   19,   25,   28,   29,  250,   34,

       38,   19,   28,   34,   19,   19,   43,   43,   38,   25,
       49,   49,   50,   50,   19,  169,   25,   25,  168,   28,
       29,   19,   25,   28,   29,   30,   34,   38,   19,   28,
       34,   19,   19,   20,   62,   38,   31,   20,   32,   30,
       89,   20,   39,   39,   31,   30,   30,   20,   31,   32,
       20,   31,   30,  165,   62,   32,  164,   37,   82,   37,
       20,   62,   37,   31,   20,   32,   30,   89,   20,   39,
       39,   31,   30,   30,   20,   31,   32,   20,   31,   75,
       58,   62,   32,   35,   37,   35,   37,   58,   35,   37,
       76,   76,   92,   58,   81,   35,   35,   83,   83,   75,

       58,   35,  163,  163,   78,   90,   75,   58,  170,  170,
       35,   96,   35,   90,   58,   35,   77,   59,   51,   92,
       58,   59,   35,   35,   99,   59,   75,   58,   35,   36,
       36,   91,   90,   36,   91,   61,   36,   36,   96,   48,
       90,   59,   47,   36,   59,   61,   36,   46,   59,   68,
       44,   99,   59,   16,   13,   61,   36,   36,   91,   95,
       36,   91,   61,   36,   36,   68,   95,   64,   59,   68,
       36,   64,   61,   36,   52,   52,   68,   52,   52,   52,
       52,   52,   61,   52,   52,   52,   95,   64,   97,   52,
       97,   52,   68,   95,   64,  100,   68,   52,   64,   52,

      102,  102,   12,   63,   52,   11,    5,   63,    0,    0,
        0,    0,    0,   63,   64,   97,   52,   97,   52,  103,
        0,    0,  100,   63,   52,   69,   52,  102,  102,   69,
       63,   52,   53,   53,   63,   53,   53,   53,   53,   53,
       63,   53,   53,   53,    0,   69,  103,   73,   53,   93,
       63,   73,   69,  104,   98,   73,   69,   74,  105,  106,
       74,   74,  107,   93,   98,  109,  110,    0,   53,    0,
      111,   73,   69,    0,   73,   53,   93,   74,   73,  112,
      104,   98,   73,    0,   74,  105,  106,   74,   74,  107,
       93,   98,  109,  110,  101,   53,   54,  111,   73,  101,

       54,  113,  114,   54,   74,  101,  112,  118,  120,  108,
       54,  108,  101,   54,   54,  108,  115,    0,  121,  115,
       54,  101,  108,   54,  122,    0,  101,   54,  113,  114,
       54,  123,  101,    0,  118,  120,  108,   54,  108,  101,
       54,   54,  108,  115,  119,  121,  115,   54,   55,  108,
      116,  122,   55,  126,  119,  116,   55,  127,  123,  119,
      119,  124,   55,  124,  125,   55,  125,  128,  129,  130,
      131,  119,   55,    0,  132,   55,  134,  116,  135,   55,
      126,  119,  116,   55,  127,  136,  119,  119,  124,   55,
      124,  125,   55,  125,  128,  129,  130,  131,  137,   55,

       56,  132,  138,  134,  139,  135,  138,   56,  140,   56,
      141,  142,  136,  140,   56,  143,  144,  145,  146,   56,
       56,    0,  147,  143,  148,  137,  149,   56,  150,  138,
      151,  139,  152,  138,   56,  140,   56,  141,  142,  150,
      140,   56,  143,  144,  145,  146,   56,   56,   57,  147,
      143,  148,   57,  149,  153,  150,  154,  151,   57,  152,
      155,   57,  156,  155,   57,  157,  150,  158,   57,    0,
        0,  159,  160,  161,  252,   57,  254,    0,    0,   57,
        0,  153,  174,  154,  159,   57,    0,  155,   57,  156,
      155,   57,  157,  176,  158,   57,   60,   60,  159,  160,

      161,  252,  174,  254,   60,   60,  175,  175,  176,  174,
       60,  159,    0,  176,  255,    0,   60,    0,    0,  181,
      176,    0,    0,   60,   60,  258,  259,  175,  260,  174,
        0,   60,   60,  175,  175,  176,  262,   60,    0,  181,
      176,  255,  177,   60,   65,  179,  181,  179,   65,  177,
        0,  263,  258,  259,  175,  260,  178,  177,   65,  178,
      178,  264,  177,  262,   65,   65,  181,  179,   65,  177,
        0,   65,  179,    0,  179,   65,  177,  183,  263,  265,
      178,  183,    0,  178,  177,   65,  178,  178,  264,  177,
      185,   65,   65,  266,  179,   65,   66,   66,  180,  180,

      185,  183,    0,  268,  183,   66,  265,  178,  183,   66,
      185,    0,   66,  180,  269,  182,   66,  185,  180,    0,
      266,    0,  182,   66,   66,  180,  180,  185,  183,  182,
      268,    0,   66,  270,    0,  182,   66,  185,  187,   66,
      180,  269,  182,   66,   67,  180,  186,  196,   67,  182,
      184,  272,  273,  187,  196,   67,  182,  184,  187,  184,
      270,   67,  182,  186,  274,  187,  186,  196,   67,    0,
      184,   67,    0,  186,  196,   67,    0,  184,  272,  273,
      187,  196,   67,  190,  184,  187,  184,    0,   67,    0,
      186,  274,  189,  186,  196,   67,   70,  184,   70,  190,

      275,   70,  192,  190,    0,  189,  189,  276,   70,   70,
      190,  191,  189,  277,   70,  194,  192,  194,   70,  189,
        0,  191,  192,   70,    0,   70,  190,  275,   70,  192,
      190,  191,  189,  189,  276,   70,   70,  194,  191,  189,
      277,   70,  194,  192,  194,   70,   71,   71,  191,  192,
       71,  193,  193,   71,   71,  197,  198,    0,  191,    0,
       71,  279,  280,   71,  194,  281,  198,    0,  197,    0,
       71,    0,  193,   71,   71,  197,  198,   71,  193,  193,
       71,   71,  197,  198,  204,    0,  200,   71,  279,  280,
       71,    0,  281,  198,  199,  197,  200,   71,   72,  193,

      201,  199,  197,  198,  204,    0,  200,   72,    0,   72,
      201,  204,   72,  200,  199,  202,  282,  283,   72,    0,
      201,  199,    0,  200,    0,   72,  284,  201,  199,  202,
        0,  204,  202,  200,   72,  202,   72,  201,    0,   72,
      203,  199,  202,  282,  283,   72,  188,  201,  209,  203,
      188,  188,  205,  284,  203,    0,  202,  188,    0,  202,
      203,    0,  202,  205,  188,  207,  286,  203,  209,    0,
      188,    0,  205,  188,  207,  209,  203,  188,  188,  205,
      287,  203,  208,  288,  188,  207,  208,  203,  210,  210,
      205,  188,  207,  286,  261,  209,  261,  188,  195,  205,

      195,  207,  208,    0,  195,    0,  213,  287,  210,  208,
      288,  195,  207,  208,    0,  210,  210,    0,    0,  213,
      195,  261,    0,  261,  211,  195,  213,  195,  289,  208,
      211,  195,  211,  213,    0,  210,    0,    0,  195,  271,
      290,  212,    0,  212,  211,  212,  213,  195,  206,  206,
        0,  211,  291,  213,  271,  289,    0,  211,  206,  211,
      219,  219,    0,  206,  206,  212,  271,  290,  212,  206,
      212,  211,  212,  214,  215,  206,  206,  217,  292,  291,
      219,  271,  214,  216,  217,  206,  220,  219,  219,  215,
      206,  206,  212,  214,  215,  218,  206,  217,  216,  218,

      214,  215,  293,  216,  217,  292,  220,  219,    0,  214,
      216,  217,  222,  220,  221,  221,  215,    0,  223,  218,
      214,  215,  218,  294,  217,  216,  218,  222,  295,  293,
      216,  223,  222,  220,    0,  221,  224,    0,  223,  222,
      224,  221,  221,    0,  225,  223,  218,  296,  225,  226,
      294,  297,  227,  226,  222,  295,    0,  299,  223,  222,
      224,  227,  221,  224,  225,  223,  227,  224,  300,  226,
      229,  225,  227,  229,  296,  225,  226,    0,  297,  227,
      226,  228,  231,  228,  299,    0,    0,  224,  227,    0,
      229,  225,  231,  227,  232,  300,  226,  229,  230,  227,

      229,  228,  231,  235,  234,  230,  235,  232,  228,  231,
      228,  233,  234,  230,  232,  233,  236,  229,  230,  231,
        0,  232,  302,  236,  234,  230,  235,    0,  228,  231,
      235,  234,  230,  235,  232,  233,  236,  238,  233,  234,
      230,  232,  233,  236,  303,  230,  237,  239,  240,  302,
      236,  234,    0,  235,  237,  239,  241,  238,    0,  240,
      304,  305,  233,  236,  238,  237,  237,  239,  240,  306,
        0,  303,  241,  237,  239,  240,  241,    0,    0,  243,
      243,  237,  239,  241,  238,  244,  240,  304,  305,  244,
        0,  245,  237,  237,  239,  240,  306,  242,  245,  241,

      243,  242,  246,  241,  242,  244,  243,  243,  307,  308,
      247,  245,  244,  298,  309,  246,  244,  242,  245,  248,
      311,  312,  246,  298,  242,  245,  313,  243,  242,  246,
      247,  242,  244,  314,  248,  307,  308,  247,  245,  248,
      298,  309,  246,  315,  242,  316,  248,  311,  312,  246,
      298,  317,  318,  313,  319,  320,  321,  247,  322,  323,
      314,  248,  324,  325,  316,  327,  248,  328,  329,  331,
      315,  333,  316,  334,  335,  336,  338,  340,  317,  318,
      341,  319,  320,  321,  342,  322,  323,  343,  344,  324,
      325,  316,  327,  345,  328,  329,  331,  339,  333,  339,

      334,  335,  336,  338,  340,  346,  347,  341,  350,  346,
      351,  342,    0,    0,  343,  344,    0,    0,  352,  353,
      345,  355,  354,  356,  339,    0,  339,    0,  350,  354,
      351,    0,  346,  347,  357,  350,  346,  351,  352,  353,
      358,  355,  354,  356,  357,  352,  353,    0,  355,  354,
      356,  360,  359,  360,  357,  350,  354,  351,  358,  359,
      358,  357,  361,    0,    0,  352,  353,  358,  355,  354,
      356,  357,  359,  360,  362,  361,  363,  366,  360,  359,
      360,  357,  361,    0,  364,  358,  359,  358,  364,  361,
      362,  363,  365,  367,  362,    0,  363,  366,    0,  359,

      360,  362,  361,  363,  366,  447,  365,  368,  364,  361,
      370,  364,  365,  367,  368,  364,  372,  362,  363,  365,
      367,  362,  369,  363,  366,  370,  369,  368,  376,  371,
      370,  371,  447,  365,  368,  364,  372,  370,    0,  365,
      367,  368,  374,  372,  373,  374,  369,  377,  376,  369,
      375,  371,  370,  369,  368,  376,  371,  370,  371,  373,
      448,  375,  379,  372,  373,  374,  449,  377,    0,  374,
      375,  373,  374,  369,  377,  376,  378,  375,  371,  380,
      378,  380,  379,    0,  381,  383,  373,  448,  375,  379,
      384,  373,  374,  449,  377,  382,    0,  375,  381,  394,

      378,  380,  382,  378,  381,  383,  380,  378,  380,  379,
      384,  381,  383,  385,  388,  382,  386,  384,  450,  394,
        0,  385,  382,  386,  451,  381,  394,  378,  380,  382,
      388,  381,  383,  385,  388,  387,  386,  384,  387,  391,
      385,  388,  382,  386,  389,  450,  394,  389,  385,  390,
      386,  451,  392,  390,  391,  395,    0,  388,  387,  391,
      385,  388,  387,  386,  389,  387,  391,  392,  393,  390,
      396,  389,  392,  397,  389,  395,  390,    0,  393,  392,
      390,  391,  395,  397,  400,  387,  391,  398,  393,  399,
      396,  389,  402,  397,  392,  393,  390,  396,  399,  392,

      397,    0,  395,  398,  400,  393,  401,  398,  453,  399,
      397,  400,  402,    0,  398,  393,  399,  396,  403,  402,
      397,  401,  403,  404,  404,  399,  401,  406,  405,  406,
      398,  400,  405,  401,  398,  453,  399,  456,  403,  402,
      409,  407,  408,    0,  404,  403,    0,  406,  401,  403,
      404,  404,  405,  401,  406,  405,  406,  407,  408,  405,
      409,  407,  408,  410,  456,  403,    0,  409,  407,  408,
      410,  404,  457,  411,  406,  413,  414,  458,  412,  405,
        0,    0,  459,  410,  407,  408,  411,  409,  407,  408,
      410,  461,  412,  411,    0,  413,  414,  410,  412,  457,

      411,    0,  413,  414,  458,  412,  462,  415,  416,  459,
      410,  415,  463,  411,    0,    0,  417,  416,  461,  412,
      411,  418,  413,  414,    0,  412,  415,  417,  416,  418,
      419,  415,  421,  462,  415,  416,  417,    0,  415,  463,
      423,  418,  420,  417,  416,  419,  420,  421,  418,    0,
      419,  424,  421,  415,  417,  416,  418,  419,  415,  421,
      423,  422,  425,  417,  422,  426,  420,  423,  418,  420,
        0,  424,  419,  420,  421,  427,  429,  419,  424,  421,
      431,  422,  425,  426,  428,  426,  432,  423,  422,  425,
      427,  422,  426,  420,  430,  427,  429,  432,  424,  428,

      431,  430,  427,  429,  428,  433,  432,  431,  422,  425,
      426,  428,  426,  432,  430,  435,  436,  427,  464,    0,
      433,  430,  427,  429,  432,  433,  428,  431,  430,  434,
      437,  428,  433,  432,  438,  435,  436,  466,  434,  437,
      467,  430,  435,  436,  438,  464,  438,  433,  439,  434,
      437,    0,  433,    0,  438,  440,  434,  437,  439,  440,
      441,  438,  435,  436,  466,  434,  437,  467,  439,  441,
        0,  438,  442,  438,    0,  439,  434,  437,  444,  440,
      441,  438,  440,  443,    0,  439,  440,  441,  442,  468,
      471,  445,  442,  444,  446,  439,  441,  446,  444,  442,

      445,  443,  472,  443,  445,  444,  440,  441,  473,  474,
      443,  445,  475,  479,  446,  442,  468,  471,  445,  442,
      444,  446,  480,  482,  446,  444,  484,  445,  443,  472,
      443,  445,  485,  486,  487,  473,  474,  488,  445,  475,
      479,  446,  491,  489,  495,  497,  498,  499,  500,  480,
      482,  502,  503,  484,  489,  504,  505,  506,  509,  485,
      486,  487,  510,  512,  488,  513,  514,  515,  516,  491,
      489,  495,  497,  498,  499,  500,  518,  519,  502,  503,
      520,  489,  504,  505,  506,  509,  521,  524,  525,  510,
      512,  526,  513,  514,  515,  516,  527,  528,  529,  530,

      531,  533,  535,  518,  519,    0,    0,  520,    0,    0,
        0,  539,    0,  521,  524,  525,  541,  537,  526,  538,
      540,  542,    0,  527,  528,  529,  530,  531,  533,  535,
      537,  539,  538,  540,  544,  545,  541,  537,  539,  538,
      540,  542,    0,  541,  537,  543,  538,  540,  542,  543,
      629,  630,  631,  632,  544,  545,    0,  537,  539,  538,
      540,  544,  545,  541,  537,  546,  538,  540,  542,  543,
      547,  548,  543,  546,  549,  550,  543,  629,  630,  631,
      632,  544,  545,  547,  633,  546,  548,  552,  549,  553,
      547,  548,  546,    0,  549,  550,  543,  547,  548,  551,

      546,  549,  550,  552,  553,  555,  551,  552,    0,  553,
      547,  633,  546,  548,  552,  549,  553,  547,  548,  551,
      554,  549,  550,  559,  554,  555,  551,  556,    0,  556,
      552,  553,  555,  551,  552,  557,  553,  560,  558,  557,
      634,    0,    0,  559,  554,  558,  551,  554,  561,  556,
      559,  554,  555,  563,  556,  557,  556,  560,  558,  561,
        0,  566,  557,  562,  560,  558,  557,  634,  561,  563,
      559,  554,  558,  563,  562,  561,  556,  564,  567,  568,
      563,  566,  557,  562,  560,  558,  561,  565,  566,  569,
      562,  565,  564,  569,    0,  561,  563,  564,  567,  568,

      563,  562,  571,    0,  564,  567,  568,  573,  566,    0,
      562,  565,  570,  569,  565,  575,  569,  576,  565,  564,
      569,  572,  571,  570,  564,  567,  568,  573,  575,  571,
      572,    0,  570,  574,  573,  575,  576,  576,  565,  570,
      569,  572,  575,  574,  576,  577,    0,  580,  572,  571,
      570,  635,    0,  574,  573,  575,  578,  572,  577,  570,
      574,  582,  575,  576,  576,  577,  583,  580,  572,  578,
      574,  579,  577,  579,  580,  581,  578,  584,  635,  586,
      574,  582,  581,  578,  579,  577,  583,    0,  582,    0,
      585,  579,  577,  583,  580,  581,  578,  584,  579,  586,

      579,  588,  581,  578,  584,  585,  586,  587,  582,  581,
      585,  579,    0,  583,  587,  589,  591,  585,  579,  593,
      590,  588,  581,  592,  584,  592,  586,  587,  588,  589,
        0,  594,  585,  590,  587,  589,  591,  585,    0,  593,
      590,  587,  589,  591,  594,  592,  593,  590,  588,  596,
      592,  594,  592,  597,  587,  595,  589,  596,  594,  598,
      590,  599,  589,  591,    0,  599,  593,  590,  595,  596,
      600,  594,  592,  597,  600,  595,  596,    0,  594,  598,
      597,    0,  595,  601,  596,  599,  598,  606,  599,  606,
        0,  602,  599,  604,  600,  595,  596,  600,    0,  602,

      597,  600,  595,  601,  603,  607,  598,  605,  604,  606,
      601,  602,  599,  604,  606,  605,  606,  603,  602,  608,
      604,  600,    0,  610,  603,  607,  602,  605,  612,  609,
      601,  603,  607,  609,  605,  604,  606,  611,  602,  608,
      604,  613,  605,  610,  603,  614,  608,  611,  612,  609,
      610,  603,  607,    0,  605,  612,  609,  611,    0,  614,
      609,  613,    0,  617,  611,  614,  608,  615,  613,  615,
      610,  616,  614,  618,  611,  612,  609,  618,    0,  617,
      616,    0,  621,  617,  611,  620,  614,  620,  613,  615,
      617,  616,  614,  619,  615,  622,  615,  618,  616,  624,

      618,  623,  621,  625,  618,  620,  617,  616,  619,  621,
      617,  626,  620,  619,  620,  622,  615,  623,  616,  624,
      619,  623,  622,  625,  618,  637,  624,  638,  623,  621,
      625,  626,  620,  639,  641,  619,  642,  643,  626,  644,
      619,  645,  622,  646,  623,  647,  624,  648,  623,  649,
      625,  651,  637,  652,  638,  653,  656,  657,  626,  658,
      639,  641,  659,  642,  643,  664,  644,  665,  645,  666,
      646,  669,  647,  670,  648,  671,  649,  672,  651,  673,
      652,  675,  653,  656,  657,  676,  658,  677,  678,  659,
      679,  680,  664,  681,  665,  682,  666,  684,  669,  685,

      670,  686,  671,  688,  672,  689,  673,  691,  675,  692,
        0,  694,  676,    0,  677,  678,    0,  679,  680,  693,
      681,  695,  682,  755,  684,  699,  685,  691,  686,  692,
      688,  694,  689,  700,  691,  697,  692,  698,  694,  693,
      693,  695,  696,  696,  697,  699,  693,  698,  695,    0,
      755,    0,  699,  700,  691,  697,  692,  698,  694,  703,
      700,  704,  697,  696,  698,  701,  693,  693,  695,  696,
      696,  697,  699,    0,  698,  701,  702,  707,  705,  703,
      700,  704,  697,  702,  698,  701,  703,  708,  704,    0,
      696,  706,  701,  705,    0,  757,  702,  707,  705,  711,

      706,  709,  701,  702,  707,  705,  703,  708,  704,  758,
      702,  706,  701,  711,  708,  710,  709,  714,  706,  711,
      705,  709,  757,  702,  707,  705,  711,  706,  709,  712,
      710,  718,  713,  712,  708,  710,  758,  714,  706,  713,
      711,  716,  710,  709,  714,  715,  711,  715,  709,  712,
      759,  718,  713,  719,  716,  717,  712,  710,  718,  713,
      712,  716,  710,  721,  714,  715,  713,  724,  716,  720,
      717,  722,  715,  719,  715,  717,  712,  759,  718,  713,
      719,  716,  717,  721,  720,  722,  723,  724,  716,  720,
      721,  722,  715,  723,  724,  725,  720,  717,  722,  726,

      719,  727,  717,  728,  760,  729,  723,  728,  729,  730,
      721,  720,  722,  723,  724,  725,  720,  731,  722,  726,
      723,  727,  725,  732,  730,  729,  726,  728,  727,  730,
      728,  760,  729,  723,  728,  729,  730,  731,  733,  736,
      734,  737,  725,  732,  731,  737,  726,  762,  727,  735,
      732,  730,  729,  734,  728,  738,  730,  763,  733,  736,
      734,  737,  735,  740,  731,  733,  736,  734,  737,  735,
      732,  766,  737,  739,  762,  738,  735,  739,  740,    0,
      734,  743,  738,  740,  763,  733,  736,  734,  737,  735,
      740,  741,  741,  744,  745,  743,  735,  739,  766,  742,

      739,  743,  738,  742,  739,  740,  744,  746,  743,  745,
      740,  746,  741,  744,  745,  747,    0,  748,  741,  741,
      744,  745,  743,  742,  739,    0,  742,  750,  743,  751,
      742,  746,  754,  744,  746,  747,  745,  748,  746,  741,
      744,  745,  747,  752,  748,  749,  749,  750,    0,  751,
      742,  753,  754,  770,  750,  753,  751,  752,  746,  754,
      772,  775,  747,  752,  748,  778,  749,  779,  781,  782,
      752,  784,  749,  749,  750,  753,  751,  785,  753,  754,
      770,  786,  753,  788,  752,  789,  792,  772,  775,  794,
      752,  795,  778,  749,  779,  781,  782,  796,  784,  801,

      802,  803,  753,  805,  785,  804,  854,    0,  786,  856,
      788,    0,  789,  792,  804,  806,  794,  808,  795,  810,
      802,  803,    0,  805,  796,  804,  801,  802,  803,  806,
      805,  807,  804,  854,  810,  806,  856,  808,  807,  810,
      811,  804,  806,  812,  808,    0,  810,  802,  803,  814,
      805,  807,  804,  809,  815,  809,  806,  813,  807,  813,
      811,  810,  806,  812,  808,  807,  810,  811,  816,  814,
      812,  817,  818,  820,  815,  809,  814,  821,  807,  813,
      809,  815,  809,  822,  813,  819,  813,  811,  816,  823,
      812,  817,  818,  820,  819,  816,  814,  821,  817,  818,

      820,  815,  809,  822,  821,  819,  813,  824,  826,  823,
      822,  827,  819,  825,    0,  816,  823,  861,  817,  818,
      820,  819,  828,  830,  821,  832,  825,  824,  826,  828,
      822,  827,  819,  825,  824,  826,  823,  829,  827,  833,
      825,  829,  828,  830,  861,  832,    0,  831,    0,  828,
      830,  834,  832,  825,  824,  826,  828,  837,  827,  833,
      825,  829,  831,  835,  829,  835,  833,  831,  829,  828,
      830,  834,  832,  836,  831,  838,  839,  837,  834,  840,
        0,  863,    0,  839,  837,  835,  833,  836,  829,  831,
      835,  844,  835,  836,  831,  838,  839,  841,  834,  840,

      836,  841,  838,  839,  837,  842,  840,  845,  863,  842,
      839,  844,  835,  846,  836,  843,  864,  847,  844,    0,
      836,  841,  838,  839,  841,  867,  840,  845,  841,  842,
      843,  870,  842,  846,  845,  843,  842,  847,  844,  848,
      846,  871,  843,  864,  847,  872,  848,  874,  841,  875,
      876,  877,  867,    0,  845,  878,  842,  843,  870,  848,
      846,  879,  843,  880,  847,  879,  848,  874,  871,  875,
      876,  877,  872,  848,  874,  878,  875,  876,  877,  882,
      881,  883,  878,  880,  884,  879,  848,    0,  879,  885,
      880,  886,  879,  886,  874,  881,  875,  876,  877,  882,

      881,  883,  878,  887,  884,    0,  882,  881,  883,  885,
      880,  884,  879,  886,  889,  890,  885,  891,  886,  888,
      886,    0,  881,  887,    0,  893,  882,  881,  883,  894,
      887,  884,  888,  892,  889,  890,  885,  891,  895,  888,
      886,  889,  890,  897,  891,  893,  888,  896,  892,  894,
      887,  895,  893,  892,  899,  896,  894,  898,  895,  888,
      892,  889,  890,  897,  891,  895,  888,  896,  901,  903,
      897,  905,  893,  906,  896,  892,  894,  898,  895,    0,
      892,  899,  896,  909,  898,  895,  908,  910,  911,  913,
      897,  914,  912,    0,  896,  901,  903,  916,  905,  917,

      906,  908,  910,  909,  898,  912,  908,  910,  911,  913,
      909,  914,  912,  908,  910,  911,  913,  916,  914,  912,
      915,  919,  922,  923,  916,  925,  917,    0,  908,  910,
      909,  915,  912,  908,  910,  911,  913,  924,  914,  912,
      915,  926,  922,  923,  916,  925,  929,  915,  919,  922,
      923,  924,  925,    0,  930,    0,    0,  924,  915,    0,
        0,  926,    0,    0,  924,    0,  929,  915,  926,  922,
      923,    0,  925,  929,  930,    0,    0,    0,  924,    0,
        0,  930,    0,    0,  924,    0,    0,    0,  926,    0,
        0,    0,    0,  929,    0,    0,    0,    0,    0,    0,

        0,  930,  932,    0,    0,  932,  933,    0,  933,  933,
      935,    0,  935,  935,  936,    0,  936,  936,  937,    0,
      937,  937,  938,    0,  938,  938,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>

#define TOKEN(name) { return SQL_##name; }

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1615 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * out_str ,yyscan_t yyscanner );

int hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 51 "flex_lexer.l"


#line 1863 "flex_lexer.cpp"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 932 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 931 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 55 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 57 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(PART)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(QUIT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(SUM)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 128:
#line 186 "flex_lexer.l"
case 129:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_STRING;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2637 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 932 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 932 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 931);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "hsql_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void hsql_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 216 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}
